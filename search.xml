<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DevopsTools</title>
    <url>/2020/06/19/DevopsTools/</url>
    <content><![CDATA[<h6 id="Devops-Tools"><a href="#Devops-Tools" class="headerlink" title="Devops Tools"></a>Devops Tools</h6><p>远程管理类</p>
<ul>
<li>VNC</li>
<li>Xshell</li>
<li>SecureCRT</li>
<li>向日葵</li>
<li>远程桌面mstsc</li>
<li>putty</li>
</ul>
<p>虚拟化类</p>
<ul>
<li>vmware</li>
<li>VirtualBox</li>
<li>KVM</li>
<li>docker</li>
</ul>
<p>文本编辑类</p>
<ul>
<li><p>vim</p>
</li>
<li><p>Sublime Text</p>
</li>
<li><p>Notepad++</p>
</li>
<li><p>Typora</p>
</li>
<li><p>wps</p>
</li>
<li><p>word</p>
</li>
</ul>
<p>IDE类</p>
<ul>
<li>IntelliJ IDEA</li>
<li>PyCharm</li>
<li>Visual Studio Code</li>
</ul>
<p>调试类</p>
<ul>
<li>postman</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机基础知识</title>
    <url>/2020/06/19/computer/</url>
    <content><![CDATA[<h3 id="计算机基础知识"><a href="#计算机基础知识" class="headerlink" title="计算机基础知识"></a>计算机基础知识</h3><p>1946年诞生第一台计算机</p>
<p>10.24 程序员生日</p>
<p><strong>计算机：computer</strong></p>
<blockquote>
<p>硬件（hardware）</p>
<p>软件（software）</p>
<p>应用软件：用户程序</p>
<p>积分器：integrator</p>
</blockquote>
<p><strong>位 bit：</strong> </p>
<blockquote>
<p>0和1  </p>
<p>2^1</p>
</blockquote>
<p><strong>字节 byte</strong>:</p>
<blockquote>
<p>8bit  </p>
<p>2^8=256 (0-255) </p>
<p>min:00000000</p>
<p>max:11111111</p>
</blockquote>
<p><strong>二进制转化成十进制</strong></p>
<blockquote>
<p>1=2^0=1</p>
<p>10=2^1=2</p>
<p>100=2^2=4</p>
<p>1000=2^3=8</p>
<p>10000=2^4=16</p>
<p>100000=2^5=32</p>
<p>1000000=2^6=64</p>
<p>10000000=2^7=128</p>
</blockquote>
<p><strong>冯.诺依曼体系：</strong>运算器、控制器、存储器、输入设备、输出设备</p>
<p><strong>摩尔定律</strong>:</p>
<ul>
<li>1965年戈登.摩尔(英特尔（Intel）创始人之一)提出 </li>
<li>价格不变，集成电路上可容纳的元器件数目每隔18-24个月（一年半至两年） 增加一倍，性能特性一倍</li>
</ul>
<p><strong>容量的单位</strong></p>
<blockquote>
<p>1024=1K=2^10</p>
<p>1024k=1M   </p>
<p>1024M=1G</p>
<p>1024G=1T</p>
<p>1024T=1P</p>
<p>1024P=1E</p>
<p>1024E=1Z</p>
<p>1024Z=1Y,B,N,D</p>
</blockquote>
<p><strong>一台服务器配置（IBM 5万左右）</strong></p>
<ul>
<li><p>Intel处理器 Xeon E3 E5 E7</p>
</li>
<li><p>内存：32GB（4*8GB）DDR3</p>
</li>
<li><p>硬盘：SAS接口</p>
</li>
<li><p>RAID卡</p>
</li>
<li><p>4个接口的千兆以太网卡</p>
</li>
</ul>
<h3 id="服务器硬件"><a href="#服务器硬件" class="headerlink" title="服务器硬件"></a>服务器硬件</h3><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>&nbsp;&nbsp;<strong>central processing unit</strong></p>
<p><strong>&nbsp;&nbsp;CPU公司</strong></p>
<ul>
<li>Intel</li>
<li><ul>
<li>Xeon 至强</li>
<li>Itanium 安藤</li>
</ul>
</li>
<li>AMD  (The future is fusion(融合))</li>
<li>Althlon MP</li>
<li>IBM</li>
<li>power</li>
</ul>
<p><strong><br>&nbsp;&nbsp;手机CPU</strong> </p>
<ul>
<li>华为麒麟芯片Kirin </li>
<li>高通骁龙芯片Qualcomm snapdragon </li>
<li>台湾联发科</li>
<li>小米松果CPU</li>
</ul>
<p><strong><br>&nbsp;&nbsp;CPU架构</strong></p>
<ul>
<li>X86</li>
<li>X64</li>
<li>ARM (Acorn RISC Machine ) 手机CPU架构</li>
<li>Power（IBM）</li>
<li>Powerpc (apple,ibm,moto合作开发) 兼容苹果系统</li>
<li>UItrasparc (Sun)</li>
<li>Alpha (HP)     惠普公司</li>
<li>安腾（compaq） 康柏公司(被惠普收购)</li>
</ul>
<p><br><strong>微型计算机CPU发展</strong>    参数（字长/位  主频/MHz  集成度/晶体管数）</p>
<table>
<thead>
<tr>
<th>微处理器</th>
<th></th>
<th>摩尔定律</th>
</tr>
</thead>
<tbody><tr>
<td>4004</td>
<td>1971年</td>
<td>4位</td>
</tr>
<tr>
<td>80286</td>
<td>1982年</td>
<td>16位</td>
</tr>
<tr>
<td>80386</td>
<td>1985年</td>
<td>32位</td>
</tr>
<tr>
<td>80486</td>
<td>1989年</td>
<td></td>
</tr>
<tr>
<td>Pentium</td>
<td>1993年</td>
<td></td>
</tr>
<tr>
<td>Pentium 2</td>
<td>1997年</td>
<td></td>
</tr>
<tr>
<td>Pentium 3</td>
<td>1999年</td>
<td></td>
</tr>
<tr>
<td>Pentium 4</td>
<td>2000年</td>
<td>32位</td>
</tr>
<tr>
<td>Itanium</td>
<td>2001年</td>
<td>64位</td>
</tr>
<tr>
<td>Itanium 2</td>
<td>2002年</td>
<td>64位</td>
</tr>
</tbody></table>
<p><br><strong>按CPU体系架构</strong></p>
<blockquote>
<p>非X86服务器（俗称小型机）使用RISC(精简指令集)或EPIC（并行指令）</p>
<p>代码处理器 采用UNIX和其他专用操作系统（越简单稳定性越好）</p>
<p>X86服务器：CISC（复杂指令集）处理器 通常称为PC服务器   </p>
</blockquote>
<p><br><strong>按CPU个数区分（几颗CPU）</strong></p>
<blockquote>
<p>4路以及4路以上服务器（企业级）</p>
<p>2路服务器（部门级）</p>
<p>1路服务器（入门级）    </p>
</blockquote>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><ul>
<li>物理实质：一组具备数据输入输出和数据存储功能的高速集成电路</li>
<li>CPU能直接寻址的存储空间</li>
<li>所有程序运行都在内存运行</li>
<li>断电后数据丢失</li>
<li>单位一般位“MB”或“GB”</li>
<li>32pin 64pin</li>
<li>内存带宽：内存与北桥芯片之间的数据传输率 64位/8字节（单通道内存节制器）</li>
<li>计算公式：内存总线频率*数据总线位数/8</li>
<li><ul>
<li>DDR2 667  运行频率333MHz  带宽=333264/8=5400MB/s=5.4GB/s</li>
<li>DDR3 800  运行频率400MHZ  带宽=400264/8=6400MDB/s=6.4GB/s</li>
</ul>
</li>
<li>内存与硬盘比较</li>
<li><ul>
<li>机械硬盘 200-300M/s </li>
<li>SSD 500-600M/s</li>
</ul>
</li>
</ul>
<h4 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h4><p><strong>硬盘结构</strong></p>
<blockquote>
<p>盘片———存储介质（Media）</p>
<p>磁头———读写头（Read Write Head）</p>
<p>马达（spindle motor &amp;Voice Coil Motor）7200,10000,15000rpm</p>
<p>RPM:Revolution Per Minute(每分钟转速) 旋转次数</p>
</blockquote>
<p><strong>硬盘基本参数</strong> </p>
<blockquote>
<p>容量：单位MB、GB、TB</p>
<p>转速：单位rpm  盘片每分钟转动的圈数</p>
<p>传输速率：data transfer rate 硬盘读写数据的速度 单位MB/s</p>
<p>缓存：解决前后级读写数据不匹配    </p>
</blockquote>
<p><strong>硬盘接口类型</strong> </p>
<blockquote>
<p>(ATA:Advanced Technology Attachment)</p>
<p>IDE接口： 采用ATA技术规范   并行接口  电磁干扰</p>
<p>SCSI接口：应用于小型机上（高速数据传输） 并行接口</p>
<p>SATA接口：Serial ATA  应用于家用PC    串行接口  </p>
<p>SAS接口：Serial Attached SCSI,兼容SATA  串行接口  </p>
<p>SSD磁盘：Solid State Disk（固态硬盘）  使用NAND Flash组成</p>
<p>目前主流：SATA和SAS接口</p>
</blockquote>
<h4 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h4><blockquote>
<p>服务器都在主板上集成，但容量不高 一般位16M或32M</p>
<p>GPU：Graphic Processing Unit(图形处理器)</p>
</blockquote>
<h4 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h4><blockquote>
<p>服务器都在主板上集成，传输速率为1Gbps/1000Mb/s（千兆网卡）</p>
<p>高端网卡：光纤网卡，Infiniband网卡等 10Gbps、20Gbps（万兆网卡）</p>
<p>热插拔:称为热交换技术（Hot Swap）</p>
<p>机柜：放置Rack服务器 通常是42U（高度约2米）</p>
<p>机架及其配件 KVM（Keyboard Video Mouse） </p>
<p>电源：PDU(Power Distribution Unit)电源分布单元–管理电源</p>
</blockquote>
<h4 id="存储网络"><a href="#存储网络" class="headerlink" title="存储网络"></a>存储网络</h4><blockquote>
<p>ZIP软盘    </p>
<p>光驱/光盘</p>
<p>磁盘阵列</p>
<ul>
<li>DAS–直接连接存储（Direct Attached Storage）</li>
<li>NAS–网络连接存储（Network Attached Storage）</li>
<li>SAN–存储区域网络（Storage Area Networks）</li>
</ul>
</blockquote>
<h3 id="操作系统OS"><a href="#操作系统OS" class="headerlink" title="操作系统OS"></a>操作系统OS</h3><h4 id="OS分类"><a href="#OS分类" class="headerlink" title="OS分类"></a>OS分类</h4><blockquote>
<p>服务器OS:RHEL,CentOS,Windows Server（目前版本windows Server 2016）,AIX  </p>
<p>桌面OS：Windows 10,Windows 7,Mac OS,Fedora(浅顶软呢帽)</p>
<p>移动设备OS:Andriod,IOS,YunOS</p>
</blockquote>
<h4 id="开发接口标准"><a href="#开发接口标准" class="headerlink" title="开发接口标准"></a>开发接口标准</h4><blockquote>
<p>ABI:Application Binary Interface 应用程序与OS之间的底层接口，允许目标代码在兼容ABI的系统中能运行</p>
<p>API:Application Programming Interface 源代码和库之间的接口，同样的源代码可以在API兼容系统中编译</p>
<p>POSIX:Portable Operating System Interface  </p>
</blockquote>
<h4 id="运行程序格式"><a href="#运行程序格式" class="headerlink" title="运行程序格式"></a>运行程序格式</h4><blockquote>
<p>Windows: EXE, .dll(dynamic link library)动态库，.lib静态库</p>
<p>Linux: ELF，.so(shared object)动态库, .a静态库</p>
<p>安卓软件包 .apk  </p>
</blockquote>
<h4 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h4><blockquote>
<p>低级语言</p>
<ul>
<li>机器语言 0和1</li>
<li>编程语言 和机器语言一一对应，与硬件相关</li>
</ul>
<p>中级语言 C 跨平台</p>
<ul>
<li>系统级应用、驱动程序</li>
</ul>
<p>高级语言    </p>
<ul>
<li>Java，Objective-C(苹果系统开发)，C#,python（豆瓣）,php,go</li>
</ul>
<p>应用级程序开发 </p>
</blockquote>
<h4 id="服务器三大OS"><a href="#服务器三大OS" class="headerlink" title="服务器三大OS"></a>服务器三大OS</h4><blockquote>
<p>windows</p>
<p>Linux:GNU/Linux</p>
<p>Unix:1969年Ken Thompson</p>
<ul>
<li>system：Bell Lab  AIX(IBM)  Solaris(SUN) HP-UX(HP)</li>
<li>BSD:(BSRG) Berkeley System Distribution</li>
<li>NetBSD</li>
<li>OpenBSD</li>
<li>FreeBSD      </li>
</ul>
</blockquote>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="Linux的发展历史"><a href="#Linux的发展历史" class="headerlink" title="Linux的发展历史"></a>Linux的发展历史</h4><blockquote>
<p>1964年</p>
<ul>
<li>Multics：由贝尔实验室（bell）、麻省理工学院（MIT）及奇异公司GE（美国通用电气公司）共同开发</li>
<li>目的：大型主机同时支持300以上的终端机连接使用</li>
</ul>
<p>1969年</p>
<ul>
<li>bell退出</li>
<li>Ken Thompson（UNIX发明人，鼻祖）毕业于加州大学伯克利分校（1966年）</li>
<li>一切为了游戏—-&gt;基于Multics开发了“Star travle”游戏</li>
<li>unix PV  Multics  </li>
</ul>
<p>1969年</p>
<ul>
<li>Unix诞生—-&gt;Unics  </li>
<li>Linux创始人林纳斯（Linus Benedict Torvalds）出生</li>
<li>Ken Thompson 汇编语言 B语言</li>
</ul>
<p>1973年</p>
<ul>
<li>正式命名为Unix</li>
<li>Dennis Ritchie发明C语言</li>
</ul>
<p>1977 BSD</p>
<ul>
<li>Berkeley Software Distribution 伯克利大学</li>
</ul>
<p>1979 System V架构版权声明</p>
<ul>
<li>HP-Unix IBM AIX“不对学生提供源码”收回版权</li>
</ul>
<p>1984年 Minix操作系统 </p>
<ul>
<li>Andrew S. Tanenbaum荷兰阿姆斯特丹自由大学计算机科学系    </li>
</ul>
<p>1984年 GNU(GNU is Not Unix) Richard Stallman发起创建</p>
<ul>
<li>目的：编写大量兼容Unix系统的自由软件</li>
<li>官网：<a href="http://www.gnu.org" target="_blank" rel="noopener">http://www.gnu.org</a></li>
<li>GPL(GNU General Public LIcense)</li>
<li>Free Software Foundation（自由软件基金会）</li>
<li>LGPL(Lesser GPL)</li>
<li>GNU操作系统：Hurd Hird of Unix-Replacing Daemons</li>
<li>相关资料 <a href="http://www.gnu.org/software/hurd/hurd.html" target="_blank" rel="noopener">http://www.gnu.org/software/hurd/hurd.html</a></li>
</ul>
</blockquote>
<h4 id="Linux起源"><a href="#Linux起源" class="headerlink" title="Linux起源"></a>Linux起源</h4><ul>
<li>官网：<a href="http://www.kelnel.org" target="_blank" rel="noopener">www.kelnel.org</a></li>
<li>1991年10月5号 Torvalds 在comp.os.minix新闻组宣布自编的完全自由免费内核诞生（freeminix-like kernel sources for 386-AT）—–FREAX</li>
<li>FREAX英文含义：怪物，异想天开，怪诞的</li>
<li>类Unix内核，GPL下发布</li>
<li>Linux操作系统：完整的类Unix操作系统=Linux内核+GNU工具</li>
</ul>
<blockquote>
<p>发行版本 </p>
<ul>
<li>slackware</li>
<li>SUSE Linux Enterprise(SLES)</li>
<li>OpenSuse桌面</li>
<li>debian：ubuntu,mint</li>
<li>redhat:RHEL：RedHat Enterprise Linux</li>
<li>redhat:每18个月发行一个新版本</li>
<li>CentOS:兼容RHEL格式</li>
<li>Fedora:每6个月发行一个新版本</li>
<li>中标麒麟：中标软件</li>
<li>ArchLinux：简洁轻量级</li>
<li>Gentoo:高性能型</li>
<li>LFS：Linux From scratch 自制Linux（Linux构建说明书）</li>
<li>Android：kernel+busybox(工具箱)+Java虚拟机</li>
<li>参考网站：<a href="http://futurist.se/gldt" target="_blank" rel="noopener">http://futurist.se/gldt</a></li>
</ul>
</blockquote>
<h4 id="Linux内核版本"><a href="#Linux内核版本" class="headerlink" title="Linux内核版本"></a>Linux内核版本</h4><blockquote>
<p>由3部分组成  例如：3.10.0-123.el7 </p>
<ul>
<li>主版本号</li>
<li>次版本号  奇数表示开发版 偶数表示稳定版</li>
<li>末版本号</li>
<li>编译版本号</li>
<li>厂商版本号</li>
</ul>
</blockquote>
<h4 id="Linux哲学思想"><a href="#Linux哲学思想" class="headerlink" title="Linux哲学思想"></a>Linux哲学思想</h4><blockquote>
<p>一切皆文件</p>
<p>配置数据存储在文本中（windows存储在注册表中的二进制文件）</p>
<p>短小精干，功能单一</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>LAMP</title>
    <url>/2020/06/17/lamp/</url>
    <content><![CDATA[<h4 id="一、LAM-M-P介绍"><a href="#一、LAM-M-P介绍" class="headerlink" title="一、LAM(M)P介绍"></a>一、<strong>LAM(M)P介绍</strong></h4><blockquote>
<p>L: linux<br>A: apache (httpd)<br>M: mysql, mariadb<br>M:memcached<br>P: php, perl, python</p>
</blockquote>
<p>WEB资源类型：</p>
<blockquote>
<p>静态资源：原始形式与响应内容一致<br>动态资源：原始形式通常为程序文件，需要在服务器端执行之后，将执行结果返回给客户端</p>
</blockquote>
<p>Web相关语言</p>
<blockquote>
<p>客户端技术： javascript， html<br>服务器端技术： php, jsp,python  </p>
</blockquote>
<p>CGI</p>
<blockquote>
<p>程序=指令+数据<br>指令：代码文件<br>数据：数据存储系统、 文件</p>
<p>CGI： Common Gateway Interface<br>可以让一个客户端，从网页浏览器通过http服务器向执行在网络服务器上的程序传输数据； CGI描述了客户端和服务器程序之间传输的一种标准</p>
</blockquote>
<p>请求流程：</p>
<blockquote>
<p>Client – (httpd) –&gt; httpd – (cgi) –&gt;application server (program file) – (mysql) –&gt; mysql</p>
</blockquote>
<p>php: </p>
<blockquote>
<p>脚本编程语言、嵌入到html中的嵌入式web程序语言基于zend编译成opcode（二进制格式的字节码，重复运行，可省略编译环境）  </p>
</blockquote>
<p>LAMP工作原理</p>
<p><img src="/images/lamp/lamp2.jpg" alt=""></p>
<h4 id="二、php介绍"><a href="#二、php介绍" class="headerlink" title="二、php介绍"></a><strong>二、php介绍</strong></h4><p>官网： <a href="http://www.php.net/" target="_blank" rel="noopener">http://www.php.net/</a></p>
<ol>
<li><p><strong>php的发展历史</strong></p>
<blockquote>
<p>PHP是通用服务器端脚本编程语言，主要用于web开发实现动态web页面，也是最早实现将脚本嵌入HTML源码文档中的服务器端脚本语言之一。同时， php还提供了一个命令行接口，因此，其也可以在大多数系统上作为一个独立的shell来使用</p>
<p>Rasmus Lerdorf于1994年开始开发PHP，它最初是一组被Rasmus Lerdorf称作“Personal Home Page Tool” 的Perl脚本， 这些脚本可以用于显示作者的简历并记录用户对其网站的访问。后来， Rasmus Lerdorf使用C语言将这些Perl脚本重写为CGI程序，还为其增加了运行Web forms的能力以及与数据库交互的特性，并将其重命名为“Personal Home Page/Forms Interpreter”或“PHP/FI”。此时， PHP/FI已经可以用于开发简单的动态web程序了，这即PHP1.0。 1995年6月，Rasmus Lerdorf把它的PHP发布于comp.infosystems.ww.authoring.cgiUsenet讨论组，从此PHP开始走进人们的视野。 1997年，其2.0版本发布。</p>
<p>1997年，两名以色列程序员Zeev Suraski和Andi Gutmans重写的PHP的分析器(parser)成为PHP发展到3.0的基础，而且从此将PHP重命名为PHP: HypertextPreprocessor。此后，这两名程序员开始重写整个PHP核心，并于1999年发布了Zend Engine 1.0，这也意味着PHP 4.0的诞生。 </p>
<p>2004年7月， Zend Engine 2.0发布，由此也将PHP带入了PHP 5时代。 PHP5包含了许多重要的新特性，如增强的面向对象编程的支持、支持PDO(PHP Data Objects)扩展机制以及一系列对PHP性能的改进</p>
</blockquote>
</li>
<li><p><strong>Zend Engine</strong></p>
<blockquote>
<p>Zend Engine是开源的、 PHP脚本语言的解释器，它最早是由以色列理工学院(Technion)的学生Andi Gutmans和ZeevSuraski所开发， Zend也正是此二人名字的合称。后来两人联合创立了Zend Technologies公司</p>
<p>Zend Engine 1.0于1999年随PHP 4发布，由C语言开发且经过高度优化，并能够做为PHP的后端模块使用。 Zend Engine为PHP提供了内存和资源管理的功能以及其它的一些标准服务，其高性能、可靠性和可扩展性在促进PHP成为一种流行的语言方面发挥了重要作用</p>
<p>Zend Engine的出现将PHP代码的处理过程分成了两个阶段：首先是分析PHP代码并将其转换为称作Zend opcode的二进制格式(类似Java的字节码)，并将其存储于内存中；第二阶段是使用Zend Engine去执行这些转换后的Opcode  </p>
</blockquote>
</li>
<li><p><strong>Opcode</strong></p>
<blockquote>
<p>Opcode是一种PHP脚本编译后的中间语言，类似于Java的ByteCode,或者.NET的MSL。PHP执行PHP脚本代码一般会经过如下4个步骤(确切的来说，应该是PHP的语言引擎Zend)<br>1、 Scanning 词法分析,将PHP代码转换为语言片段(Tokens)<br>2、 Parsing 语义分析,将Tokens转换成简单而有意义的表达式<br>3、 Compilation 将表达式编译成Opocdes<br>4、 Execution 顺次执行Opcodes，每次一条，从而实现PHP脚本的功能  </p>
<p>扫描–&gt;分析–&gt;编译–&gt;执行  </p>
</blockquote>
</li>
<li><p><strong>php的配置</strong></p>
<blockquote>
<p>php：脚本语言解释器</p>
<p>配置文件： /etc/php.ini, /etc/php.d/*.ini<br>配置文件在php解释器启动时被读取<br>对配置文件的修改生效方法<br>1) Modules：重启httpd服务<br>2) FastCGI：重启php-fpm服务</p>
<p>/etc/php.ini配置文件格式：<br>[foo]： Section Header<br>directive = value</p>
<p>注释符：较新的版本中，已经完全使用;进行注释<br>#：纯粹的注释信息<br>;：用于注释可启用的directive  </p>
<p>php.ini的核心配置选项文档：<br><a href="http://php.net/manual/zh/ini.core.php" target="_blank" rel="noopener">http://php.net/manual/zh/ini.core.php</a></p>
<p>php.ini配置选项列表：<br><a href="http://php.net/manual/zh/ini.list.php" target="_blank" rel="noopener">http://php.net/manual/zh/ini.list.php</a></p>
<p>php语言格式<br>&lt;?php<br>…php code…<br>?  </p>
</blockquote>
</li>
<li><p><strong>php设置</strong></p>
<blockquote>
<p>max_execution_time= 30 最长执行时间30s</p>
<p>memory_limit 128M 生产不够，可调大</p>
<p>display_errors off 调试使用，不要打开，否则可能暴露重要信息</p>
<p>display_startup_errors off 建议关闭</p>
<p>post_max_size 8M 最大上传数据大小，生产可能临时要调大，比下面项要大</p>
<p>upload_max_filesize 2M 最大上传文件，生产可能要调大</p>
<p>max_file_uploads = 20 同时上传最多文件数</p>
<p>date.timezone =Asia/Shanghai 指定时区</p>
<p>short_open_tag=on 开启短标签,如&lt;? phpinfo();?  </p>
</blockquote>
</li>
<li><p><strong>php的加速器</strong></p>
<blockquote>
<p>php的加速器：基于PHP的特殊扩展机制如opcode缓存扩展也可以将opcode缓存于php的共享内存中，从而可以让同一段代码的后续重复执行时跳过编译阶段以提高性能。这些加速器并非真正提高了<br>opcode的运行速度，而仅是通过分析opcode后并将它们重新排列以达到快速执行的目的</p>
<p>常见的php加速器有：<br>1、APC (Alternative PHP Cache)<br>遵循PHP License的开源框架， PHP opcode缓存加速器，目前的版本不适用于PHP 5.4<br>项目地址<a href="http://pecl.php.net/package/APC" target="_blank" rel="noopener">http://pecl.php.net/package/APC</a></p>
<p>2、eAccelerator<br>源于Turck MMCache，早期的版本包含了一个PHP encoder和PHP loader，目前encoder已经不在支持。项目地址<a href="http://eaccelerator.net/" target="_blank" rel="noopener">http://eaccelerator.net/</a>  </p>
<p>3、XCache<br>快速而且稳定的PHP opcode缓存，经过严格测试且被大量用于生产环境。项目地址： <a href="http://xcache.lighttpd.net/,收录EPEL源" target="_blank" rel="noopener">http://xcache.lighttpd.net/,收录EPEL源</a></p>
<p>4、Zend Optimizer和Zend Guard Loader<br>Zend Optimizer并非一个opcode加速器，它是由ZendTechnologies为PHP5.2及以前的版本提供的一个免费、闭源的PHP扩展，其能够运行由Zend Guard生成的加密的PHP代码或模糊代码。而Zend Guard Loader则是专为PHP5.3提供的类似于ZendOptimizer功能的扩展</p>
<p>项目地址<a href="http://www.zend.com/en/products/guard/runtime-decoders" target="_blank" rel="noopener">http://www.zend.com/en/products/guard/runtime-decoders</a></p>
<p>5、NuSphere PhpExpress<br>NuSphere的一款开源PHP加速器，它支持装载通过NuSphere<br>PHP Encoder编码的PHP程序文件，并能够实现对常规PHP文件的<br>执行加速。项目地址，<br><a href="http://www.nusphere.com/products/phpexpress.htm" target="_blank" rel="noopener">http://www.nusphere.com/products/phpexpress.htm</a>  </p>
</blockquote>
</li>
<li><p><strong>http与php结合的方式</strong></p>
<blockquote>
<p>CGI<br>FastCGI<br>modules (将php编译成为httpd的模块,默认方式)</p>
<p>MPM:<br>prefork: libphp5.so<br>event, worker: libphp5-zts.so  </p>
</blockquote>
</li>
</ol>
<h4 id="三、快速部署LAMP"><a href="#三、快速部署LAMP" class="headerlink" title="三、快速部署LAMP"></a>三、快速部署LAMP</h4><ol>
<li>CentOS 7:<br>Modules： httpd, php, php-mysql, mariadb-server<br>FastCGI： httpd, php-fpm, php-mysql, mariadb-server</li>
<li>CentOS 6：<br>Modules:httpd, php, php-mysql, mysql-server<br>FastCGI:默认不支持  </li>
</ol>
<h4 id="四、常见LAMP应用"><a href="#四、常见LAMP应用" class="headerlink" title="四、常见LAMP应用"></a>四、常见LAMP应用</h4><ol>
<li>PhpMyAdmin是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库</li>
<li>WordPress是一种使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。也可把WordPress当作一个内容管理系统（ CMS）来使用</li>
<li>PHPWind:2003年发布了PHPWind的前身版本ofstar，并发展成为包含BBS、 CMS、博客、 SNS等一系列程序的通用型建站软件, 于2008年加入阿里巴巴集团</li>
<li>Crossday Discuz! Board（简称 Discuz!）是一套通用的社区论坛软件系统。自2001年6月面世以来，是全球成熟度最高、覆盖率最大的论坛软件系统之一。 2010年8月23日，与腾讯达成收购协议</li>
<li>ECShop是一款B2C独立网店系统，适合企业及个人快速构建个性化网上商店。系统是基于PHP语言及MYSQL数据库构架开发的跨平台开源程序。 2006年6月， ECShop推出第一个版本1.0  </li>
</ol>
<h4 id="五、centos6-9基于FPM模式编译安装实现LAMP应用"><a href="#五、centos6-9基于FPM模式编译安装实现LAMP应用" class="headerlink" title="五、centos6.9基于FPM模式编译安装实现LAMP应用"></a>五、centos6.9基于FPM模式编译安装实现LAMP应用</h4><ol>
<li><p>软件包</p>
<blockquote>
<p>mairadb：通用二进制格式，mariadb-10.2.12.tar.bz2</p>
<p>httpd：编译安装，httpd-2.4.29.tar.bz2</p>
<p>php7：编译安装，php-7.2.1.tar.bz2</p>
<p>Xcache：编译安装xcache-3.2.0</p>
<p>APR： 下载APR 1.6.3源码 </p>
<p>APR-util：下载APR-util 1.6.1源码</p>
<p>phpMyAdmin：下载 phpMyAdmin-4.4.15.10-all-languages</p>
<p>wordpress: 下载 wordpress-4.9.1-zh_CN.tar.gz </p>
</blockquote>
</li>
<li><p>LAMP官方站点</p>
<blockquote>
<p>linux官网：<a href="https://www.kernel.org/" target="_blank" rel="noopener">https://www.kernel.org/</a></p>
<p>mariadb官网：<a href="https://mariadb.org/" target="_blank" rel="noopener">https://mariadb.org/</a></p>
<p>php官网：<a href="https://www.php.net/" target="_blank" rel="noopener">https://www.php.net/</a></p>
<p>httpd官网：<a href="http://httpd.apache.org/" target="_blank" rel="noopener">http://httpd.apache.org/</a></p>
</blockquote>
</li>
<li><p>安装步骤</p>
<p>a、安装前相关工作准备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装顺序：mariadb--&gt;httpd--&gt;php </span><br><span class="line"></span><br><span class="line">#创建存放源码包的目录，便于管理</span><br><span class="line">[root@centos6 ~]#mkdir &#x2F;usr&#x2F;local&#x2F;src&#x2F;lamp</span><br><span class="line"></span><br><span class="line">#上传相关源码包</span><br><span class="line">[root@centos6 ~]#cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;lamp</span><br><span class="line">[root@centos6 lamp]#rz -e</span><br><span class="line">[root@centos6 lamp]# ls -l</span><br><span class="line">total 480548</span><br><span class="line">-rw-r--r--  1 root root    854100 Jun 29 22:18 apr-1.6.3.tar.bz2</span><br><span class="line">-rw-r--r--  1 root root    428595 Jun 29 22:18 apr-util-1.6.1.tar.bz2</span><br><span class="line">-rw-r--r--  1 root root   6567926 Jun 29 22:18 httpd-2.4.29.tar.bz2</span><br><span class="line">-rw-r--r--  1 root root 458949807 Jun 29 22:27 mariadb-10.2.12-linux-x86_64.tar.gz</span><br><span class="line">-rw-r--r--  1 root root  14980278 Jun 29 22:18 php-7.2.1.tar.bz2</span><br><span class="line">-rw-r--r--  1 root root  10130710 Jun 29 22:18 wordpress-4.9.1-zh_CN.tar.gz</span><br><span class="line">-rw-r--r--  1 root root    148392 Jun 29 22:18 xcache-3.2.0.tar.bz2</span><br><span class="line"></span><br><span class="line">#安装编译相关开发工具包</span><br><span class="line">[root@centos6 ~]#yum groupinstall &quot;development tools&quot; -y </span><br><span class="line">[root@centos6 ~]#yum install pcre-devel openssl-devel expat-devel -y</span><br></pre></td></tr></table></figure>

<p>b、编译安装mariadb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解压缩</span><br><span class="line">[root@centos6 lamp]# tar zxvf mariadb-10.2.12-linux-x86_64.tar.gz </span><br><span class="line">[root@centos6 lamp]# mv mariadb-10.2.12 &#x2F;usr&#x2F;local</span><br><span class="line"></span><br><span class="line">#创建软连接，方便版本升级</span><br><span class="line">[root@centos6 lamp]# ln -sv &#x2F;usr&#x2F;local&#x2F;mariadb-10.2.12 &#x2F;usr&#x2F;local&#x2F;mysql </span><br><span class="line"></span><br><span class="line">#创建mysql用户</span><br><span class="line">[root@centos6 local]# useradd -r -s &#x2F;sbin&#x2F;nologin mysql </span><br><span class="line"></span><br><span class="line">#创建数据库目录并更改权限</span><br><span class="line">[root@centos6 local]# mkdir &#x2F;data&#x2F;mysqldb -pv</span><br><span class="line">[root@centos6 local]# chown -R mysql.mysql &#x2F;data&#x2F;mysqldb&#x2F;</span><br><span class="line"></span><br><span class="line">#初始化数据库</span><br><span class="line">[root@centos6 bin]# cd &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;</span><br><span class="line">[root@centos6 mysql]# .&#x2F;scripts&#x2F;mysql_install_db --datadir&#x3D;&#x2F;data&#x2F;mysqldb --user&#x3D;mysql</span><br><span class="line"></span><br><span class="line">#修改my.cnf配置文件</span><br><span class="line">[root@centos6 mysql]# cp support-files&#x2F;my-innodb-heavy-4G.cnf  &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[root@centos6 mysql]# vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">port     &#x3D; 3306</span><br><span class="line">datadir  &#x3D; &#x2F;data&#x2F;maysqldb</span><br><span class="line"></span><br><span class="line">#创建开机自启动脚本</span><br><span class="line">[root@centos6 mysql]# cp support-files&#x2F;mysql.server &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;mysqld</span><br><span class="line">[root@centos6 mysql]# chkconfig --add mysqld</span><br><span class="line"></span><br><span class="line">#启动服务并查看监听端口</span><br><span class="line">[root@centos6 mysql]# service mysqld start</span><br><span class="line">[root@centos6 mysql]# ss -ntl|grep 3306</span><br><span class="line">LISTEN     0      50                       :::3306                    :::* </span><br><span class="line"></span><br><span class="line">#安全初始化mysql数据库</span><br><span class="line">[root@centos6 mysql]# .&#x2F;bin&#x2F;mysql_secure_installation</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>c、编译安装httpd</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解压缩</span><br><span class="line">[root@centos6 lamp]# tar xf apr-1.6.3.tar.bz2 </span><br><span class="line">[root@centos6 lamp]# tar xf apr-util-1.6.1.tar.bz2 </span><br><span class="line">[root@centos6 lamp]# tar xf httpd-2.4.29.tar.bz2 </span><br><span class="line"></span><br><span class="line">#编译安装</span><br><span class="line">[root@centos6 lamp]# mv apr-1.6.3 httpd-2.4.29&#x2F;srclib&#x2F;apr</span><br><span class="line">[root@centos6 lamp]# mv apr-util-1.6.1 httpd-2.4.29&#x2F;srclib&#x2F;apr-util</span><br><span class="line">[root@centos6 lamp]# cd httpd-2.4.29</span><br><span class="line">[root@centos6 httpd-2.4.29]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;httpd2.4 \</span><br><span class="line">&gt; --enable-so \</span><br><span class="line">&gt; --enable-ssl \</span><br><span class="line">&gt; --enable-cgi \</span><br><span class="line">&gt; --with-zlib \</span><br><span class="line">&gt; --with-pcre \</span><br><span class="line">&gt; --with-included-apr \</span><br><span class="line">&gt; --enable-modules&#x3D;most \</span><br><span class="line">&gt; --enable-mpms-shared&#x3D;all \</span><br><span class="line">&gt; --with-mpm&#x3D;prefork</span><br><span class="line">[root@centos6 http-2.4.29]# make -j 4 &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">#创建程序运行用户</span><br><span class="line">[root@centos6 httpd-2.4.29]# useradd -r -s &#x2F;sbin&#x2F;nologin apache</span><br><span class="line"></span><br><span class="line">#修改运行httpd进程的用户身份</span><br><span class="line">[root@centos6 httpd-2.4.29]# vim &#x2F;usr&#x2F;local&#x2F;httpd2.4&#x2F;conf&#x2F;http.conf  </span><br><span class="line">User apache  </span><br><span class="line">Group apache</span><br><span class="line"></span><br><span class="line">#启动服务并查看监听端口</span><br><span class="line">[root@centos6 local]# &#x2F;usr&#x2F;local&#x2F;httpd2.4&#x2F;bin&#x2F;apachectl start</span><br><span class="line">[root@centos6 local]# ss -ntl|grep 80</span><br><span class="line">LISTEN     0      128                      :::80                      :::*</span><br></pre></td></tr></table></figure>

<p>d、编译安装php</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解压缩</span><br><span class="line">[root@centos6 lamp]# tar xvf php-7.2.1.tar.bz2</span><br><span class="line"></span><br><span class="line">#安装相关开发工具包</span><br><span class="line">[root@centos6 lamp]# yum install libxml2-devel bzip2-devel libmcrypt-devel openssl-devel -y</span><br><span class="line"></span><br><span class="line">#编译安装</span><br><span class="line">[root@centos6 lamp]# cd php-7.2.1</span><br><span class="line">[root@centos6 php-7.2.1]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;php-7.2.1 \</span><br><span class="line">--enable-mysqlnd \</span><br><span class="line">--with-mysqli&#x3D;mysqlnd \</span><br><span class="line">--with-openssl \</span><br><span class="line">--with-pdo-mysql&#x3D;mysqlnd \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--with-freetype-dir \</span><br><span class="line">--with-jpeg-dir \</span><br><span class="line">--with-png-dir \</span><br><span class="line">--with-zlib \</span><br><span class="line">--with-libxml-dir&#x3D;&#x2F;usr \</span><br><span class="line">--enable-xml \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-config-file-path&#x3D;&#x2F;etc \</span><br><span class="line">--with-config-file-scan-dir&#x3D;&#x2F;etc&#x2F;php.d \</span><br><span class="line">--enable-maintainer-zts \</span><br><span class="line">--disable-fileinfo</span><br><span class="line">[root@centos6 php-7.2.1]# make -j 4 &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">#准备配置文件</span><br><span class="line">[root@centos6 php-7.2.1]# cp php.ini-production &#x2F;etc&#x2F;php.ini  </span><br><span class="line">[root@centos6 php-7.2.1]# cp &#x2F;usr&#x2F;local&#x2F;php-7.2.1&#x2F;etc&#x2F;php-fpm.conf.default &#x2F;usr&#x2F;local&#x2F;php-7.2.1&#x2F;etc&#x2F;php-fpm.conf</span><br><span class="line">[root@centos6 php-7.2.1]# cp &#x2F;usr&#x2F;local&#x2F;php-7.2.1&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf.default &#x2F;usr&#x2F;local&#x2F;php-7.2.1&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf</span><br><span class="line"></span><br><span class="line">#创建服务脚本</span><br><span class="line">[root@centos6 php-7.2.1]# cp sapi&#x2F;fpm&#x2F;init.d.php-fpm &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;php-fpm </span><br><span class="line">[root@centos6 php-7.2.1]# chmod +x &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;php-fpm </span><br><span class="line">[root@centos6 php-7.2.1]# chkconfig --add php-fpm</span><br><span class="line">[root@centos6 php-7.2.1]# chkconfig php-fpm on</span><br><span class="line"></span><br><span class="line">#启动服务并查看监听端口</span><br><span class="line">[root@centos6 php-7.2.1]# service php-fpm start</span><br><span class="line">[root@centos6 php-7.2.1]# ss -ntl|grep 9000</span><br><span class="line">LISTEN     0      128               127.0.0.1:9000                     *:*</span><br></pre></td></tr></table></figure>

<p>e、后续配置并测试lamp</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#编辑配置文件httpd.conf，以支持php</span><br><span class="line">[root@centos6 ~]# vim &#x2F;usr&#x2F;local&#x2F;httpd2.4&#x2F;conf&#x2F;httpd.conf </span><br><span class="line">#取消以下模块的注释</span><br><span class="line">LoadModule proxy_module modules&#x2F;mod_proxy.so    </span><br><span class="line">LoadModule proxy_fcgi_module modules&#x2F;mod_proxy_fcgi.so </span><br><span class="line"></span><br><span class="line">#修改index文件为php格式</span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">  DirectoryIndex index.php index.html  </span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br><span class="line"></span><br><span class="line">#新增内容</span><br><span class="line">AddType application&#x2F;x-httpd-php .php   </span><br><span class="line">AddType application&#x2F;x-httpd-php-source .phps</span><br><span class="line">ProxyRequests Off</span><br><span class="line">ProxyPassMatch ^&#x2F;(.*\.php)$ fcgi:&#x2F;&#x2F;localhost:9000&#x2F;usr&#x2F;local&#x2F;httpd2.4&#x2F;htdocs&#x2F;$1</span><br><span class="line"></span><br><span class="line">#测试</span><br><span class="line">[root@centos6 ~]# cd &#x2F;usr&#x2F;local&#x2F;httpd2.4&#x2F;htdocs</span><br><span class="line">[root@centos6 htdocs]#vim info.php</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">浏览器访问测试 http:&#x2F;&#x2F;server_IP&#x2F;info.php</span><br></pre></td></tr></table></figure>

<p>f、lamp实现wordpress应用</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建wordpress数据库和账号</span><br><span class="line">[root@centos6 lamp]# mysql -uroot -p</span><br><span class="line">mysql&gt; create database blog;</span><br><span class="line">mysql&gt; grant all on blog.* to admin@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br><span class="line"></span><br><span class="line">#安装wordpress并配置</span><br><span class="line">[root@centos6 lamp]# tar xvf wordpress-4.9.1-zh_CN.tar.gz</span><br><span class="line">[root@centos6 lamp]# mkdir &#x2F;usr&#x2F;local&#x2F;httpd2.4&#x2F;htdocs&#x2F;blog</span><br><span class="line">[root@centos6 lamp]# mv wordpress&#x2F;* &#x2F;usr&#x2F;local&#x2F;httpd2.4&#x2F;htdocs&#x2F;blog</span><br><span class="line">[root@centos6 lamp]#cd &#x2F;usr&#x2F;local&#x2F;httpd2.4&#x2F;htdocs&#x2F;blog</span><br><span class="line">[root@centos6 blog]# ls</span><br><span class="line">index.php        wp-admin              wp-content         wp-load.php      wp-signup.php</span><br><span class="line">license.txt      wp-blog-header.php    wp-cron.php        wp-login.php     wp-trackback.php</span><br><span class="line">readme.html      wp-comments-post.php  wp-includes        wp-mail.php      xmlrpc.php</span><br><span class="line">wp-activate.php  wp-config-sample.php  wp-links-opml.php  wp-settings.php</span><br><span class="line"></span><br><span class="line">浏览器访问测试 http:&#x2F;&#x2F;server_IP&#x2F;blog</span><br><span class="line"></span><br><span class="line">#压力测试</span><br><span class="line">[root@centos6 blog]#ab -c 20 -n 100 http:&#x2F;&#x2F;server_ip&#x2F;blog</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>web架构</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2020/06/22/nginx/</url>
    <content><![CDATA[<h5 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h5><blockquote>
<p>Nginx：engine X ，2002年，开源，商业版</p>
<p>NGINX是免费，开源，高性能的HTTP和反向代理服务器，邮件代理服务器，通用TCP/UDP代理服务器</p>
<p>解决C10K问题（10K Connections）</p>
<p>官网：<a href="http://nginx.org（开源版）" target="_blank" rel="noopener">http://nginx.org（开源版）</a>&nbsp; &nbsp;  <a href="https://www.nginx.com" target="_blank" rel="noopener">https://www.nginx.com</a> (商业版)</p>
<p>二次发行版：</p>
<p>1、Tengine：由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。 Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。从2011年12月开始， Tengine成为<br>一个开源项目，官网 <a href="http://tengine.taobao.org/" target="_blank" rel="noopener">http://tengine.taobao.org/</a></p>
<p>2、OpenResty：基于 Nginx 与 Lua 语言的高性能 Web平台，官网<a href="http://openresty.org/cn/" target="_blank" rel="noopener">http://openresty.org/cn/</a> </p>
</blockquote>
<p><strong>特性：</strong></p>
<blockquote>
<p>模块化设计，较好的扩展性</p>
<p>高可靠性</p>
<p>支持热部署：不停机更新配置文件，升级版本，更换日志文件</p>
<p>低内存消耗：10000个keep-alive连接模式下的非活动连接，仅需要2.5M内存</p>
<p>event-driven,aio,mmap，sendfile</p>
</blockquote>
<p><strong>基本功能：</strong></p>
<blockquote>
<p>静态资源的web服务器</p>
<p>http协议反向代理服务器</p>
<p>pop3/imap4协议反向代理服务器</p>
<p>FastCGI(LNMP),uWSGI(python)等协议</p>
<p>模块化（非DSO），如zip，SSL模块     DSO：动态加载</p>
</blockquote>
<p><strong>web服务相关的功能：</strong></p>
<blockquote>
<p>虚拟主机（ server）</p>
<p>支持 keep-alive 和管道连接</p>
<p>访问日志（支持基于日志缓冲提高其性能）</p>
<p>url rewirte</p>
<p>路径别名</p>
<p>基于IP及用户的访问控制</p>
<p>支持速率限制及并发数限制</p>
<p>重新配置和在线升级而无须中断客户的工作进程<br>Memcached 的 GET 接口  </p>
</blockquote>
<h5 id="nginx架构"><a href="#nginx架构" class="headerlink" title="nginx架构"></a>nginx架构</h5><img src="/images/nginx/33Nginx.jpg" style="zoom: 33%;" />



<p><strong>master/worker结构</strong></p>
<blockquote>
<p>一个master进程：负载加载和分析配置文件、管理worker进程、平滑升级</p>
<p>一个或多个worker进程：处理并响应用户请求</p>
</blockquote>
<p><strong>缓存相关的进程：</strong></p>
<blockquote>
<p>cache loader：载入缓存对象​</p>
<p>cache manager：管理缓存对象</p>
</blockquote>
<h5 id="nginx模块"><a href="#nginx模块" class="headerlink" title="nginx模块"></a><strong>nginx模块</strong></h5><blockquote>
<p>nginx高度模块化，但其模块早期不支持DSO机制；1.9.11版本支持动态装载和卸载</p>
<p>核心模块：core module</p>
<p>标准模块：</p>
<ul>
<li>HTTP 模块： ngx_http_*_</li>
<li>Mail模块 ：ngx_mail_*_ </li>
<li>Stream 模块 ngx_stream_*</li>
</ul>
<p>第三方模块</p>
</blockquote>
<h5 id="nginx功用"><a href="#nginx功用" class="headerlink" title="nginx功用"></a><strong>nginx功用</strong></h5><ul>
<li>静态的web资源服务器：html，图片，js，css，txt等静态资源</li>
<li>结合FastCGI/uWSGI/SCGI等协议反向代理动态资源请求</li>
<li>http/https协议的反向代理</li>
<li>imap4/pop3协议的反向代理</li>
<li>tcp/udp协议的请求转发（反向代理）</li>
</ul>
<img src="/images/nginx/Nginx2.jpg" style="zoom: 33%;" />



<h5 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h5><ul>
<li>官方：<a href="http://nginx.org/packages/centos/7/x86_64/RPMS" target="_blank" rel="noopener">http://nginx.org/packages/centos/7/x86_64/RPMS</a></li>
<li>Fedora-EPEL源：<a href="https://mirrors.aliyun.com/epel/7/x86_64/" target="_blank" rel="noopener">https://mirrors.aliyun.com/epel/7/x86_64/</a></li>
<li>编译安装：(Centos 7系统)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install pcre-devel openssl-devel zlib-devel</span><br><span class="line"></span><br><span class="line">cd /usr/local/src</span><br><span class="line"></span><br><span class="line">wget  https://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf nginx-1.18.0.tar.gz</span><br><span class="line"></span><br><span class="line">cd nginx-1.18.0</span><br><span class="line"></span><br><span class="line">useradd -r nginx</span><br><span class="line"></span><br><span class="line">./configure \</span><br><span class="line">	--prefix=/usr/local/nginx \</span><br><span class="line">    --conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">    --error-log-path=/var/log/nginx/error.log \</span><br><span class="line">    --http-log-path=/var/log/nginx/access.log \</span><br><span class="line">    --pid-path=/var/run/nginx.pid \</span><br><span class="line">    --lock-path=/var/run/nginx.lock \</span><br><span class="line">    --user=nginx \</span><br><span class="line">    --group=nginx \</span><br><span class="line">    --with-http_ssl_module \</span><br><span class="line">    --with-http_v2_module \</span><br><span class="line">    --with-http_dav_module \</span><br><span class="line">    --with-http_stub_status_module \</span><br><span class="line">    --with-threads \</span><br><span class="line">    --with-file-aio \</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">编译安装nginx选项：</span><br><span class="line">--prefix=/etc/nginx 安装路径</span><br><span class="line"></span><br><span class="line">--sbin-path=/usr/sbin/nginx 指明nginx程序文件安装路径</span><br><span class="line"></span><br><span class="line">--conf-path=/etc/nginx/nginx.conf 主配置文件安装位置</span><br><span class="line"></span><br><span class="line">--error-log-path=/var/log/nginx/error.log 错误日志文件安装位置</span><br><span class="line"></span><br><span class="line">--http-log-path=/var/log/nginx/access.log 访问日志文件安装位置</span><br><span class="line"></span><br><span class="line">--pid-path=/var/run/nginx.pid 指明pid文件安装位置</span><br><span class="line"></span><br><span class="line">--lock-path=/var/run/nginx.lock 锁文件安装位置</span><br><span class="line"></span><br><span class="line">--http-client-body-temppath=/var/cache/nginx/client_temp 客户端body部分的临时文件存放路径，如果服务器允许客户端使用put方法提交大数据时，临时存放的磁盘路径</span><br><span class="line"></span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp 作为代理服务器，服务器响应报文的临时文件存放路径</span><br><span class="line"></span><br><span class="line">--http-fastcgi-temppath=/var/cache/nginx/fastcgi_temp 作为fastcgi代理服务器，服务器响应报文的临时文件存放路径</span><br><span class="line"></span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp 作为uwsgi代理服务器，服务器响应报文的临时文件存放路径</span><br><span class="line"></span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp 作为scgi反代服务器，服务器响应报文的临时文件存放路径</span><br><span class="line"></span><br><span class="line">--user=nginx 指明以那个身份运行worker进程，主控master进程一般由root运行</span><br><span class="line"></span><br><span class="line">--group=nginx</span><br><span class="line"></span><br><span class="line">--with-http_ssl_module 表示把指定模块编译进来</span><br></pre></td></tr></table></figure>

<p><strong>目录结构和命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#html是测试页， sbin是主程序</span><br><span class="line">ls &#x2F;usr&#x2F;local&#x2F;nginx&#x2F; </span><br><span class="line"></span><br><span class="line">Nginx：默认为启动nginx</span><br><span class="line">-h 查看帮助选项</span><br><span class="line">-V 查看版本和配置选项</span><br><span class="line">-t 测试nginx语法错误</span><br><span class="line">-c filename 指定配置文件(default: &#x2F;etc&#x2F;nginx&#x2F;nginx.conf)</span><br><span class="line">-s signal 发送信号给master进程， signal可为： stop, quit,</span><br><span class="line">reopen, reload 示例： -s stop 停止nginx -s reload 加载配置文件</span><br><span class="line">-g directives 在命令行中指明全局指令</span><br></pre></td></tr></table></figure>



<h5 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a><strong>nginx配置</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主配置文件： nginx.conf</span><br><span class="line">子配置文件： include conf.d&#x2F;*.conf</span><br><span class="line">fastcgi， uwsgi， scgi等协议相关的配置文件</span><br><span class="line">mime.types：支持的mime类型</span><br><span class="line"></span><br><span class="line">主配置文件的配置指令：</span><br><span class="line">directive value [value2 ...];</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">(1) 指令必须以分号结尾</span><br><span class="line">(2) 支持使用配置变量</span><br><span class="line">    内建变量：由Nginx模块引入，可直接引用</span><br><span class="line">    自定义变量：由用户使用set命令定义	set variable_name value;</span><br><span class="line">    引用变量：$variable_name</span><br></pre></td></tr></table></figure>



<h6 id="主配置文件结构"><a href="#主配置文件结构" class="headerlink" title="主配置文件结构"></a><strong>主配置文件结构</strong></h6><pre><code>main block：主配置段，即全局配置段，对http,mail都有效

event {
    ...
} 事件驱动相关的配置

http {
    ...
} http/https 协议相关配置段

mail {
    ...
} mail 协议相关配置段

stream {
    ...
} stream 服务器相关配置段</code></pre><h6 id="Main-全局配置段"><a href="#Main-全局配置段" class="headerlink" title="Main 全局配置段"></a><strong>Main 全局配置段</strong></h6><p><strong>常见的配置指令分类</strong></p>
<blockquote>
<p>a.正常运行必备的配置<br>b.优化性能相关的配置<br>c.用于调试及定位问题相关的配置<br>d.事件驱动相关的配置</p>
</blockquote>
<p>帮助文档： <a href="http://nginx.org/en/docs/ngx_core_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/ngx_core_module.html</a></p>
<p>一、正常运行必备的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、 user </span><br><span class="line">指定worker进程的运行身份，如组不指定，默认和用户名同名</span><br><span class="line">Syntax:  user user [group];</span><br><span class="line">Default: user nobody nobody;</span><br><span class="line">Context: main </span><br><span class="line"></span><br><span class="line">2、 pid &#x2F;PATH&#x2F;TO&#x2F;PID_FILE</span><br><span class="line">指定存储nginx主进程PID的文件路径</span><br><span class="line"></span><br><span class="line">3、 include file | mask</span><br><span class="line">指明包含进来的其它配置文件片断</span><br><span class="line"></span><br><span class="line">4、 load_module file</span><br><span class="line">模块加载配置文件： &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf</span><br><span class="line">指明要装载的动态模块路径: &#x2F;usr&#x2F;lib64&#x2F;nginx&#x2F;modules</span><br></pre></td></tr></table></figure>

<p>二、性能优化相关的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、 worker_processes number | auto</span><br><span class="line">worker进程的数量；通常应该为当前主机的cpu的物理核心数</span><br><span class="line"></span><br><span class="line">2、 worker_cpu_affinity auto [cpumask] </span><br><span class="line">提高缓存命中率</span><br><span class="line">    CPU MASK： </span><br><span class="line">        00000001： 0号CPU</span><br><span class="line">        00000010： 1号CPU</span><br><span class="line">        10000000： 8号CPU</span><br><span class="line">    worker_cpu_affinity 0001 0010 0100 1000;</span><br><span class="line">    worker_cpu_affinity 0101 1010;</span><br><span class="line"></span><br><span class="line">3、 worker_priority number</span><br><span class="line">指定worker进程的nice值，设定worker进程优先级： [-20,20]</span><br><span class="line"></span><br><span class="line">4、 worker_rlimit_nofile number</span><br><span class="line">worker进程所能够打开的文件数量上限,如65535</span><br></pre></td></tr></table></figure>


<p>三、调试和定位问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、 daemon on|off</span><br><span class="line">是否以守护进程方式运行nignx，默认是守护进程方式</span><br><span class="line"></span><br><span class="line">2、 master_process on|off</span><br><span class="line">是否以master&#x2F;worker模型运行nginx；默认为on，off将不启动worker</span><br><span class="line"></span><br><span class="line">3、 error_log file [level]</span><br><span class="line">错误日志文件及其级别；出于调试需要， 可设定为debug；但debug仅在编译时使用了“--with-debug”选项时才有效</span><br><span class="line"></span><br><span class="line">方式： </span><br><span class="line">file &#x2F;path&#x2F;logfile</span><br><span class="line">stderr:发送到标准错误</span><br><span class="line">syslog:server-address[,parameter&#x3D;values]:发送到syslog</span><br><span class="line">memory:size 内存</span><br><span class="line"></span><br><span class="line">level:debug|info|notice|warn|error|crit|alter|emerg</span><br></pre></td></tr></table></figure>



<h6 id="events事件驱动相关配置"><a href="#events事件驱动相关配置" class="headerlink" title="events事件驱动相关配置"></a><strong>events事件驱动相关配置</strong></h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、 worker_connections number</span><br><span class="line">每个worker进程所能够打开的最大并发连接数数量，如10240</span><br><span class="line">总最大并发数： worker_processes * worker_connections</span><br><span class="line"></span><br><span class="line">2、 use method</span><br><span class="line">指明并发连接请求的处理方法,默认自动选择最优方法 use epoll;</span><br><span class="line"></span><br><span class="line">3、 accept_mutex on | off </span><br><span class="line">互斥处理新的连接请求的方法；on指由各个worker轮流处理新请求，Off指每个新请求的到达都会通知(唤醒)所有的worker进程，但只有一个进程可获得连接，造成“惊群”，影响性能</span><br></pre></td></tr></table></figure>



<h5 id="http协议相关配置"><a href="#http协议相关配置" class="headerlink" title="http协议相关配置"></a><strong>http协议相关配置</strong></h5><p>模块：ngx_http_core_module  </p>
<pre><code>http {
        ...
            ... 公共配置
    server {  每个server用于定义一个虚拟主机
        ...
        server_name 虚拟主机名
        root 主目录
        alias 路径别名
        location [OPERATOR] URL { 指定URL的特性
            ...
            if CONDITION {
            ...
            }
        }
    }
}</code></pre><h6 id="与套接字相关"><a href="#与套接字相关" class="headerlink" title="与套接字相关"></a>与套接字相关</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、默认监听端口 </span><br><span class="line">listen PORT|address[:port]|unix:&#x2F;PATH&#x2F;TO&#x2F;SOCKET_FILE</span><br><span class="line">listen address[:port] [default_server] [ssl] [http2|spdy] [backlog&#x3D;number] [rcvbuf&#x3D;size] [sndbuf&#x3D;size]</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    default_server 设定为默认虚拟主机</span><br><span class="line">    ssl 限制仅能够通过ssl连接提供服务</span><br><span class="line">    backlog&#x3D;number 超过并发连接数后，新请求进入后援队列的长度</span><br><span class="line">    rcvbuf&#x3D;size 接收缓冲区大小</span><br><span class="line">    sndbuf&#x3D;size 发送缓冲区大小</span><br><span class="line">注意：</span><br><span class="line">    (1) 基于port；</span><br><span class="line">    listen PORT; 指令监听在不同的端口</span><br><span class="line">    </span><br><span class="line">    (2) 基于ip的虚拟主机</span><br><span class="line">    listen IP:PORT; IP地址不同</span><br><span class="line">    </span><br><span class="line">    (3) 基于hostname</span><br><span class="line">    server_name fqdn; 指令指向不同的主机名</span><br><span class="line">    </span><br><span class="line">2、server_name name ...;</span><br><span class="line">虚拟主机的主机名称后可跟多个由空白字符分隔的字符串</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    支持*通配任意长度的任意字符</span><br><span class="line">    server_name *.example.com www.example.*</span><br><span class="line">    </span><br><span class="line">    支持~起始的字符做正则表达式模式匹配，性能原因慎用，\d 表示 [0-9]</span><br><span class="line">    server_name ~^www\d+\.example\.com$</span><br><span class="line">     </span><br><span class="line">匹配优先级机制从高到低：</span><br><span class="line">    (1) 首先是字符串精确匹配 如： www.example.com</span><br><span class="line">    (2) 左侧*通配符 如： *.example.com</span><br><span class="line">    (3) 右侧*通配符 如： www.example.*</span><br><span class="line">    (4) 正则表达式  如： ~^.*\.example\.com$</span><br><span class="line">    (5) default_server</span><br><span class="line">    </span><br><span class="line">3、tcp_nodelay on | off;</span><br><span class="line">在keepalived模式下的连接是否启用TCP_NODELAY选项，当为off时，延迟发送，合并多个请求后再发送</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    默认On，不延迟发送</span><br><span class="line">    可用于： http, server, location</span><br><span class="line"></span><br><span class="line">4、sendfile on | off;</span><br><span class="line">是否启用sendfile功能，在内核中封装报文直接发送</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">	默认Off</span><br><span class="line"></span><br><span class="line">5、server_tokens on | off | build | string</span><br><span class="line">是否在响应报文的Server首部显示nginx版本</span><br><span class="line"></span><br><span class="line">6、配置一个虚拟主机</span><br><span class="line">server &#123;</span><br><span class="line">    listen address[:PORT]|PORT;</span><br><span class="line">    server_name SERVER_NAME;</span><br><span class="line">    root &#x2F;PATH&#x2F;TO&#x2F;DOCUMENT_ROOT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="定义路径相关"><a href="#定义路径相关" class="headerlink" title="定义路径相关"></a>定义路径相关</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、root</span><br><span class="line">设置web资源的路径映射；用于指明请求的URL所对应的文档的目录路径，可用于http, server, location, if in location</span><br><span class="line"></span><br><span class="line">root  --&gt;  (http:&#x2F;&#x2F;example.com&#x2F;）</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	...</span><br><span class="line">	root &#x2F;data&#x2F;www&#x2F;vhost; </span><br><span class="line">	</span><br><span class="line">	#当用户发起请求访问 (http:&#x2F;&#x2F;example.com)&#x2F;images&#x2F;logo.jpg</span><br><span class="line">	#服务器端nginx将会查找本机对应的路径 (&#x2F;data&#x2F;www&#x2F;vhosts&#x2F;)images&#x2F;logo.jpg</span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line">2、location </span><br><span class="line">location [ &#x3D; | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br><span class="line">在一个server中location配置段可存在多个，用于实现从uri到文件系统的路径映射；ngnix会根据用户请求的URI来检查定义的所有location，并找出一个最佳匹配，而后应用其配置</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">server &#123;...</span><br><span class="line">	server_name example.com;</span><br><span class="line">	root &#x2F;var&#x2F;share&#x2F;nginx&#x2F;html; </span><br><span class="line">	location &#x2F;images&#x2F; &#123;</span><br><span class="line">		root &#x2F;data&#x2F;imgs&#x2F;; #访问&#x2F;images时，此配置匹配</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(http:&#x2F;&#x2F;example.com&#x2F;)images&#x2F;logo.jpg --&gt; (&#x2F;data&#x2F;imgs&#x2F;)images&#x2F;logo.jpg</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    &#x3D;：对URI做精确匹配；</span><br><span class="line">    location &#x3D; &#x2F; &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    http:&#x2F;&#x2F;www.example.com&#x2F; 匹配</span><br><span class="line">    http:&#x2F;&#x2F;www.magedu.com&#x2F;index.html 不匹配</span><br><span class="line">    </span><br><span class="line">    ^~：对URI的最左边部分做匹配检查，不区分字符大小写</span><br><span class="line">    </span><br><span class="line">    ~：对URI做正则表达式模式匹配，区分字符大小写</span><br><span class="line">    </span><br><span class="line">    ~*：对URI做正则表达式模式匹配，不区分字符大小写</span><br><span class="line">    </span><br><span class="line">    不带符号：匹配起始于此uri的所有的uri</span><br><span class="line">    </span><br><span class="line">匹配优先级从高到低：</span><br><span class="line">	&#x3D;, ^~, ～ &#x2F;～ *, 不带符号</span><br><span class="line">	</span><br><span class="line">3、alias path;</span><br><span class="line">路径别名，文档映射的另一种机制；仅能用于location上下文</span><br><span class="line"></span><br><span class="line">alias与root比较</span><br><span class="line">    location &#x2F;bbs&#x2F; &#123;</span><br><span class="line">        alias &#x2F;web&#x2F;forum&#x2F;;</span><br><span class="line">        # (http:&#x2F;&#x2F;example.com&#x2F;bbs)&#x2F;index.php --&gt; (&#x2F;web&#x2F;forum)&#x2F;index.php</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    location &#x2F;bbs&#x2F; &#123;</span><br><span class="line">        root &#x2F;web&#x2F;forum&#x2F;;</span><br><span class="line">         # (http:&#x2F;&#x2F;example.com)&#x2F;bbs&#x2F;index.php --&gt; (&#x2F;web&#x2F;forum)&#x2F;bbs&#x2F;index.php</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">注意： location中使用root指令和alias指令的意义不同</span><br><span class="line">(a) root，给定的路径对应于location中的&#x2F;uri&#x2F;左侧的&#x2F;</span><br><span class="line">(b) alias，给定的路径对应于location中的&#x2F;uri&#x2F;右侧的&#x2F;</span><br><span class="line"></span><br><span class="line">4、index file ...;</span><br><span class="line">指定默认网页文件，模块：ngx_http_index_module</span><br><span class="line"></span><br><span class="line">5、error_page code ... [&#x3D;[response]] uri;</span><br><span class="line">定义错误页， 以指定的响应状态码进行响应，模块：ngx_http_core_module</span><br><span class="line">可用位置： http, server, location, if in location</span><br><span class="line">示例：</span><br><span class="line">    error_page 404 &#x2F;404.html</span><br><span class="line">    error_page 404 &#x3D;200 &#x2F;404.html</span><br><span class="line">    </span><br><span class="line">6、try_files file</span><br><span class="line">try_files file ... uri;</span><br><span class="line">try_files file ... &#x3D;code;</span><br><span class="line">按顺序检查文件是否存在，返回第一个找到的文件或文件夹（结尾加斜线表示为文件夹），如果所有的文件或文件夹都找不到，会进行一个内部重定向到最后一个参数。只有最后一个参数可以引起一个内部重定向，之前的参数只设置内部URI的指向。最后一个参数是回退URI且必须存在，否则会出现内部500错误</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">location &#x2F;images&#x2F; &#123;</span><br><span class="line">try_files $uri &#x2F;images&#x2F;default.gif;</span><br><span class="line">&#125;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">try_files $uri $uri&#x2F;index.html $uri.html &#x3D;404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="定义客户端请求"><a href="#定义客户端请求" class="headerlink" title="定义客户端请求"></a>定义客户端请求</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、keepalive_timeout timeout [header_timeout];</span><br><span class="line">设定保持连接超时时长， 0表示禁止长连接， 默认为75s</span><br><span class="line"></span><br><span class="line">2、keepalive_requests number;</span><br><span class="line">在一次长连接上所允许请求的资源的最大数量</span><br><span class="line">默认为100</span><br><span class="line"></span><br><span class="line">3、keepalive_disable none | browser ...</span><br><span class="line">对哪种浏览器禁用长连接</span><br><span class="line"></span><br><span class="line">4、send_timeout time;</span><br><span class="line">向客户端发送响应报文的超时时长，此处是指两次写操作之间的间隔时长，而非整个响应过程的传输时长  </span><br><span class="line"></span><br><span class="line">5、client_body_buffer_size size;</span><br><span class="line">用于接收每个客户端请求报文的body部分的缓冲区大小；默认为16k；超出此大小时，其将被暂存到磁盘上的由下面client_body_temp_path指令所定义的位置</span><br><span class="line"></span><br><span class="line">6、client_body_temp_path path [level1 [level2[level3]]];</span><br><span class="line">设定用于存储客户端请求报文的body部分的临时存储路径及子目录结构和数量</span><br><span class="line"></span><br><span class="line">目录名为16进制的数字；</span><br><span class="line">1 #1级目录占1位16进制，即2^4&#x3D;16个目录 0-f</span><br><span class="line">2 #2级目录占2位16进制，即2^8&#x3D;256个目录 00-ff</span><br><span class="line">2 #3级目录占2位16进制， 即2^8&#x3D;256个目录 00-ff</span><br></pre></td></tr></table></figure>

<h6 id="对客户端进行限制"><a href="#对客户端进行限制" class="headerlink" title="对客户端进行限制"></a>对客户端进行限制</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、limit_rate rate;</span><br><span class="line">限制响应给客户端的传输速率，单位是bytes&#x2F;second</span><br><span class="line">默认值0表示无限制</span><br><span class="line"></span><br><span class="line">2、limit_except method ... &#123; ... &#125;</span><br><span class="line">限制客户端使用除了指定的请求方法之外的其它方法，仅用于location</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">	method:GET, HEAD, POST, PUT, DELETE，MKCOL, COPY, MOVE, OPTIONS, PROPFIND，PROPPATCH, 	LOCK, UNLOCK, PATCH</span><br><span class="line"></span><br><span class="line">示例：除了GET和HEAD之外其它方法仅允许192.168.1.0&#x2F;24网段主机使用</span><br><span class="line">    limit_except GET &#123;</span><br><span class="line">    	allow 192.168.1.0&#x2F;24;</span><br><span class="line">    	deny all;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="文件操作优化"><a href="#文件操作优化" class="headerlink" title="文件操作优化"></a>文件操作优化</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、aio on | off | threads[&#x3D;pool];</span><br><span class="line">是否启用aio功能</span><br><span class="line"></span><br><span class="line">2、directio size | off;</span><br><span class="line">当文件大于等于给定大小时，例如directio 4m，同步（直接）写磁盘，而非写缓存</span><br><span class="line"></span><br><span class="line">3、open_file_cache off;</span><br><span class="line">open_file_cache max&#x3D;N [inactive&#x3D;time];</span><br><span class="line"></span><br><span class="line">说明：nginx可以缓存以下三种信息</span><br><span class="line">(1) 文件元数据：文件的描述符、文件大小和最近一次的修改时间</span><br><span class="line">(2) 打开的目录结构</span><br><span class="line">(3) 没有找到的或者没有权限访问的文件的相关信息</span><br><span class="line">(4) max&#x3D;N：可缓存的缓存项上限；达到上限后会使用LRU算法实现管理</span><br><span class="line">(5) inactive&#x3D;time 缓存项的非活动时长，在此处指定的时长内未被命中的或</span><br><span class="line">命中的次数少于open_file_cache_min_uses指令所指定的次数的缓存项，即为非活动项，将被删除</span><br><span class="line"></span><br><span class="line">3、open_file_cache_errors on | off;</span><br><span class="line">是否缓存查找时发生错误的文件一类的信息</span><br><span class="line">默认值为off</span><br><span class="line"></span><br><span class="line">4、open_file_cache_min_uses number;</span><br><span class="line">open_file_cache指令的inactive参数指定的时长内，至少被命中此处指定的次数方可被归类为活动项</span><br><span class="line">默认值为1</span><br><span class="line"></span><br><span class="line">5、open_file_cache_valid time;</span><br><span class="line">缓存项有效性的检查频率</span><br><span class="line">默认值为60s</span><br></pre></td></tr></table></figure>



<h6 id="访问控制功能相关配置"><a href="#访问控制功能相关配置" class="headerlink" title="访问控制功能相关配置"></a>访问控制功能相关配置</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_access_module 模块</span><br><span class="line"></span><br><span class="line">实现基于ip的访问控制功能</span><br><span class="line">1、 allow address | CIDR | unix: | all;</span><br><span class="line">2、 deny address | CIDR | unix: | all;</span><br><span class="line"></span><br><span class="line">context：http, server, location, limit_except</span><br><span class="line">自上而下检查，一旦匹配，将生效，条件严格的置前</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    deny 192.168.1.1;</span><br><span class="line">    allow 192.168.1.0&#x2F;24;</span><br><span class="line">    allow 10.1.1.0&#x2F;16;</span><br><span class="line">    allow 2001:0db8::&#x2F;32;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">ngx_http_auth_basic_module模块</span><br><span class="line">实现基于用户的访问控制，使用basic机制进行用户认证</span><br><span class="line">1、 auth_basic string | off;</span><br><span class="line">2、 auth_basic_user_file file;</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">location &#x2F;admin&#x2F; &#123;</span><br><span class="line">    auth_basic &quot;Admin Area&quot;;</span><br><span class="line">    auth_basic_user_file &#x2F;etc&#x2F;nginx&#x2F;.ngxpasswd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">说明：用户口令文件</span><br><span class="line">1、明文文本：格式name:password:comment</span><br><span class="line">2、加密文本：由htpasswd命令实现，httpd-tools所提供</span><br></pre></td></tr></table></figure>

<h6 id="输出日志相关"><a href="#输出日志相关" class="headerlink" title="输出日志相关"></a>输出日志相关</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_stub_status_module模块</span><br><span class="line"></span><br><span class="line">用于输出nginx的基本状态信息</span><br><span class="line"></span><br><span class="line">输出信息示例：</span><br><span class="line">Active connections: 291</span><br><span class="line">server accepts handled requests</span><br><span class="line">16630948 16630948 31070465</span><br><span class="line">Reading: 6 Writing: 179 Waiting: 106</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    Active connections:当前状态，活动状态的连接数</span><br><span class="line">    accepts：统计总值，已经接受的客户端请求的总数</span><br><span class="line">    handled：统计总值，已经处理完成的客户端请求的总数</span><br><span class="line">    requests：统计总值，客户端发来的总的请求数</span><br><span class="line">    Reading：当前状态，正在读取客户端请求报文首部的连接的连接数</span><br><span class="line">    Writing：当前状态，正在向客户端发送响应报文过程中的连接数</span><br><span class="line">    Waiting：当前状态，正在等待客户端发出请求的空闲连接数</span><br><span class="line">    </span><br><span class="line">    示例： stub_status</span><br><span class="line">    location &#x2F;status &#123;</span><br><span class="line">        stub_status;</span><br><span class="line">        allow 172.16.0.0&#x2F;16;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">--------------------------------------------------------   </span><br><span class="line">ngx_http_log_module模块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、 指定日志格式记录请求</span><br><span class="line">log_format name string ...; string可以使用nginx核心模块及其它模块内嵌的变量</span><br><span class="line">access_log path [format [buffer&#x3D;size] [gzip[&#x3D;level]] [flush&#x3D;time] [if&#x3D;condition]];</span><br><span class="line">access_log off;</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">	log_format compression &#39;$remote_addr-$remote_user [$time_local]&#39;</span><br><span class="line">	&#39;&quot;$request&quot; $status $bytes_sent &#39;</span><br><span class="line">	&#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$gzip_ratio&quot;&#39;;</span><br><span class="line">	</span><br><span class="line">	access_log &#x2F;spool&#x2F;logs&#x2F;nginx-access.log compression buffer&#x3D;32k;</span><br><span class="line">	</span><br><span class="line">3、缓存各日志文件相关的元数据信息 </span><br><span class="line">open_log_file_cache max&#x3D;N [inactive&#x3D;time] [min_uses&#x3D;N] [valid&#x3D;time];</span><br><span class="line">open_log_file_cache off;</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">    max：缓存的最大文件描述符数量</span><br><span class="line">    min_uses：在inactive指定的时长内访问大于等于此值方</span><br><span class="line">    可被当作活动项</span><br><span class="line">    inactive：非活动时长</span><br><span class="line">    valid： 验证缓存中各缓存项是否为活动项的时间间隔</span><br></pre></td></tr></table></figure>

<p>八、数据压缩相关</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_gzip_module</span><br><span class="line">用gzip方法压缩响应数据，节约带宽</span><br><span class="line"></span><br><span class="line">1、gzip on | off;</span><br><span class="line">启用或禁用gzip压缩</span><br><span class="line"></span><br><span class="line">2、gzip_comp_level level;</span><br><span class="line">压缩比由低到高： 1 到 9</span><br><span class="line">默认： 1</span><br><span class="line"></span><br><span class="line">3、gzip_disable regex ...;</span><br><span class="line">匹配到客户端浏览器不执行压缩</span><br><span class="line"></span><br><span class="line">4、gzip_min_length length;</span><br><span class="line">启用压缩功能的响应报文大小阈值</span><br><span class="line"></span><br><span class="line">5、gzip_http_version 1.0 | 1.1;</span><br><span class="line">设定启用压缩功能时，协议的最小版本，默认： 1.1</span><br><span class="line"></span><br><span class="line">6、gzip_buffers number size;</span><br><span class="line">支持实现压缩功能时缓冲区数量及每个缓存区的大小</span><br><span class="line">默认： 32 4k 或 16 8k</span><br><span class="line"></span><br><span class="line">7、gzip_types mime-type ...;</span><br><span class="line">指明仅对哪些类型的资源执行压缩操作；即压缩过滤器</span><br><span class="line">默认包含有text&#x2F;html，不用显示指定，否则出错</span><br><span class="line"></span><br><span class="line">8、gzip_vary on | off;</span><br><span class="line">如果启用压缩，是否在响应报文首部插入“Vary: AcceptEncoding”</span><br><span class="line"></span><br><span class="line">9、gzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...;</span><br><span class="line">nginx充当代理服务器时，对于后端服务器的响应报文，在何种条件下启用压缩功能</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    off：不启用压缩</span><br><span class="line">    expired,no-cache, no-store， private：对后端服务器的响应报文首部Cache-Control值任何一个，启用</span><br><span class="line">    压缩功能</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">gzip on;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_min_length 64;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_types text&#x2F;xml text&#x2F;css application&#x2F;javascript;</span><br></pre></td></tr></table></figure>

<h6 id="ssl加密相关"><a href="#ssl加密相关" class="headerlink" title="ssl加密相关"></a>ssl加密相关</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_ssl_module模块：</span><br><span class="line"></span><br><span class="line">1、 ssl on | off;</span><br><span class="line">为指定虚拟机启用HTTPS protocol， 建议用listen指令代替</span><br><span class="line"></span><br><span class="line">2、 ssl_certificate file;</span><br><span class="line">当前虚拟主机使用PEM格式的证书文件</span><br><span class="line"></span><br><span class="line">3、 ssl_certificate_key file;</span><br><span class="line">当前虚拟主机上与其证书匹配的私钥文件</span><br><span class="line"></span><br><span class="line">4、 ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2];支持ssl协议版本，默认为后三个</span><br><span class="line"></span><br><span class="line">5、 ssl_session_cache off | none | [builtin[:size]] [shared:name:size];</span><br><span class="line"></span><br><span class="line">说明：	</span><br><span class="line">    none: 通知客户端支持ssl session cache，但实际不支持</span><br><span class="line">    builtin[:size]：使用OpenSSL内建缓存，为每worker进程私有</span><br><span class="line">    [shared:name:size]：在各worker之间使用一个共享的缓存</span><br><span class="line">    </span><br><span class="line">6、 ssl_session_timeout time;</span><br><span class="line">客户端连接可以复用ssl session cache中缓存的ssl参数的有效时长，默认5m</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name www.example.com;</span><br><span class="line">        root &#x2F;vhosts&#x2F;ssl&#x2F;htdocs;</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;nginx.crt;</span><br><span class="line">        ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;nginx.key;</span><br><span class="line">        ssl_session_cache shared:sslcache:20m;</span><br><span class="line">        ssl_session_timeout 10m;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="重定向相关"><a href="#重定向相关" class="headerlink" title="重定向相关"></a>重定向相关</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_rewrite_module模块</span><br><span class="line"></span><br><span class="line">将用户请求的URI基于PCRE regex所描述的模式进行检查，而后完成重定向替换</span><br><span class="line"></span><br><span class="line">1、 rewrite regex replacement [flag]</span><br><span class="line">将用户请求的URI基于regex所描述的模式进行检查，匹配到时将其替换为replacement指定的新的URI</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">    如果在同一级配置块中存在多个rewrite规则，那么会自下而下逐个检查；被某条件规则替换完成后，会重新一轮的</span><br><span class="line">    替换检查</span><br><span class="line">    </span><br><span class="line">    隐含有循环机制,但不超过10次；如果超过，提示500响应码， [flag]所表示的标志位用于控制此循环机制</span><br><span class="line">    </span><br><span class="line">    如果replacement是以http:&#x2F;&#x2F;或https:&#x2F;&#x2F;开头，则替换结果会直接以重向返回给客户端, 即永久重定向301</span><br><span class="line">    </span><br><span class="line">    [flag]：</span><br><span class="line">    last：重写完成后停止对当前URI在当前location中后续的其它重写操作，而后对新的URI启动新一轮重写检查；</span><br><span class="line">    提前重启新一轮循环，不建议在location中使用</span><br><span class="line">    </span><br><span class="line">    break：重写完成后停止对当前URI在当前location中后续的其它重写操作，而后直接跳转至重写规则配置块之后</span><br><span class="line">    的其它配置；结束循环，建议在location中使用</span><br><span class="line">    </span><br><span class="line">    redirect：临时重定向，重写完成后以临时重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请</span><br><span class="line">    求；使用相对路径,或者http:&#x2F;&#x2F;或https:&#x2F;&#x2F;开头，状态码： 302</span><br><span class="line">    </span><br><span class="line">    permanent:重写完成后以永久重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求，状态</span><br><span class="line">    码：301</span><br><span class="line">    </span><br><span class="line">2、 return</span><br><span class="line">return code [text];</span><br><span class="line">return code URL;</span><br><span class="line">return URL;</span><br><span class="line">停止处理，并返回给客户端指定的响应码</span><br><span class="line"></span><br><span class="line">3、 rewrite_log on | off;</span><br><span class="line">是否开启重写日志, 发送至error_log（ notice level）</span><br><span class="line"></span><br><span class="line">4、 set $variable value;</span><br><span class="line">用户自定义变量，注意变量定义和调用都要以$开头</span><br><span class="line"></span><br><span class="line">5、 if (condition) &#123; ... &#125;</span><br><span class="line">引入新的上下文,条件满足时，执行配置块中的配置指令； server, location</span><br><span class="line"></span><br><span class="line">说明：condition</span><br><span class="line">    比较操作符：</span><br><span class="line">        &#x3D; 相同</span><br><span class="line">        !&#x3D; 不同</span><br><span class="line">        ~：模式匹配，区分字符大小写</span><br><span class="line">        ~*：模式匹配，不区分字符大小写</span><br><span class="line">        !~：模式不匹配，区分字符大小写</span><br><span class="line">        !~*：模式不匹配，不区分字符大小写</span><br><span class="line">    文件及目录存在性判断：</span><br><span class="line">        -e, !-e 存在（包括文件，目录，软链接）</span><br><span class="line">        -f, !-f 文件</span><br><span class="line">        -d, !-d 目录</span><br><span class="line">        -x, !-x 执行</span><br></pre></td></tr></table></figure>

<h6 id="防盗链相关"><a href="#防盗链相关" class="headerlink" title="防盗链相关"></a>防盗链相关</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_referer_module模块：</span><br><span class="line">用来阻止Referer首部无有效值的请求访问，可防止盗链</span><br><span class="line"></span><br><span class="line">1、 valid_referers none|blocked|server_names|string ...;定义referer首部的合法可用值，不能匹配的将是非法值</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    none：请求报文首部没有referer首部</span><br><span class="line">    blocked：请求报文有referer首部，但无有效值</span><br><span class="line">    server_names：参数，其可以有值作为主机名或主机名模式</span><br><span class="line">    arbitrary_string：任意字符串，但可使用*作通配符</span><br><span class="line">    regular expression：被指定的正则表达式模式匹配到的字符串,要使用~开头，例如： ~.*\.example\.com</span><br><span class="line">    </span><br><span class="line">示例：</span><br><span class="line">	valid_referers none block server_names *.example.com;</span><br><span class="line">	if ($invalid_referer) &#123;</span><br><span class="line">		return 403 http:&#x2F;&#x2F;www.example.com;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h6 id="反向代理proxy-pass"><a href="#反向代理proxy-pass" class="headerlink" title="反向代理proxy_pass"></a>反向代理proxy_pass</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_proxy_module模块：</span><br><span class="line"></span><br><span class="line">1、 proxy_pass URL;</span><br><span class="line">转发请求至另一台主机</span><br><span class="line">Context:location, if in location, limit_except</span><br><span class="line"></span><br><span class="line">注意： proxy_pass后面路径不带uri时，会将location的uri传递（附加）给后端主机</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    server_name HOSTNAME;</span><br><span class="line">    location &#x2F;uri&#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;host[:port];  #最后没有&#x2F;</span><br><span class="line">    #proxy_pass http:&#x2F;&#x2F;host[:port]&#x2F;; 意味着http:&#x2F;&#x2F;HOSTNAME&#x2F;uri --&gt; http:&#x2F;&#x2F;host&#x2F; 即置换</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果location定义其uri时使用了正则表达式的模式，则</span><br><span class="line">proxy_pass之后必须不能使用uri; 用户请求时传递的uri将直接附加至后端服务器之后</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        server_name HOSTNAME;</span><br><span class="line">        location ~|~* &#x2F;uri&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;host; 不能加&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    http:&#x2F;&#x2F;HOSTNAME&#x2F;uri&#x2F; --&gt; http:&#x2F;&#x2F;host&#x2F;uri&#x2F;</span><br><span class="line">    </span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">2、 proxy_set_header field value;</span><br><span class="line">设定发往后端主机的请求报文的请求首部的值</span><br><span class="line">Context: http, server, location</span><br><span class="line"></span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">请求报文的标准格式如下：X-Forwarded-For: client1, proxy1, proxy2</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">3、 proxy_cache_path;</span><br><span class="line">定义可用于proxy功能的缓存</span><br><span class="line">Context:http</span><br><span class="line"></span><br><span class="line">proxy_cache_path path [levels&#x3D;levels] [use_temp_path&#x3D;on|off] keys_zone&#x3D;name:size [inactive&#x3D;time] [max_size&#x3D;size] [manager_files&#x3D;number] </span><br><span class="line">[manager_sleep&#x3D;time][manager_threshold&#x3D;time] [loader_files&#x3D;number] </span><br><span class="line">[loader_sleep&#x3D;time] [loader_threshold&#x3D;time] [purger&#x3D;on|off] </span><br><span class="line">[purger_files&#x3D;number][purger_sleep&#x3D;time] [purger_threshold&#x3D;time];</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">4、 proxy_cache zone | off; 默认off</span><br><span class="line">指明调用的缓存，或关闭缓存机制</span><br><span class="line">Context:http,server, location</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">5、 proxy_cache_key string;</span><br><span class="line">缓存中用于“键”的内容</span><br><span class="line">默认值： proxy_cache_key $scheme$proxy_host$request_uri;</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">6、 proxy_cache_valid [code ...] time;</span><br><span class="line">定义对特定响应码的响应内容的缓存时长</span><br><span class="line">定义在http&#123;...&#125;中</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">    proxy_cache_valid 200 302 10m;</span><br><span class="line">    proxy_cache_valid 404 1m;</span><br><span class="line">    </span><br><span class="line">示例：在http配置定义缓存信息</span><br><span class="line">    proxy_cache_path &#x2F;var&#x2F;cache&#x2F;nginx&#x2F;proxy_cache levels&#x3D;1:1:1 keys_zone&#x3D;proxycache:20m</span><br><span class="line">    inactive&#x3D;120s max_size&#x3D;1g;</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">	proxycache:20m 指内存中缓存的大小，主要用于存放key和metadata（如：使用次数）</span><br><span class="line">    max_size&#x3D;1g 指磁盘存入文件内容的缓存空间最大值</span><br><span class="line">    </span><br><span class="line">    调用缓存功能，需要定义在相应的配置段，如server&#123;...&#125;；</span><br><span class="line">    proxy_cache proxycache;</span><br><span class="line">    proxy_cache_key $request_uri;</span><br><span class="line">    proxy_cache_valid 200 302 301 1h;</span><br><span class="line">    proxy_cache_valid any 1m;</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">7、 proxy_cache_use_stale;</span><br><span class="line">proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 |</span><br><span class="line">http_503 | http_504 | http_403 | http_404 | off ...</span><br><span class="line">在被代理的后端服务器出现哪种情况下，可以真接使用过期的缓存响应客户端</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">8、 proxy_cache_methods GET | HEAD | POST ...;</span><br><span class="line">对哪些客户端请求方法对应的响应进行缓存， GET和HEAD方法总是被缓存</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">9、 proxy_hide_header field;</span><br><span class="line">默认nginx在响应报文不传递后端服务器的首部字段Date,Server, X-Pad, X-Accel-等，用于隐藏后端服务器特定的响应首部</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">10、 proxy_connect_timeout time;</span><br><span class="line">定义与后端服务器建立连接的超时时长，如超时会出现502错误，默认为60s，一般不建议超出75s</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">11、 proxy_send_timeout time;</span><br><span class="line">将请求发送给后端服务器的超时时长；默认为60s</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">12、 proxy_read_timeout time;</span><br><span class="line">等待后端服务器发送响应报文的超时时长， 默认为60s</span><br></pre></td></tr></table></figure>



<h6 id="定义服务器组upstream"><a href="#定义服务器组upstream" class="headerlink" title="定义服务器组upstream"></a>定义服务器组upstream</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_upstream_module模块</span><br><span class="line">用于将多个服务器定义成服务器组，而由proxy_pass,fastcgi_pass等指令进行引用</span><br><span class="line"></span><br><span class="line">1、 upstream name &#123; ... &#125;</span><br><span class="line">定义后端服务器组，会引入一个新的上下文,默认调度算法是wrr</span><br><span class="line">Context: http</span><br><span class="line"></span><br><span class="line">upstream httpdsrvs &#123;</span><br><span class="line">    server ...</span><br><span class="line">    server...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    server address [parameters];</span><br><span class="line">    在upstream上下文中server成员，以及相关的参数；Context:upstream</span><br><span class="line">    </span><br><span class="line">    address的表示格式：</span><br><span class="line">        unix:&#x2F;PATH&#x2F;TO&#x2F;SOME_SOCK_FILE</span><br><span class="line">        IP[:PORT]</span><br><span class="line">        HOSTNAME[:PORT]</span><br><span class="line">    parameters：</span><br><span class="line">        weight&#x3D;number 权重，默认为1</span><br><span class="line">        max_conns 连接后端报务器最大并发活动连接数， 1.11.5后支持</span><br><span class="line">        max_fails&#x3D;number 失败尝试最大次数；超出此处指定的次数时，server将被标记为不可用,默认为1</span><br><span class="line">   		fail_timeout&#x3D;time 后端服务器标记为不可用状态的连接超时时长，默认10s</span><br><span class="line">		backup 将服务器标记为“备用”，即所有服务器均不可用时才启用</span><br><span class="line">		down 标记为“不可用”，配合ip_hash使用，实现灰度发布</span><br><span class="line">		</span><br><span class="line">    ip_hash 源地址hash调度方法</span><br><span class="line">    </span><br><span class="line">    least_conn 最少连接调度算法，当server拥有不同的权重时其为wlc，当所有后端主机连接数相同时，则使用</span><br><span class="line">    wrr，适用于长连接</span><br><span class="line">    </span><br><span class="line">    hash key [consistent] 基于指定的key的hash表来实现对请求的调度，此处的key可以直接文本、变量或二者</span><br><span class="line">    组合</span><br><span class="line">    </span><br><span class="line">    作用：将请求分类，同一类请求将发往同一个upstream server，使用consistent参数， 将使用ketama一致性</span><br><span class="line">    hash算法，</span><br><span class="line">    </span><br><span class="line">    适用于后端是Cache服务器（如varnish）时使用</span><br><span class="line">    hash $request_uri consistent;</span><br><span class="line">    hash $remote_addr;</span><br><span class="line">    </span><br><span class="line">    keepalive 连接数N;</span><br><span class="line">    为每个worker进程保留的空闲的长连接数量,可节约nginx端口，并减少连接管理的消耗</span><br></pre></td></tr></table></figure>



<h6 id="传输层调度器stream"><a href="#传输层调度器stream" class="headerlink" title="传输层调度器stream"></a>传输层调度器stream</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_stream_core_module模块</span><br><span class="line">模拟反代基于tcp或udp的服务连接，即工作于传输层的反代或调度器</span><br><span class="line"></span><br><span class="line">1、 stream &#123; ... &#125;</span><br><span class="line">定义stream相关的服务</span><br><span class="line">Context:main</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    upstream mysqlsrvs &#123;</span><br><span class="line">        server 192.168.22.2:3306;</span><br><span class="line">        server 192.168.22.3:3306;</span><br><span class="line">        least_conn;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 10.1.0.6:3306;</span><br><span class="line">        proxy_pass mysqlsrvs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">说明：listen</span><br><span class="line">	listen address:port [ssl] [udp] [proxy_protocol] [backlog&#x3D;number] </span><br><span class="line">	[bind] [ipv6only&#x3D;on|off] [reuseport]</span><br><span class="line">	[so_keepalive&#x3D;on|off|[keepidle]:[keepintvl]:[keepcnt]];</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">2、ngx_stream_proxy_module模块</span><br><span class="line">可实现代理基于TCP， UDP (1.9.13), UNIX-domain，sockets的数据流</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    proxy_pass address;</span><br><span class="line">    指定后端服务器地址</span><br><span class="line"> 	</span><br><span class="line"> 	proxy_timeout timeout;</span><br><span class="line">    无数据传输时，保持连接状态的超时时长，默认为10m</span><br><span class="line">    </span><br><span class="line">    proxy_connect_timeout time;</span><br><span class="line">    设置nginx与被代理的服务器尝试建立连接的超时时长，默认为60s</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br></pre></td></tr></table></figure>



<h6 id="自定义响应报文首部"><a href="#自定义响应报文首部" class="headerlink" title="自定义响应报文首部"></a>自定义响应报文首部</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_headers_module模块</span><br><span class="line">向由代理服务器响应给客户端的响应报文添加自定义首部，或修改指定首部的值</span><br><span class="line"></span><br><span class="line">1、 add_header name value [always];</span><br><span class="line">添加自定义首部</span><br><span class="line">add_header X-Via $server_addr;</span><br><span class="line">add_header X-Cache $upstream_cache_status;</span><br><span class="line">add_header X-Accel $server_name;</span><br><span class="line"></span><br><span class="line">2、 add_trailer name value [always];</span><br><span class="line">添加自定义响应信息的尾部</span><br></pre></td></tr></table></figure>

<h6 id="fastcgi相关"><a href="#fastcgi相关" class="headerlink" title="fastcgi相关"></a>fastcgi相关</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_fastcgi_module模块</span><br><span class="line">转发请求到FastCGI服务器，不支持php模块方式</span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">1、 fastcgi_pass address;</span><br><span class="line">address为后端的fastcgi server的地址</span><br><span class="line">可用位置： location, if in location</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">2、 fastcgi_index name;</span><br><span class="line">fastcgi默认的主页资源</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line">3、 fastcgi_param parameter value [if_not_empty];</span><br><span class="line">设置传递给 FastCGI服务器的参数值，可以是文本，变量或组合</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">	1）在后端服务器先配置fpm server和mariadb-server</span><br><span class="line">	2）在前端nginx服务上做以下配置：</span><br><span class="line">    location ~* \.php$ &#123;</span><br><span class="line">        fastcgi_pass 后端fpm服务器IP:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">示例2：通过&#x2F;pm_status和&#x2F;ping来获取fpm server状态信息</span><br><span class="line">	location ~* ^&#x2F;(pm_status|ping)$ &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_pass 后端fpm服务器IP:9000;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">4、 fastcgi_cache_path path [levels&#x3D;levels] [use_temp_path&#x3D;on|off] keys_zone&#x3D;name:size [inactive&#x3D;time] [max_size&#x3D;size] [manager_files&#x3D;number] [manager_sleep&#x3D;time] [manager_threshold&#x3D;time] [loader_files&#x3D;number] [loader_sleep&#x3D;time] [loader_threshold&#x3D;time][purger&#x3D;on|off] [purger_files&#x3D;number] </span><br><span class="line">[purger_sleep&#x3D;time][purger_threshold&#x3D;time];</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    path 缓存位置为磁盘上的文件系统</span><br><span class="line">    max_size&#x3D;size 磁盘path路径中用于缓存数据的缓存空间上限</span><br><span class="line">    levels&#x3D;levels：缓存目录的层级数量，以及每一级的目录数量</span><br><span class="line">    levels&#x3D;ONE:TWO:THREE</span><br><span class="line">    keys_zone&#x3D;name:size   k&#x2F;v映射的内存空间的名称及大小</span><br><span class="line">    inactive&#x3D;time 非活动时长</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">5、 fastcgi_cache zone | off;</span><br><span class="line">调用指定的缓存空间来缓存数据</span><br><span class="line">可用位置： http, server, location</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">6、 fastcgi_cache_key string;</span><br><span class="line">定义用作缓存项的key的字符串</span><br><span class="line">示例： fastcgi_cache_key $request_rui;</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">7、 fastcgi_cache_methods GET | HEAD | POST ...;</span><br><span class="line">为哪些请求方法使用缓存</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">8、 fastcgi_cache_min_uses number;</span><br><span class="line">缓存空间中的缓存项在inactive定义的非活动时间内至少要被访问到</span><br><span class="line">此处所指定的次数方可被认作活动项</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">9、 fastcgi_keep_conn on | off;</span><br><span class="line">收到后端服务器响应后， fastcgi服务器是否关闭连接，建议启用长连接</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">10、 fastcgi_cache_valid [code ...] time;</span><br><span class="line">不同的响应码各自的缓存时长</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">http &#123;</span><br><span class="line">    fastcgi_cache_path &#x2F;var&#x2F;cache&#x2F;nginx&#x2F;fcgi_cache levels&#x3D;1:2:1 keys_zone&#x3D;fcgicache:20m inactive&#x3D;120s;</span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">    	location ~* \.php$ &#123;</span><br><span class="line">        	...</span><br><span class="line">            fastcgi_cache fcgicache;</span><br><span class="line">            fastcgi_cache_key $request_uri;</span><br><span class="line">            fastcgi_cache_valid 200 302 10m;</span><br><span class="line">            fastcgi_cache_valid 301 1h;</span><br><span class="line">            fastcgi_cache_valid any 1m;</span><br><span class="line">            ...</span><br><span class="line">     	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>http服务</title>
    <url>/2020/06/24/http/</url>
    <content><![CDATA[<h4 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h4><h5 id="什么是互联网Internet？"><a href="#什么是互联网Internet？" class="headerlink" title="什么是互联网Internet？"></a>什么是互联网Internet？</h5><img src="/images/http/http2.jpg" alt="http2" style="zoom: 40%;" />

<h5 id="Internet与中国"><a href="#Internet与中国" class="headerlink" title="Internet与中国"></a>Internet与中国</h5><ol>
<li><p>Internet最早来源于美国国防部高级研究计划局ARPA建立的ARPANet，<br>1969年投入运行。1983年， ARPAnet分裂为两部分：ARPAnet和纯军<br>事用的MILNET。当年1月， ARPA把TCP/IP协议作为ARPAnet的标准协<br>议，这个以ARPAnet为主干网的网际互联网便被称为Internet。1986年，<br>美国国家科学基金会建立计算机通信网络NSFnet。此后， NSFNet逐渐<br>取代ARPANet在Internet的地位。 1990年， ARPANet正式关闭</p>
</li>
<li><p>北京时间1987年9月20日，钱天白建立起一个网络节点，通过电话拨号连<br>接到国际互联网，向他的德国朋友发出来自中国的第一封电子邮件：<br>Across the Great Wall we can reach every corner in the world，自此，<br>中国与国际计算机网络开始连接在一起</p>
  <img src="/images/http/http3.jpg" alt="http3" style="zoom: 33%;" />

</li>
</ol>
<h5 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h5><img src="/images/http/http4.jpg" alt="http4" style="zoom: 33%;" />

<h5 id="跨Internet的主机间通讯"><a href="#跨Internet的主机间通讯" class="headerlink" title="跨Internet的主机间通讯"></a>跨Internet的主机间通讯</h5><blockquote>
<p>在建立通信连接的每一端，进程间的传输要有两个标志：<br>IP地址和端口号，合称为套接字地址 socket address<br>客户机套接字地址定义了一个唯一的客户进程<br>服务器套接字地址定义了一个唯一的服务器进程</p>
</blockquote>
  <img src="/images/http/http5.jpg" alt="httpd5" style="zoom:80%;" />



<h5 id="Socket套接字"><a href="#Socket套接字" class="headerlink" title="Socket套接字"></a>Socket套接字</h5><img src="/images/http/http6.jpg" alt="httpd6" style="zoom: 33%;" />

<blockquote>
<p>Socket：套接字，进程间通信IPC的一种实现，允许位于不同主机（或同一主机）<br>上不同进程之间进行通信和数据交换， SocketAPI出现于1983年， 4.2 BSD实现</p>
<p>Socket API：封装了内核中所提供的socket通信相关的系统调用</p>
<p>Socket Domain：根据其所使用的地址</p>
<ol>
<li>AF_INET： Address Family， IPv4</li>
<li>AF_INET6： IPv6</li>
<li>AF_UNIX：同一主机上不同进程之间通信时使用</li>
</ol>
<p>Socket Type：根据使用的传输层协议</p>
<ol>
<li>SOCK_STREAM：流， tcp套接字， 可靠地传递、面向连接</li>
<li>SOCK_DGRAM：数据报， udp套接字， 不可靠地传递、无连接</li>
<li>SOCK_RAW: 裸套接字,无须tcp或tdp,APP直接通过IP包通信  </li>
</ol>
</blockquote>
<p>客户/服务器程序的套接字函数</p>
  <img src="/images/http/http7.jpg" alt="http7" style="zoom: 50%;" />



<p>套接字相关的系统调用：</p>
<blockquote>
<p>socket(): 创建一个套接字<br>bind()：绑定IP和端口<br>listen()：监听<br>accept()：接收请求<br>connect()：请求连接建立<br>write()：发送<br>read()：接收<br>close():关闭连接  </p>
</blockquote>
<h5 id="http服务通信过程"><a href="#http服务通信过程" class="headerlink" title="http服务通信过程"></a>http服务通信过程</h5><img src="/images/http/http8.jpg" alt="http8" style="zoom: 33%;" />



<img src="/images/http/http22.png" alt="image-20200628200114736" style="zoom: 50%;" />



<img src="/images/http/http10.jpg" alt="http10" style="zoom: 33%;" />

<h5 id="Http相关术语"><a href="#Http相关术语" class="headerlink" title="Http相关术语"></a>Http相关术语</h5><blockquote>
<p>http: Hyper Text Transfer Protocol, 80/tcp</p>
<p>html: Hyper Text Markup Language 超文本标记语言，编程语言</p>
<p>CSS: Cascading Style Sheet 层叠样式表</p>
<p>js: javascript</p>
</blockquote>
<blockquote>
<p>MIME： Multipurpose Internet Mail Extensions</p>
<ul>
<li>多用途互联网邮件扩展 /etc/mime.types</li>
<li>格式： major/minor<br>text/plain<br>text/html<br>text/css<br>image/jpeg<br>image/png<br>video/mp4<br>application/javascript</li>
<li>参考：<a href="http://www.w3school.com.cn/media/media_mimeref.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/media/media_mimeref.asp</a>  </li>
</ul>
</blockquote>
<h4 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h4><h5 id="协议介绍"><a href="#协议介绍" class="headerlink" title="协议介绍"></a>协议介绍</h5><p><img src="/images/http/http11.jpg" alt="http11"></p>
<blockquote>
<p>http/0.9：1991，原型版本，功能简陋，只有一个命令GET。 GET/index.html ,服务器只能回应HTML格式字符串，不能回应别的格式</p>
<p>http/1.0: 1996年5月,支持cache, MIME, method</p>
<ol>
<li>每个TCP连接只能发送一个请求，发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接</li>
<li>引入了POST命令和HEAD命令</li>
<li>头信息是 ASCII 码，后面数据可为任何格式。服务器回应时会告诉客户端，数据是什么格式，即Content-Type字段的作用。这些数据类型总称为MIME 多用途互联网邮件扩展，每个值包括一级类型和二级类型，预定义的类型，也可自定义类型。</li>
<li>常见Content-Type值： text/xml image/jpeg audio/mp3  </li>
</ol>
<p>http/1.1： 1997年1月</p>
<ol>
<li>引入了持久连接（ persistent connection），即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive。对于同一个域名，大多数浏览器允许同时建立6个持久连接</li>
<li>引入了管道机制（ pipelining），即在同一个TCP连接里，客户端可以同时发送多个请求，进一步改进了HTTP协议的效率</li>
<li>新增方法： PUT、 PATCH、 OPTIONS、 DELETE</li>
<li>同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只能顺序处理回应，前面的回应慢，会有许多请求排队，造成”队头堵塞”（ Head-of-line blocking）</li>
<li>为避免上述问题，两种方法：一是减少请求数，二是同时多开持久连接。网页优化技巧，比如合并脚本和样式表、将图片嵌入CSS代码、域名分片（ domain sharding）等</li>
<li>HTTP 协议不带有状态，每次请求都必须附上所有信息。请求的<br>很多字段都是重复的，浪费带宽，影响速度  </li>
</ol>
<p>Spdy： 2009年,谷歌研发,解决 HTTP/1.1 效率不高问题</p>
<p>http/2.0： 2015年</p>
<ol>
<li>头信息和数据体都是二进制，称为头信息帧和数据帧</li>
<li>复用TCP连接，在一个连接里，客户端和浏览器都可以同时<br>发送多个请求或回应，且不用按顺序一一对应，避免了“队<br>头堵塞“,此双向的实时通信称为多工（ Multiplexing）</li>
<li>引入头信息压缩机制（ header compression） ,头信息使用gzip或compress压缩后再发送；客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，不发送同样字段，只发送索引号，提高速度</li>
<li>HTTP/2 允许服务器未经请求，主动向客户端发送资源，<br>即服务器推送（ server push）  </li>
</ol>
</blockquote>
<h5 id="http工作机制"><a href="#http工作机制" class="headerlink" title="http工作机制"></a>http工作机制</h5><ol>
<li><p>工作机制：</p>
<p>http请求： http request<br>http响应： http response<br>一次http事务：请求&lt;–&gt;响应</p>
</li>
<li><p>Web资源： web resource</p>
<p>一个网页由多个资源构成，打开一个页面，会有多个资源展示出来，但是每个资源都要单独请求。因此，一个“Web 页面”通常并不是单个资源，而是一组资源的集合</p>
<p>静态文件：无需服务端做出额外处理</p>
<blockquote>
<p>文件后缀： .jpg, .html, .txt, .js, .css, .mp3, .avi</p>
</blockquote>
<p>动态文件：服务端执行程序，返回执行的结果</p>
<blockquote>
<p>文件后缀： .asp, .php, .jsp  </p>
</blockquote>
</li>
<li><p>提高HTTP连接性能</p>
<blockquote>
<p>并行连接：通过多条TCP连接发起并发的HTTP请求<br>持久连接： keep-alive,长连接，重用TCP连接，以消除连接和关闭的时延,以事务个数和时间来决定是否关闭连接<br>管道化连接：通过共享TCP连接发起并发的HTTP请求<br>复用的连接：交替传送请求和响应报文（实验阶段）  </p>
</blockquote>
</li>
<li><p>HTTP连接请求</p>
</li>
</ol>
<img src="/images/http/http12.jpg" style="zoom: 33%;" />

<ol start="5">
<li><p>串行和并行连接</p>
<img src="/images/http/http13.jpg" style="zoom: 50%;" />

</li>
</ol>
<img src="/images/http/http14.jpg" style="zoom: 50%;" />

<ol start="6">
<li><p>串行,持久连接和管道</p>
<p><img src="/images/http/http15.jpg" alt=""></p>
</li>
</ol>
<h5 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h5><p>URI: Uniform Resource Identifier 统一资源标识，分为URL和URN</p>
<blockquote>
<p>URN: Uniform Resource Naming，统一资源命名<br>示例： P2P下载使用的磁力链接是URN的一种实现<br>magnet:?xt=urn:btih:660557A6890EF888666</p>
<p>URL: Uniform Resorce Locator，统一资源定位符，用于描述某服务器某特定资源位置</p>
<p>两者区别： URN如同一个人的名称， 而URL代表一个人的住址。换言之， URN定义某事物的身份，而URL提供查找该事物的方法。 URN仅用于命名，而不指定地址  </p>
</blockquote>
<p>URL组成</p>
<p><img src="/images/http/http16.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scheme&gt;:&#x2F;&#x2F;&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;&#x2F;&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</span><br><span class="line"></span><br><span class="line">    schame:方案，访问服务器以获取资源时要使用哪种协议</span><br><span class="line"></span><br><span class="line">    user:用户，某些方案访问资源时需要的用户名</span><br><span class="line"></span><br><span class="line">    password:密码，用户对应的密码，中间用：分隔</span><br><span class="line"></span><br><span class="line">    Host:主机，资源宿主服务器的主机名或IP地址</span><br><span class="line"></span><br><span class="line">    port:端口,资源宿主服务器正在监听的端口号，很多方案有默认端口号</span><br><span class="line"></span><br><span class="line">    path:路径,服务器资源的本地名，由一个&#x2F;将其与前面的URL组件分隔</span><br><span class="line"></span><br><span class="line">    params:参数，指定输入的参数，参数为名&#x2F;值对，多个参数，用;分隔</span><br><span class="line"></span><br><span class="line">    query:查询，传递参数给程序，如数据库，用？分隔,多个查询用&amp;分隔</span><br><span class="line"></span><br><span class="line">    frag:片段,一小片或一部分资源的名字，此组件在客户端使用，用#分隔</span><br></pre></td></tr></table></figure>

<p>网站访问量</p>
<blockquote>
<p>IP(独立IP)：即Internet Protocol,指独立IP数。一天内来自相同客户机IP地址只计算一次，记录远程客户机IP地址的计算机访问网站的次数，是衡量网站流量的重要指标</p>
<p>PV(访问量)： 即Page View, 页面浏览量或点击量，用户每次刷新即被计算一次， PV反映的是浏览某网站的页面数， PV与来访者的数量成正比， PV并不是页面的来访者数量，而是网站被访问的页面数量</p>
<p>UV(独立访客)：即Unique Visitor,访问网站的一台电脑为一个访客。一天内相同的客户端只被计算一次。可以理解成访问某网站的电脑的数量。网站判断来访电脑的身份是通过来访电脑的cookies实现的。如果更换了IP后但不清除cookies，再访<br>问相同网站，该网站的统计中UV数是不变的</p>
<p>网站统计： <a href="http://www.alexa.cn/rank/" target="_blank" rel="noopener">http://www.alexa.cn/rank/</a>  </p>
</blockquote>
<h5 id="Web服务请求处理步骤"><a href="#Web服务请求处理步骤" class="headerlink" title="Web服务请求处理步骤"></a>Web服务请求处理步骤</h5><p>一次完整的http请求处理过程</p>
<img src="/images/http/http17.jpg" style="zoom: 33%;" />



<ol>
<li><p>建立连接：接收或拒绝连接请求</p>
</li>
<li><p>接收请求：接收客户端请求报文中对某资源的一次请求的过程</p>
<blockquote>
<p>Web访问响应模型（ Web I/O）</p>
<ul>
<li><p>单进程I/O模型： 启动一个进程处理用户请求，而且一次只处理一个，多个请求被串行响应</p>
</li>
<li><p>多进程I/O模型： 并行启动多个进程,每个进程响应一个连接请求复用I/O结构：启动一个进程，同时响应N个连接请求, 实现方法： 多线程模型和事件驱动</p>
<blockquote>
<p>多线程模型：一个进程生成N个线程，每线程响应一个连接请求</p>
<p>事件驱动：一个进程处理N个请求</p>
</blockquote>
</li>
<li><p>复用的多进程I/O模型：启动M个进程，每个进程响应N个连接请求，同时接收M*N个请求</p>
</li>
</ul>
</blockquote>
</li>
<li><p>处理请求</p>
<blockquote>
<p>服务器对请求报文进行解析，并获取请求的资源及请求方法等相关信息，根据方法，资源，首部和可选的主体部分对请求进行处理</p>
<p>元数据：请求报文首部<br><method> <URL> <VERSION><br>HEADERS 格式 name:value</p>
<request body>

<p>HTTP常用请求方式， Method<br>GET、 POST、 HEAD、 PUT、 DELETE、 TRACE、 OPTIONS</p>
</blockquote>
</li>
<li><p>访问资源:</p>
<blockquote>
<p>服务器获取请求报文中请求的资源web服务器，即存放了web资源的服务器，负责向请求者提供对方请求的静态资源，或动态运行后生成的资源</p>
<p>资源放置于本地文件系统特定的路径： DocRoot<br>DocRoot –&gt; /var/www/html</p>
<p>web服务器资源路径映射方式：<br>(a) docroot<br>(b) alias<br>(c) 虚拟主机docroot<br>(d) 用户家目录docro</p>
</blockquote>
</li>
<li><p>构建响应报文：</p>
<blockquote>
<p>一旦Web服务器识别除了资源，就执行请求方法中描述的动作，并返回响应报文。响应报文中 包含有响应状态码、响应首部，如果生成了响应主体的话，还包括响应主体</p>
<p>1）响应实体：如果事务处理产生了响应主体，就将内容放在响应报文中回送过去。响应报文中通常包括：</p>
<blockquote>
<p>描述了响应主体MIME类型的Content-Type首部<br>描述了响应主体长度的Content-Length<br>实际报文的主体内容</p>
</blockquote>
<p>2) URL重定向： web服务构建的响应并非客户端请求的资源，而是资源另外一个访问路径</p>
<blockquote>
<p>永久重定向： <a href="http://www.360buy.com" target="_blank" rel="noopener">http://www.360buy.com</a><br>临时重定向： <a href="http://www.taobao.com" target="_blank" rel="noopener">http://www.taobao.com</a> </p>
</blockquote>
<p>3） MIME类型：</p>
<blockquote>
<p>Web服务器要负责确定响应主体的MIME类型。多种配置服务器的方法可将MIME类型与资源管理起来</p>
<p>魔法分类： Apache web服务器可以扫描每个资源的内容，并将其与一个已知模式表(被称为魔法文件)进行匹配，以决定每个文件的MIME类型。这样做可能比较慢，但很方便，尤其是文件没有标准扩展名时</p>
<p>显式分类：可以对Web服务器进行配置，使其不考虑文件的扩展名或内容，强制特定文件或目录内容拥有某个MIME类型</p>
<p>类型协商： 有些Web服务器经过配置，可以以多种文档格<br>式来存储资源。在这种情况下，可以配置Web服务器，使其可以<br>通过与用户的协商来决定使用哪种格式(及相关的MIME类型)”最<br>好  </p>
</blockquote>
</blockquote>
</li>
<li><p>发送响应报文</p>
<blockquote>
<p>Web服务器通过连接发送数据时也会面临与接收数据一样的问题。服务器可能有很多条到各个客户端的连接， 有些是空闲的，有些在向服务器发送数据，还有一些在向客户端回送响应数据。服务器要记录连接的状态，还要特别注意对持久连接的处理。对非持久连接而言，服务器应该在发送了整条报文之后，关闭自己这一端的连接。对持久连接来说，连接可能仍保持打开状态，在这种情况下， 服务器要正确地计算Content-Length首部，不然客户端就无法知道响应什么时候结束了</p>
</blockquote>
</li>
<li><p>记录日志</p>
<blockquote>
<p>最后，当事务结束时， Web服务器会在日志文件中添加一个条目，来描述已执行的事务  </p>
</blockquote>
</li>
</ol>
<h4 id="http服务器应用"><a href="#http服务器应用" class="headerlink" title="http服务器应用"></a>http服务器应用</h4><h5 id="http服务器程序"><a href="#http服务器程序" class="headerlink" title="http服务器程序"></a><strong>http服务器程序</strong></h5><blockquote>
<p>httpd apache<br>nginx<br>lighttpd</p>
</blockquote>
<h5 id="应用程序服务器"><a href="#应用程序服务器" class="headerlink" title="应用程序服务器"></a><strong>应用程序服务器</strong></h5><blockquote>
<p>IIS .asp<br>tomcat .jsp<br>jetty 开源的servlet容器，基于Java的web容器<br>Resin CAUCHO公司，支持servlets和jsp的引擎<br>webshpere(IBM), weblogic(BEA), jboss,oc4j(Oracle)</p>
</blockquote>
<h5 id="市场占有率统计"><a href="#市场占有率统计" class="headerlink" title="市场占有率统计"></a><strong>市场占有率统计</strong></h5><p><a href="http://www.netcraft.com" target="_blank" rel="noopener">www.netcraft.com</a>  </p>
<h4 id="Httpd介绍"><a href="#Httpd介绍" class="headerlink" title="Httpd介绍"></a>Httpd介绍</h4><h5 id="Httpd"><a href="#Httpd" class="headerlink" title="Httpd"></a>Httpd</h5><p>1) 20世纪90年代初， 国家超级计算机应用中心NCSA开发</p>
<p>2) 1995年开源社区发布apache（ a patchy server）</p>
<blockquote>
<p>ASF: apache software foundation<br>FSF： Free Software Foundation  </p>
</blockquote>
<h5 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h5><blockquote>
<p>高度模块化： core + modules<br>DSO: Dynamic Shared Object 动态加/卸载<br>MPM： multi-processing module多路处理模块  </p>
</blockquote>
<h5 id="MPM工作模式"><a href="#MPM工作模式" class="headerlink" title="MPM工作模式"></a>MPM工作模式</h5><ul>
<li><p>prefork：多进程I/O模型，每个进程响应一个请求，默认模型</p>
<blockquote>
<p>一个主进程：生成和回收n个子进程， 创建套接字，不响应请求</p>
<p>多个子进程：工作work进程，每个子进程处理一个请求；系统初始时，预先生成多个空闲进程，等待请求，最大不超过1024个</p>
<img src="/images/http/http18.jpg"  style="zoom:50%;" />
</blockquote>
</li>
</ul>
<ul>
<li><p>worker：复用的多进程I/O模型,多进程多线程， IIS使用此模型</p>
<blockquote>
<p>一个主进程： 生成m个子进程，每个子进程负责生个n个线程，每个线<br>程响应一个请求，并发响应请求： m*n</p>
<img src="/images/http/http19.jpg"  style="zoom: 67%;" />
</blockquote>
</li>
</ul>
<ul>
<li><p>event：事件驱动模型（ worker模型的变种）</p>
<blockquote>
<p>一个主进程：生成m个子进程，每个进程直接响应n个请求</p>
<p>并发响应请求： m*n</p>
<p>有专门的线程来管理这些keep-alive类型的线程，当有真实请求时， 将请求传递给服务线程，执行完毕后，又允许释放。这样增强了高并发场景下的请求处理能力</p>
<img src="/images/http/http20.jpg"  style="zoom:67%;" />
</blockquote>
</li>
</ul>
<ul>
<li><p>httpd-2.2: event 测试版， centos6默认</p>
<p>httpd-2.4： event 稳定版， centos7默认  </p>
</li>
</ul>
<h5 id="进程角色"><a href="#进程角色" class="headerlink" title="进程角色"></a>进程角色</h5><img src="/images/http/http21.jpg" style="zoom: 33%;" />

<h5 id="httpd功能特性"><a href="#httpd功能特性" class="headerlink" title="httpd功能特性"></a>httpd功能特性</h5><ol>
<li><p><strong>虚拟主机</strong></p>
</li>
<li><blockquote>
<p>IP、 Port、 FQDN</p>
</blockquote>
</li>
<li><p><strong>CGI</strong>： Common Gateway Interface，通用网关接口</p>
</li>
<li><p><strong>反向代理</strong></p>
</li>
<li><p><strong>负载均衡</strong></p>
</li>
<li><p><strong>路径别名</strong></p>
</li>
<li><p><strong>丰富的用户认证机制</strong><br>basic<br>digest</p>
</li>
<li><p><strong>支持第三方模块</strong>  </p>
</li>
</ol>
<h4 id="Httpd安装"><a href="#Httpd安装" class="headerlink" title="Httpd安装"></a>Httpd安装</h4><h5 id="版本"><a href="#版本" class="headerlink" title="版本:"></a><strong>版本:</strong></h5><p>CentOS 6: 2.2<br>CentOS 7: 2.4</p>
<h5 id="安装方式："><a href="#安装方式：" class="headerlink" title="安装方式："></a><strong>安装方式：</strong></h5><p>rpm： centos发行版，稳定，建议使用<br>编译：定制或特殊需求</p>
<h5 id="CentOS-6-httpd程序环境："><a href="#CentOS-6-httpd程序环境：" class="headerlink" title="CentOS 6 httpd程序环境："></a><strong>CentOS 6 httpd程序环境：</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">httpd-2.2</span><br><span class="line"></span><br><span class="line">配置文件：</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;*.conf</span><br><span class="line"></span><br><span class="line">检查配置语法：</span><br><span class="line">httpd –t</span><br><span class="line">service httpd configtest  </span><br><span class="line"></span><br><span class="line">服务脚本：</span><br><span class="line"> &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;httpd</span><br><span class="line">脚本配置文件：</span><br><span class="line"> &#x2F;etc&#x2F;sysconfig&#x2F;httpd</span><br><span class="line"></span><br><span class="line">服务控制和启动：</span><br><span class="line">chkconfig httpd on|off</span><br><span class="line">service &#123;start|stop|restart|status|configtest|reload&#125; httpd</span><br><span class="line"></span><br><span class="line">站点网页文档根目录：</span><br><span class="line">&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line"></span><br><span class="line">模块文件路径：</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;modules</span><br><span class="line">&#x2F;usr&#x2F;lib64&#x2F;httpd&#x2F;modules  </span><br><span class="line"></span><br><span class="line">主程序文件：</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;httpd</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;httpd.worker</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;httpd.event</span><br><span class="line"></span><br><span class="line">主进程文件：</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;run&#x2F;httpd.pid</span><br><span class="line"></span><br><span class="line">日志文件目录：&#x2F;var&#x2F;log&#x2F;httpd</span><br><span class="line">access_log: 访问日志</span><br><span class="line">error_log：错误日志</span><br><span class="line"></span><br><span class="line">帮助文档包：</span><br><span class="line">httpd-manual</span><br></pre></td></tr></table></figure>

<p>Httpd 2.2常见配置  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">httpd配置文件的组成：</span><br><span class="line">    grep &quot;Section&quot; &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">    ### Section 1: Global Environment</span><br><span class="line">    ### Section 2: &#39;Main&#39; server configuration</span><br><span class="line">    ### Section 3: Virtual Hosts</span><br><span class="line"></span><br><span class="line">配置格式： directive value</span><br><span class="line">    directive: 不区分字符大小写</span><br><span class="line">    value: 为路径时，是否区分大小写，取决于文件系统</span><br><span class="line"></span><br><span class="line">1、显示服务器版本信息</span><br><span class="line"></span><br><span class="line">	ServerTokens Major|Minor|Min[imal]|Prod[uctOnly]|OS|Full</span><br><span class="line">    </span><br><span class="line">    ServerTokens Prod[uctOnly] ：</span><br><span class="line">    	Server: Apache</span><br><span class="line"></span><br><span class="line">    ServerTokens Major: </span><br><span class="line">    	Server: Apache&#x2F;2</span><br><span class="line"></span><br><span class="line">    ServerTokens Minor: </span><br><span class="line">    	Server: Apache&#x2F;2.0</span><br><span class="line"></span><br><span class="line">    ServerTokens Min[imal]: </span><br><span class="line">    	Server: Apache&#x2F;2.0.41</span><br><span class="line"></span><br><span class="line">    ServerTokens OS: </span><br><span class="line">    	Server: Apache&#x2F;2.0.41 (Unix)</span><br><span class="line"></span><br><span class="line">    ServerTokens Full (or not specified): </span><br><span class="line">    	Server: Apache&#x2F;2.0.41 (Unix) PHP&#x2F;4.2.2 MyMod&#x2F;1.2</span><br><span class="line">    </span><br><span class="line">    建议使用：ServerTokens Prod</span><br><span class="line"></span><br><span class="line">2、修改监听的IP和Port</span><br><span class="line">	Listen [IP:]PORT</span><br><span class="line">      省略IP表示为本机所有IP</span><br><span class="line">      Listen指令至少一个，可重复出现多次</span><br><span class="line">    Listen 80</span><br><span class="line">    Listen 8080</span><br><span class="line">    </span><br><span class="line">3、 持久连接</span><br><span class="line">	Persistent Connection：连接建立，每个资源获取完成后不会断开连接，</span><br><span class="line">	而是继续等待其它的请求完成，默认关闭持久连接</span><br><span class="line">	</span><br><span class="line">	断开条件：数量限制： 100</span><br><span class="line">    </span><br><span class="line">    时间限制：以秒为单位， httpd-2.4 支持毫秒级</span><br><span class="line">	</span><br><span class="line">	副作用：对并发访问量较大的服务器，持久连接功能会使用有些请求得不到响应</span><br><span class="line">	</span><br><span class="line">	折衷：使用较短的持久连接时间</span><br><span class="line">	</span><br><span class="line">	设置： </span><br><span class="line">		KeepAlive On|Off</span><br><span class="line">        KeepAliveTimeout 15</span><br><span class="line">        MaxKeepAliveRequests 100</span><br><span class="line"></span><br><span class="line">	测试： </span><br><span class="line">		telnet WEB_SERVER_IP PORT</span><br><span class="line">		GET &#x2F;URL HTTP&#x2F;1.1</span><br><span class="line">		Host: WEB_SERVER_IP </span><br><span class="line"></span><br><span class="line">4、MPM（ Multi-Processing Module）多路处理模块</span><br><span class="line">	prefork, worker, event（试验阶段）</span><br><span class="line">	</span><br><span class="line">	httpd-2.2不支持同时编译多个模块，所以只能编译时选定一个； rpm安装的包提供三个二进制程序文件，</span><br><span class="line">	分别用于实现</span><br><span class="line">	</span><br><span class="line">	对不同MPM机制的支持</span><br><span class="line"></span><br><span class="line">	确认方法：ps aux | grep httpd</span><br><span class="line">	</span><br><span class="line">	默认为&#x2F;usr&#x2F;sbin&#x2F;httpd, 即prefork模式</span><br><span class="line"></span><br><span class="line">	查看模块列表</span><br><span class="line">	  查看静态编译的模块: httpd -l</span><br><span class="line">	  查看静态编译及动态装载的模块: httpd –M</span><br><span class="line">	  动态模块加载：不需重启即生效</span><br><span class="line">	  动态模块路径: &#x2F;usr&#x2F;lib64&#x2F;httpd&#x2F;modules&#x2F;</span><br><span class="line"></span><br><span class="line">5、 DSO： Dynamic Shared Object</span><br><span class="line">	加载动态模块配置: &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">	</span><br><span class="line">	配置指定实现模块加载格式：LoadModule &lt;mod_name&gt; &lt;mod_path&gt;</span><br><span class="line">	</span><br><span class="line">	模块文件路径可使用相对路径：相对于ServerRoot（默认&#x2F;etc&#x2F;httpd）</span><br><span class="line">    </span><br><span class="line">    示例：LoadModule auth_basic_module modules&#x2F;mod_auth_basic.so</span><br><span class="line"></span><br><span class="line">6、定义&#39;Main&#39; server的文档页面路径</span><br><span class="line">	DocumentRoot &quot;&#x2F;path&quot;</span><br><span class="line">	</span><br><span class="line">	文档路径映射：DocumentRoot指向的路径为URL路径的起始位置</span><br><span class="line">	</span><br><span class="line">	示例：DocumentRoot &quot;&#x2F;app&#x2F;data“</span><br><span class="line">	http:&#x2F;&#x2F;HOST:PORT&#x2F;test&#x2F;index.html --&gt; &#x2F;app&#x2F;data&#x2F;test&#x2F;index.html</span><br><span class="line">	</span><br><span class="line">	注意： SELinux和iptables的状态</span><br><span class="line"></span><br><span class="line">7、定义站点主页面</span><br><span class="line">	DirectoryIndex index.html index.html.var</span><br><span class="line">	</span><br><span class="line">8、站点访问控制常见机制</span><br><span class="line">	可基于两种机制指明对哪些资源进行何种访问控制</span><br><span class="line">	访问控制机制有两种：客户端来源地址，用户账号</span><br><span class="line">	</span><br><span class="line">	文件系统路径：</span><br><span class="line">        &lt;Directory “&#x2F;path&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">        &lt;File “&#x2F;path&#x2F;file”&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;&#x2F;File&gt;</span><br><span class="line"></span><br><span class="line">        &lt;FileMatch &quot;PATTERN&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;&#x2F;FileMatch&gt;</span><br><span class="line">    </span><br><span class="line">     URL路径：</span><br><span class="line">        &lt;Location &quot;&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;&#x2F;Location&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LocationMatch &quot;&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;&#x2F;LocationMatch&gt;</span><br><span class="line">      </span><br><span class="line">      示例：</span><br><span class="line">        &lt;FilesMatch &quot;\.(gif|jpe?g|png)$&quot;&gt;</span><br><span class="line">        &lt;Files “?at.*”&gt; 通配符</span><br><span class="line">        &lt;Location &#x2F;status&gt;</span><br><span class="line">        &lt;LocationMatch &quot;&#x2F;(extra|special)&#x2F;data&quot;&gt;</span><br><span class="line"></span><br><span class="line">9、&lt;Directory&gt;中“基于源地址”实现访问控制</span><br><span class="line">  	 (1) Options：后跟1个或多个以空白字符分隔的选项列表</span><br><span class="line">		在选项前的+， - 表示增加或删除指定选项</span><br><span class="line">		</span><br><span class="line">		常见选项：</span><br><span class="line">            Indexes：指明的URL路径下不存在与定义的主页面资源相符的资源文件时，返回索引列表给用户</span><br><span class="line">            FollowSymLinks：允许访问符号链接文件所指向的源文件</span><br><span class="line">            None：全部禁用</span><br><span class="line">            All： 全部允许</span><br><span class="line">        </span><br><span class="line">        示例:</span><br><span class="line">            &lt;Directory &#x2F;web&#x2F;docs&gt;</span><br><span class="line">            	Options Indexes FollowSymLinks</span><br><span class="line">            &lt;&#x2F;Directory&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;Directory &#x2F;web&#x2F;docs&#x2F;spec&gt;</span><br><span class="line">            	Options +Includes -Indexes</span><br><span class="line">            &lt;&#x2F;Directory&gt;</span><br><span class="line">	</span><br><span class="line">	(2) AllowOverride</span><br><span class="line">		与访问控制相关的哪些指令可以放在指定目录下的.htaccess（由AccessFileName指定）文件中，</span><br><span class="line">		覆盖之前的配置指令</span><br><span class="line">		</span><br><span class="line">		只对&lt;directory&gt;语句有效</span><br><span class="line">		</span><br><span class="line">		AllowOverride All: 所有指令都有效</span><br><span class="line">		</span><br><span class="line">		AllowOverride None： .htaccess 文件无效	</span><br><span class="line">		</span><br><span class="line">		AllowOverride AuthConfig Indexes 除了AuthConfig和Indexes的其它指令都无法覆盖</span><br><span class="line">		</span><br><span class="line">	(3) order和allow、deny</span><br><span class="line">		放在directory, .htaccess中</span><br><span class="line">		</span><br><span class="line">		order：定义生效次序；写在后面的表示默认法则</span><br><span class="line">            Order allow,deny</span><br><span class="line">            Order deny,allow</span><br><span class="line">		Allow from和Deny from： 定义客户端地址(IP或网段)</span><br><span class="line">            172.16.0.0</span><br><span class="line">            172.16.0.0&#x2F;16</span><br><span class="line">            172.16.0.0&#x2F;255.255.0.0</span><br><span class="line">    示例：</span><br><span class="line">    &lt;files &quot;*.txt&quot;&gt;</span><br><span class="line">        order deny,allow</span><br><span class="line">        deny from 172.16. 100.100</span><br><span class="line">        allow from 172.16</span><br><span class="line">    &lt;&#x2F;files&gt;</span><br><span class="line"> </span><br><span class="line">10、日志设定</span><br><span class="line">	错误日志：</span><br><span class="line">        ErrorLog logs&#x2F;error_log</span><br><span class="line">        LogLevel warn</span><br><span class="line">        LogLevel 可选值:debug, info, notice, warn,error, crit, alert, emerg</span><br><span class="line">    </span><br><span class="line">    访问日志：</span><br><span class="line">    定义日志格式: </span><br><span class="line">    LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; combined		使用日志格式：</span><br><span class="line">	CustomLog logs&#x2F;access_log combined</span><br><span class="line">	</span><br><span class="line">	参考帮助：http:&#x2F;&#x2F;httpd.apache.org&#x2F;docs&#x2F;2.2&#x2F;mod&#x2F;mod_log_config.html#formats</span><br><span class="line">	</span><br><span class="line">	%h 客户端IP地址</span><br><span class="line">	%l 远程用户,启用mod_ident才有效，通常为减号“-”</span><br><span class="line">	%u 验证（ basic， digest）远程用户,非登录访问时，为一个减号</span><br><span class="line">	%t 服务器收到请求时的时间</span><br><span class="line">	%r First line of request，即表示请求报文的首行；记录了此次请求的“方法”，“URL”以及协议版本</span><br><span class="line">	%&gt;s 响应状态码</span><br><span class="line">	%b 响应报文的大小，单位是字节；不包括响应报文http首部</span><br><span class="line">	%&#123;Referer&#125;i 请求报文中首部“referer”的值；即从哪个页面中的超链接跳转至当前页面的</span><br><span class="line">	%&#123;User-Agent&#125;i 请求报文中首部“User-Agent”的值；即发出请求的应用程序</span><br><span class="line">	</span><br><span class="line">11、设定默认字符集</span><br><span class="line">	AddDefaultCharset UTF-8</span><br><span class="line">	中文字符集： GBK, GB2312, GB18030</span><br><span class="line"></span><br><span class="line">12、定义路径别名</span><br><span class="line">	格式： Alias &#x2F;URL&#x2F; &quot;&#x2F;PATH&#x2F;&quot;</span><br><span class="line"></span><br><span class="line">13、基于用户的访问控制</span><br><span class="line">	认证质询： WWW-Authenticate：响应码为401，拒绝客户端请求，并说明要求客户端提供账号和密码</span><br><span class="line">	</span><br><span class="line">	认证： Authorization：客户端用户填入账号和密码后再次发送</span><br><span class="line">	</span><br><span class="line">	请求报文；认证通过时，则服务器发送响应的资源</span><br><span class="line">	</span><br><span class="line">	认证方式两种：</span><br><span class="line">        basic：明文</span><br><span class="line">        digest：消息摘要认证,兼容性差</span><br><span class="line">        </span><br><span class="line">	安全域：需要用户认证后方能访问的路径；应该通过名称对其进行标识，以便于告知用户认证的原因</span><br><span class="line">	</span><br><span class="line">	用户的账号和密码</span><br><span class="line">        虚拟账号：仅用于访问某服务时用到的认证标识</span><br><span class="line">        存储：文本文件， SQL数据库， ldap目录存储， nis等</span><br><span class="line"></span><br><span class="line">14、实现用户家目录的http共享</span><br><span class="line">	基于模块mod_userdir.so实现</span><br><span class="line">	</span><br><span class="line">	相关设置：</span><br><span class="line">	vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">    &lt;IfModule mod_userdir.c&gt;</span><br><span class="line">        #UserDir disabled</span><br><span class="line">        UserDir public_html #指定共享目录的名称</span><br><span class="line">    &lt;&#x2F;IfModule&gt;</span><br><span class="line">	</span><br><span class="line">	准备目录</span><br><span class="line">	su – wang;mkdir ~&#x2F;public_html</span><br><span class="line">	setfacl –m u:apache:x ~student</span><br><span class="line"></span><br><span class="line">	访问: http:&#x2F;&#x2F;localhost&#x2F;~wang&#x2F;index.html</span><br><span class="line">	</span><br><span class="line">15、ServerSignature On | Off | EMail</span><br><span class="line">	当客户请求的网页并不存在时，服务器将产生错误文档，缺省情况下由于打开了ServerSignature选项，错误文</span><br><span class="line">	的最后一行将包含服务器的名字、Apache的版本等信息</span><br><span class="line">	</span><br><span class="line">	如果不对外显示这些信息，就可以将这个参数设置为Off,设置为Email，将显示ServerAdmin 的Email提示</span><br><span class="line"></span><br><span class="line">16、ServerType inetd | standalone.</span><br><span class="line">    standalone 独立服务模式</span><br><span class="line">    inetd 非独立服务模式: 只适用于Unix平台88</span><br><span class="line"></span><br><span class="line">17、status页面</span><br><span class="line">	LoadModule status_module modules&#x2F;mod_status.so</span><br><span class="line">    &lt;Location &#x2F;server-status&gt;</span><br><span class="line">        SetHandler server-status</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from 172.16</span><br><span class="line">    &lt;&#x2F;Location&gt;</span><br><span class="line">	</span><br><span class="line">	ExtendedStatus On 显示扩展信息</span><br><span class="line">	</span><br><span class="line">18、虚拟主机</span><br><span class="line">	站点标识： socket</span><br><span class="line">        IP相同，但端口不同</span><br><span class="line">        IP不同，但端口均为默认端口</span><br><span class="line">        FQDN不同：</span><br><span class="line">	</span><br><span class="line">	注意：一般虚拟机不要与main主机混用；因此，要使用虚拟主机，一般先禁用main主机</span><br><span class="line">	</span><br><span class="line">	禁用方法：注释中心主机的DocumentRoot指令即可</span><br><span class="line">	</span><br><span class="line">	虚拟主机的配置方法：</span><br><span class="line">    &lt;VirtualHost IP:PORT&gt;</span><br><span class="line">        ServerName FQDN</span><br><span class="line">        DocumentRoot “&#x2F;path&quot;</span><br><span class="line">    &lt;&#x2F;VirtualHost&gt;</span><br><span class="line">	</span><br><span class="line">	建议：上述配置存放在独立的配置文件中</span><br><span class="line">	</span><br><span class="line">	其它可用指令：</span><br><span class="line">    ServerAlias：虚拟主机的别名；可多次使用</span><br><span class="line">    ErrorLog： 错误日志</span><br><span class="line">    CustomLog：访问日志</span><br><span class="line">    &lt;Directory “&#x2F;path&quot;&gt; &lt;&#x2F;Directory&gt;</span><br><span class="line">    Alias</span><br></pre></td></tr></table></figure>

<h5 id="CentOS-7-httpd程序环境"><a href="#CentOS-7-httpd程序环境" class="headerlink" title="CentOS 7 httpd程序环境"></a>CentOS 7 httpd程序环境</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rpm安装程序环境</span><br><span class="line"></span><br><span class="line">配置文件：</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;*.conf</span><br><span class="line"></span><br><span class="line">模块相关的配置文件：</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf.modules.d&#x2F;*.conf</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;httpd.service</span><br><span class="line"></span><br><span class="line">主程序文件：</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;httpd</span><br><span class="line">httpd-2.4支持MPM的动态切换</span><br><span class="line"></span><br><span class="line">日志文件：</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;httpd</span><br><span class="line">access_log：访问日志</span><br><span class="line">error_log：错误日志</span><br><span class="line"></span><br><span class="line">站点文档：</span><br><span class="line">&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line"></span><br><span class="line">模块文件路径：</span><br><span class="line">&#x2F;usr&#x2F;lib64&#x2F;httpd&#x2F;modules</span><br><span class="line"></span><br><span class="line">服务控制：</span><br><span class="line">systemctl enable|disable httpd.service</span><br><span class="line">systemctl &#123;start|stop|restart|status&#125; httpd.service</span><br></pre></td></tr></table></figure>

<p>httpd-2.4配置  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) 切换使用的MPM</span><br><span class="line">	&#x2F;etc&#x2F;httpd&#x2F;conf.modules.d&#x2F;00-mpm.conf </span><br><span class="line">	启用要启用的MPM相关的LoadModule指令即可</span><br><span class="line"></span><br><span class="line">(2)主目录：</span><br><span class="line">	DocumentRoot &#x2F;path</span><br><span class="line">	</span><br><span class="line">(3) 基于IP的访问控制:</span><br><span class="line">    无明确授权的目录，默认拒绝</span><br><span class="line">    允许所有主机访问： Require all granted</span><br><span class="line">    拒绝所有主机访问： Require all denied</span><br><span class="line">    控制特定的IP访问：</span><br><span class="line">        Require ip IPADDR：授权指定来源的IP访问</span><br><span class="line">        Require not ip IPADDR：拒绝特定的IP访问</span><br><span class="line">	控制特定的主机访问：</span><br><span class="line">        Require host HOSTNAME：授权特定主机访问</span><br><span class="line">        Require not host HOSTNAME：拒绝</span><br><span class="line"></span><br><span class="line">(4) 虚拟主机</span><br><span class="line">	基于FQDN的虚拟主机不再需要NameVirutalHost指令</span><br><span class="line">    &lt;VirtualHost *:80&gt;</span><br><span class="line">        ServerName www.b.net</span><br><span class="line">        DocumentRoot &quot;&#x2F;apps&#x2F;b.net&#x2F;htdocs&quot;</span><br><span class="line">        &lt;Directory &quot;&#x2F;apps&#x2F;b.net&#x2F;htdocs&quot;&gt;</span><br><span class="line">            Options None</span><br><span class="line">            AllowOverride None</span><br><span class="line">            Require all granted</span><br><span class="line">    	&lt;&#x2F;Directory&gt;</span><br><span class="line">    &lt;&#x2F;VirtualHost&gt;</span><br><span class="line">	</span><br><span class="line">	注意：任意目录下的页面只有显式授权才能被访问</span><br><span class="line">	</span><br><span class="line">(5) ssl:安装mod_ssl，和httpd-2.2相同配置</span><br><span class="line"></span><br><span class="line">(6) KeepAlive on</span><br><span class="line">    KeepAliveTimeout #ms 毫秒级持久连接时长定义</span><br><span class="line">    MaxKeepAliveRequests 100 </span><br><span class="line">    </span><br><span class="line">(7) 启用反向代理</span><br><span class="line">    ProxyPass &quot;&#x2F;&quot; &quot;http:&#x2F;&#x2F;www.example.com&#x2F;&quot;</span><br><span class="line">    ProxyPassReverse &quot;&#x2F;&quot; &quot;http:&#x2F;&#x2F;www.example.com&#x2F;&quot;</span><br><span class="line">	</span><br><span class="line">	特定URL反向代理</span><br><span class="line">    ProxyPass &quot;&#x2F;images&quot; &quot;http:&#x2F;&#x2F;www.example.com&#x2F;&quot;</span><br><span class="line">    ProxyPassReverse &quot;&#x2F;images&quot; http:&#x2F;&#x2F;www.example.com&#x2F;</span><br><span class="line">	</span><br><span class="line">	示例：</span><br><span class="line">    &lt;VirtualHost *&gt;</span><br><span class="line">        ServerName www.example.com</span><br><span class="line">        ProxyPass &#x2F; http:&#x2F;&#x2F;localhost:8080&#x2F;</span><br><span class="line">        ProxyPassReverse &#x2F; http:&#x2F;&#x2F;localhost:8080&#x2F;</span><br><span class="line">    &lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RPM软件包管理</title>
    <url>/2020/06/28/rpm/</url>
    <content><![CDATA[<h4 id="软件运行环境"><a href="#软件运行环境" class="headerlink" title="软件运行环境"></a>软件运行环境</h4><h5 id="一、软件运行和编译"><a href="#一、软件运行和编译" class="headerlink" title="一、软件运行和编译"></a>一、软件运行和编译</h5><p><strong>ABI： Application Binary Interface</strong></p>
<blockquote>
<p>Windows与Linux不兼容</p>
</blockquote>
<ul>
<li><p>ELF(Executable and Linkable Format)</p>
</li>
<li><p>PE（ Portable Executable）</p>
</li>
</ul>
<blockquote>
<p>库级别的虚拟化：</p>
</blockquote>
<ul>
<li>Linux: WINE</li>
<li>Windows: Cywin</li>
</ul>
<p><strong>API： Application Programming Interface</strong></p>
<p><strong>POSIX： Portable OS</strong></p>
<p>程序源代码 –&gt; 预处理 –&gt; 编译 –&gt; 汇编 –&gt; 链接</p>
<ul>
<li>静态编译： .a</li>
<li>动态编译： .so  </li>
</ul>
<h5 id="二、C程序的编译过程"><a href="#二、C程序的编译过程" class="headerlink" title="二、C程序的编译过程"></a>二、C程序的编译过程</h5><img src="/images/rpm/软件包管理2.jpg" style="zoom: 33%;" />

<h5 id="三、静态和动态链接"><a href="#三、静态和动态链接" class="headerlink" title="三、静态和动态链接"></a>三、静态和动态链接</h5><p>链接主要作用是把各个模块之间相互引用的部分处理好，使得<br>各个模块之间能够正确地衔接，分为静态链接和动态链接</p>
<ul>
<li><p>静态链接</p>
<blockquote>
<p>把程序对应的依赖库复制一份到包<br>libxxx.a<br>嵌入程序包<br>升级难，需重新编译<br>占用较多空间，迁移容易</p>
</blockquote>
</li>
<li><p>动态链接</p>
<blockquote>
<p>只把依赖加做一个动态链接<br>libxxx.so<br>“连接指向”<br>占用较少空间，升级方便<br>Glibc库（a<del>lib,b</del>lib,c<del>lib,z</del>lib）</p>
</blockquote>
</li>
</ul>
<img src="/images/rpm/软件包管理3.jpg" style="zoom:33%;" />

<ul>
<li><strong>C程序静态连接</strong></li>
</ul>
<img src="/images/rpm/12软件包管理.jpg" style="zoom: 33%;" />

<ul>
<li><strong>Java程序运行过程</strong></li>
</ul>
<img src="/images/rpm/13软件包管理.jpg" style="zoom: 33%;" />

<img src="/images/rpm/14软件包管理.jpg" style="zoom: 33%;" />

<h4 id="开发语言"><a href="#开发语言" class="headerlink" title="开发语言"></a>开发语言</h4><p><strong>系统级开发</strong><br>C<br>C++</p>
<p><strong>应用级开发</strong><br>java<br>delphi<br>Python<br>go<br>php<br>perl<br>ruby</p>
<p>同一时代的开发语言 basic,delphi,visual c++  </p>
<h4 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h4><p><strong>（1）二进制应用程序的组成部分</strong></p>
<p>二进制文件、库文件、配置文件、帮助文件</p>
<p><strong>（2）程序包管理器</strong></p>
<p>debian：deb文件, dpkg包管理器<br>redhat: rpm文件, rpm包管理器<br>rpm: Redhat Package Manager<br>RPM Package Manager</p>
<p><strong>（3）包命令</strong></p>
<p>源代码： name-VERSION.tar.gz|bz2|xz</p>
<blockquote>
<p>VERSION: major.minor.release</p>
</blockquote>
<p>rpm包命名方式：name-VERSION-release.arch.rpm</p>
<blockquote>
<p>例： bash-4.2.46-19.el7.x86_64.rpm</p>
<p>VERSION: major.minor.release</p>
<p>release： release.OS</p>
<p>常见的arch：</p>
<p>x86: i386, i486, i586, i686</p>
<p>x86_64: x64, x86_64, amd64</p>
<p>powerpc: ppc</p>
<p>跟平台无关： noarch</p>
</blockquote>
<p><strong>（4）包：分类和拆包</strong></p>
<blockquote>
<p>Application-VERSION-ARCH.rpm: 主包<br>Application-devel-VERSION-ARCH.rpm 开发子包<br>Application-utils-VERSION-ARHC.rpm 其它子包<br>Application-libs-VERSION-ARHC.rpm 其它子包</p>
</blockquote>
<p>包之间：可能存在依赖关系，甚至循环依赖</p>
<p><strong>（5）解决依赖包管理工具：</strong></p>
<blockquote>
<p><strong>yum： rpm包管理器的前端工具</strong></p>
<p><strong>apt-get： deb包管理器前端工具</strong></p>
<p><strong>zypper: suse上的rpm前端管理工具</strong></p>
<p><strong>dnf: Fedora 18+ rpm包管理器前端管理工具</strong></p>
</blockquote>
<p><strong>（6）库文件</strong></p>
<ul>
<li><p>查看二进制程序所依赖的库文件<br>ldd /PATH/TO/BINARY_FILE</p>
</li>
<li><p>管理及查看本机装载的库文件<br>ldconfig 加载库文件<br>/sbin/ldconfig -p: 显示本机已经缓存的所有可用库文件名及文件路径映射关系</p>
</li>
<li><p>配置文件：/etc/ld.so.conf, /etc/ld.so.conf.d/*.conf</p>
</li>
<li><p>缓存文件：/etc/ld.so.cache</p>
</li>
</ul>
<p><strong>（7）程序包管理器</strong>：</p>
<ul>
<li><p>功能：将编译好的应用程序的各组成文件打包一个或几个程序包文件，从而方便快捷地实现程序包的安装、卸载、查询、升级和校验等管理操作</p>
</li>
<li><p>包文件组成 (每个包独有)</p>
<blockquote>
<p>RPM包内的文件<br>RPM的元数据，如名称，版本，依赖性，描述等<br>安装或卸载时运行的脚本</p>
</blockquote>
</li>
<li><p>数据库(公共)：/var/lib/rpm</p>
<blockquote>
<p>程序包名称及版本<br>依赖关系<br>功能说明<br>包安装后生成的各文件路径及校验码信息</p>
</blockquote>
</li>
</ul>
<p><strong>（8）程序包的来源</strong></p>
<ul>
<li><p>获取程序包的途径：</p>
<blockquote>
<p>(1) 系统发版的光盘或官方的服务器；</p>
<p>CentOS镜像：<br><a href="https://www.centos.org/download/" target="_blank" rel="noopener">https://www.centos.org/download/</a><br><a href="http://mirrors.aliyun.com" target="_blank" rel="noopener">http://mirrors.aliyun.com</a><br><a href="http://mirrors.sohu.com" target="_blank" rel="noopener">http://mirrors.sohu.com</a><br><a href="http://mirrors.163.com" target="_blank" rel="noopener">http://mirrors.163.com</a></p>
<p>(2) 项目官方站点</p>
<p>(3) 第三方组织：</p>
<p>Fedora-EPEL： Extra Packages for Enterprise Linux</p>
<p>Rpmforge:RHEL推荐，包很全</p>
<p>搜索引擎：<br><a href="http://pkgs.org" target="_blank" rel="noopener">http://pkgs.org</a><br><a href="http://rpmfind.net" target="_blank" rel="noopener">http://rpmfind.net</a><br><a href="http://rpm.pbone.net" target="_blank" rel="noopener">http://rpm.pbone.net</a><br><a href="https://sourceforge.net/" target="_blank" rel="noopener">https://sourceforge.net/</a></p>
<p>测试版三个称呼：Alpha（α）内测、Beta（β）公测和Gamma（γ）候选 </p>
<p>RC：release-candidate</p>
<p>(4) 自己制作</p>
</blockquote>
</li>
</ul>
<h4 id="rpm包管理"><a href="#rpm包管理" class="headerlink" title="rpm包管理"></a>rpm包管理</h4><p>CentOS系统上使用rpm命令管理程序包：安装、卸载、升级、查询、校验、数据库</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm &#123;-i|--install&#125; [install-options] PACKAGE_FILE…</span><br><span class="line"></span><br><span class="line">-v: verbose</span><br><span class="line"></span><br><span class="line">-vv:</span><br><span class="line"></span><br><span class="line">-h: 以#显示程序包管理执行进度</span><br><span class="line"></span><br><span class="line">rpm -ivh PACKAGE_FILE ...</span><br><span class="line"></span><br><span class="line">[install-options]</span><br><span class="line">--test: 测试安装，但不真正执行安装，即dry run模式</span><br><span class="line">--nodeps：忽略依赖关系</span><br><span class="line">--replacepkgs | replacefiles</span><br><span class="line">--nosignature: 不检查来源合法性</span><br><span class="line">--nodigest：不检查包完整性 </span><br><span class="line">--noscripts：不执行程序包脚本</span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash">pre: 安装前脚本； --nopre</span></span><br><span class="line"><span class="meta">%</span><span class="bash">post: 安装后脚本； --nopost</span></span><br><span class="line"><span class="meta">%</span><span class="bash">preun: 卸载前脚本； --nopreun</span></span><br><span class="line"><span class="meta">%</span><span class="bash">postun: 卸载后脚本； --nopostun</span></span><br></pre></td></tr></table></figure>

<h5 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm &#123;-U|--upgrade&#125; [install-options] PACKAGE_FILE...</span><br><span class="line"></span><br><span class="line">rpm &#123;-F|--freshen&#125; [install-options] PACKAGE_FILE...</span><br><span class="line"></span><br><span class="line">  upgrade：安装有旧版程序包，则“升级” 如果不存在旧版程序包，则“安装”</span><br><span class="line">  </span><br><span class="line">  freshen：  安装有旧版程序包，则“升级” 如果不存在旧版程序包，则不执行升级操作</span><br><span class="line"></span><br><span class="line">rpm -Uvh PACKAGE_FILE ...</span><br><span class="line"></span><br><span class="line">rpm -Fvh PACKAGE_FILE ...</span><br><span class="line"></span><br><span class="line">  --oldpackage：降级</span><br><span class="line"></span><br><span class="line">  --force: 强制安装</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">(1) 不要对内核做升级操作；Linux支持多内核版本并存，因此，对直接安装新版本内核  </span><br><span class="line"></span><br><span class="line">(2) 如果原程序包的配置文件安装后曾被修改，升级时，新版本的提供的同一个配置文件并不会直接覆盖老版本的配置文件，而把新版本的文件重命名(FILENAME.rpmnew)后保留</span><br></pre></td></tr></table></figure>



<h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm &#123;-q|--query&#125; [select-options] [query-options]</span><br><span class="line"></span><br><span class="line">[select-options]</span><br><span class="line"></span><br><span class="line">  -a: 所有包</span><br><span class="line"></span><br><span class="line">  -f: 查看指定的文件由哪个程序包安装生成</span><br><span class="line"></span><br><span class="line">  -p rpmfile：针对尚未安装的程序包文件做查询操作</span><br><span class="line"></span><br><span class="line">  --whatprovides CAPABILITY：查询指定的CAPABILITY由哪个包所提供</span><br><span class="line"></span><br><span class="line">  --whatrequires CAPABILITY：查询指定的CAPABILITY被哪个包所依赖</span><br><span class="line"></span><br><span class="line">  rpm2cpio 包文件|cpio –itv 预览包内文件</span><br><span class="line"></span><br><span class="line">  rpm2cpio 包文件|cpio –id “*.conf” 释放包内文件</span><br><span class="line"></span><br><span class="line">[query-options]</span><br><span class="line"></span><br><span class="line">  --changelog：查询rpm包的changelog</span><br><span class="line"></span><br><span class="line">  -c: 查询程序的配置文件</span><br><span class="line"></span><br><span class="line">  -d: 查询程序的文档</span><br><span class="line"></span><br><span class="line">  -i: information</span><br><span class="line"></span><br><span class="line">  -l: 查看指定的程序包安装后生成的所有文件</span><br><span class="line"></span><br><span class="line">  --scripts：程序包自带的脚本</span><br><span class="line"></span><br><span class="line">  --provides: 列出指定程序包所提供的CAPABILITY</span><br><span class="line"></span><br><span class="line">  -R: 查询指定的程序包所依赖的CAPABILITY</span><br></pre></td></tr></table></figure>

<h5 id="包卸载"><a href="#包卸载" class="headerlink" title="包卸载"></a>包卸载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm &#123;-e|--erase&#125; [--allmatches] [--nodeps] [--noscripts] [--notriggers] [--test] PACKAGE_NAME ...</span><br></pre></td></tr></table></figure>

<h5 id="包校验"><a href="#包校验" class="headerlink" title="包校验"></a>包校验</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm &#123;-V|--verify&#125; [select-options] [verify-options]</span><br><span class="line">    S file Size differs</span><br><span class="line">    M Mode differs (includes permissions and file type)</span><br><span class="line">    5 digest (formerly MD5 sum) differs</span><br><span class="line">    D Device major&#x2F;minor number mismatch</span><br><span class="line">    L readLink(2) path mismatch</span><br><span class="line">    U User ownership differs</span><br><span class="line">    G Group ownership differs</span><br><span class="line">    T mTime differs</span><br><span class="line">    P capabilities differ</span><br><span class="line"></span><br><span class="line">包来源合法性验正及完整性验正</span><br><span class="line">    完整性验正：SHA256</span><br><span class="line">    来源合法性验正：RSA</span><br><span class="line"></span><br><span class="line">公钥加密</span><br><span class="line">    对称加密：加密、解密使用同一密钥</span><br><span class="line">    非对称加密：密钥是成对儿的</span><br><span class="line">        public key: 公钥，公开所有人</span><br><span class="line">        secret key: 私钥, 不能公开导入所需要公钥</span><br><span class="line"></span><br><span class="line">rpm -K|mchecksig rpfile 检查包的完整性和签名</span><br><span class="line"></span><br><span class="line">rpm --import &#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">CentOS 7发行版光盘提供：RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">rpm -qa “gpg-pubkey*”</span><br></pre></td></tr></table></figure>

<h5 id="rpm数据库"><a href="#rpm数据库" class="headerlink" title="rpm数据库"></a>rpm数据库</h5><blockquote>
<p>数据库重建： /var/lib/rpm</p>
<p>rpm {–initdb|–rebuilddb}<br>    initdb: 初始化<br>        如果事先不存在数据库，则新建之<br>        否则，不执行任何操作</p>
<p>rebuilddb：重建已安装的包头的数据库索引目录录</p>
</blockquote>
<h4 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h4><h5 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h5><p>Yellowdog Update Modifier，rpm的前端程序，可解决软件包相关依赖性，<br>可在多个库之间定位软件包，up2date的替代工具</p>
<p>yum repository: 存储了众多rpm包，以及包的相关的元数据文件（放置于特定目录repodata下）</p>
<p>文件服务器<br>http://<br>https://<br>ftp://<br>file://</p>
<h5 id="yum客户端配置文件"><a href="#yum客户端配置文件" class="headerlink" title="yum客户端配置文件"></a>yum客户端配置文件</h5><ul>
<li><p>/etc/yum.conf：为所有仓库提供公共配置</p>
</li>
<li><p>/etc/yum.repos.d/*.repo：为仓库的指向提供配置</p>
</li>
<li><p>仓库指向的定义：<br>[repositoryID]<br>name=Some name for this repository<br>baseurl=url://path/to/repository/<br>enabled={1|0}<br>gpgcheck={1|0}<br>gpgkey=URL<br>enablegroups={1|0}<br>failovermethod={roundrobin|priority}<br>roundrobin：意为随机挑选，默认值<br>priority:按顺序访问<br>cost= 默认为1000</p>
</li>
<li><p>repo配置文件中可用的变量</p>
<blockquote>
<p>$releasever: 当前OS的发行版的主版本号</p>
<p>$arch: 平台，i386,i486,i586,x86_64等</p>
<p>$basearch：基础平台；i386, x86_64</p>
<p>$YUM0-$YUM9:自定义变量</p>
</blockquote>
</li>
</ul>
<h5 id="yum源"><a href="#yum源" class="headerlink" title="yum源"></a>yum源</h5><ul>
<li><p>阿里云repo文件：<a href="http://mirrors.aliyun.com/repo/" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/</a></p>
</li>
<li><p>阿里云yum源：<a href="https://mirrors.aliyun.com/centos/$releasever/os/x86_64/" target="_blank" rel="noopener">https://mirrors.aliyun.com/centos/$releasever/os/x86_64/</a></p>
</li>
<li><p>阿里云EPEL源：<a href="https://mirrors.aliyun.com/epel/$releasever/x86_64" target="_blank" rel="noopener">https://mirrors.aliyun.com/epel/$releasever/x86_64</a></p>
</li>
</ul>
<h5 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h5><ol>
<li><p>显示仓库列表： yum repolist [all|enabled|disabled]</p>
</li>
<li><p>显示程序包：</p>
<blockquote>
<p>yum list<br>yum list [all | glob_exp1] [glob_exp2] […]<br>yum list {available|installed|updates} [glob_exp1] […]</p>
</blockquote>
</li>
<li><p>安装程序包：</p>
<blockquote>
<p>yum install package1 [package2] […]<br>yum reinstall package1 [package2] […] (重新安装)</p>
</blockquote>
</li>
<li><p>升级程序包：</p>
<blockquote>
<p>yum update [package1] [package2] […]<br>yum downgrade package1 [package2] […] (降级)</p>
</blockquote>
</li>
<li><p>检查可用升级：yum check-update</p>
</li>
<li><p>卸载程序包： yum remove | erase package1 [package2] […]</p>
</li>
<li><p>查看程序包信息： yum info […]</p>
</li>
<li><p>查看指定的特性(可以是某文件)是由哪个程序包所提供：<br>yum provides | whatprovides feature1 [feature2] […]</p>
</li>
<li><p>清理本地缓存：<br>清除/var/cache/yum/$basearch/$releasever缓存<br>yum clean [ packages | metadata | expire-cache | rpmdb | plugins | all  ]</p>
</li>
<li><p>构建缓存：yum makecache</p>
</li>
<li><p>搜索：yum search string1 [string2] […] 以指定的关键字搜索程序包名及summary信息</p>
</li>
<li><p>查看指定包所依赖的capabilities： yum deplist package1 [package2] […]</p>
</li>
<li><p>查看yum事务历史：</p>
<blockquote>
<p>yum history [info|list|packages-list|packages-info|<br>summary|addon-info|redo|undo|<br>rollback|new|sync|stats]<br>yum history`<br>yum history info 6<br>yum history undo 6</p>
</blockquote>
</li>
<li><p>日志 ：/var/log/yum.log</p>
</li>
<li><p>安装及升级本地程序包：</p>
<blockquote>
<p>yum localinstall rpmfile1 [rpmfile2] […]   (用install替代)<br>yum localupdate rpmfile1 [rpmfile2] […]    (用update替代)</p>
</blockquote>
</li>
<li><p>包组管理的相关命令：</p>
<blockquote>
<p>yum groupinstall group1 [group2] […]<br>yum groupupdate group1 [group2] […]<br>yum grouplist [hidden] [groupwildcard] […]<br>yum groupremove group1 [group2] […]<br>yum groupinfo group1 […]</p>
</blockquote>
</li>
<li><p>yum的命令行选项：</p>
<blockquote>
<p>–nogpgcheck：禁止进行gpg check<br>-y: 自动回答为“yes”<br>-q：静默模式<br>–disablerepo=repoidglob：临时禁用此处指定的repo<br>–enablerepo=repoidglob：临时启用此处指定的repo<br>–noplugins：禁用所有插件</p>
</blockquote>
</li>
</ol>
<h5 id="程序包编译安装"><a href="#程序包编译安装" class="headerlink" title="程序包编译安装"></a>程序包编译安装</h5><p>Application-VERSION-release.src.rpm<br>–&gt; 安装后，使用rpmbuild命令制作成二进制格式的rpm包，而后再安装</p>
<p>源代码–&gt;预处理–&gt;编译–&gt;汇编–&gt;链接–&gt;执行</p>
<p>源代码组织格式：</p>
<ol>
<li><p>多文件：文件中的代码之间，很可能存在跨文件依赖关系</p>
</li>
<li><p>C、 C++： make 项目管理器</p>
<blockquote>
<p>configure脚本 –&gt; Makefile.in –&gt; Makefile</p>
</blockquote>
</li>
<li><p>java: maven</p>
</li>
</ol>
<p>C语言源代码编译安装三步骤：</p>
<ul>
<li>./configure<br>(1) 通过选项传递参数，指定启用特性、安装路径等；执行时会参考用户的指定以及Makefile.in文件生成Makefile<br>(2) 检查依赖到的外部环境，如依赖的软件包</li>
<li>make 根据Makefile文件，构建应用程序</li>
<li>make install 复制文件到相应路径</li>
</ul>
<p>开源程序源代码的获取：</p>
<ul>
<li>官方自建站点：<pre><code>apache.org (ASF：Apache Software Foundation)
mariadb.org
...</code></pre></li>
<li>代码托管：<pre><code>SourceForge.net
Github.com
code.google.com</code></pre></li>
</ul>
<p>c/c++编译器: gcc (GNU C Complier)</p>
<h4 id="编译C源代码"><a href="#编译C源代码" class="headerlink" title="编译C源代码"></a>编译C源代码</h4><ol>
<li>准备：提供开发工具及开发环境<br>开发工具：make, gcc等<br>开发环境：开发库，头文件，glibc：标准库</li>
<li>实现：通过“包组”提供开发组件<br>​Development Tool<br>​Server Platform Development  </li>
</ol>
<h5 id="第一步：configure脚本"><a href="#第一步：configure脚本" class="headerlink" title="第一步：configure脚本"></a>第一步：configure脚本</h5><ul>
<li><p>选项：指定安装位置、指定启用的特性<br>–help: 获取其支持使用的选项</p>
</li>
<li><p>选项分类：</p>
<ol>
<li>安装路径设定：<br>–prefix=/PATH: 指定默认安装位置,默认为/usr/local/<br>–sysconfdir=/PATH：配置文件安装位置<br>System types:支持交叉编译</li>
<li>ptional Features: 可选特性<br>–disable-FEATURE<br>–enable-FEATURE[=ARG]</li>
<li>Optional Packages: 可选包<br>–with-PACKAGE[=ARG],依赖包<br>–without-PACKAGE,禁用依赖关系</li>
<li>注意：通常被编译操作依赖的程序包，需要安装此程序包的“开发”组件，<br>其包名一般类似于name-devel-VERSION</li>
</ol>
</li>
</ul>
<h5 id="第二步：make"><a href="#第二步：make" class="headerlink" title="第二步：make"></a>第二步：make</h5><h5 id="第三步：make-install"><a href="#第三步：make-install" class="headerlink" title="第三步：make install"></a>第三步：make install</h5><h5 id="第四步：安装后的配置"><a href="#第四步：安装后的配置" class="headerlink" title="第四步：安装后的配置"></a>第四步：安装后的配置</h5><p>(1) 二进制程序目录导入至PATH环境变量中</p>
<blockquote>
<p>编辑文件/etc/profile.d/NAME.sh<br>export PATH=/PATH/TO/BIN:$PATH</p>
</blockquote>
<p>(2) 导入库文件路径</p>
<blockquote>
<p>编辑/etc/ld.so.conf.d/NAME.conf 添加新的库文件所在目录至此文件中<br>让系统重新生成缓存： ldconfig [-v]</p>
</blockquote>
<p>(3) 导入头文件</p>
<blockquote>
<p>基于链接的方式实现：ln -sv</p>
</blockquote>
<p>(4) 导入帮助手册</p>
<blockquote>
<p>编辑/etc/man.config|man_db.conf文件,添加一个MANPATH</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centos6编译安装httpd-2.4</title>
    <url>/2020/06/29/httpd/</url>
    <content><![CDATA[<h4 id="centos6编译安装httpd-2-4"><a href="#centos6编译安装httpd-2-4" class="headerlink" title="centos6编译安装httpd-2.4"></a>centos6编译安装httpd-2.4</h4><h5 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h5><blockquote>
<p>APR(Apache portable Run-time libraries， Apache可移植运行库) 主要为上层的应用程序提供一个可以跨越多操作系统平台使用的底层支持接口库。在早期的Apache版本中，应用程序本身必须能够处理各种具体操作系统平台的细节，并针对不同的平台调用不同的处理函数</p>
<p>随着Apache的进一步开发， Apache组织决定将这些通用的函数独立出来并发展成为一个新的项目。这样， APR的开发就从Apache中独立出来， Apache仅仅是使用 APR而已。目前APR主要还是由Apache使用，由于APR的较好的移植性，因此一些需要进行移植的C程序也开始使用APR，开源项目比如用于服务器压力测试的Flood loader tester， 该项目不仅仅适用于Apache， <a href="http://httpd.apache.org/test/flood" target="_blank" rel="noopener">http://httpd.apache.org/test/flood</a>  </p>
</blockquote>
<h5 id="编译前准备"><a href="#编译前准备" class="headerlink" title="编译前准备"></a>编译前准备</h5><ol>
<li><p>httpd2.4依赖的apr版本（apr-1.4.8+），而centos6上的apr版本（apr-1.3.9），所以在centos6上需要重新编译安装httpd2.4</p>
</li>
<li><p>下载相关源码包</p>
<blockquote>
<p>http2.4.29.tar.bz2   </p>
<p>APR 1.6.3.tar.bz2  </p>
<p>APR-util 1.6.1.tar.bz2</p>
</blockquote>
</li>
<li><p>准备开发环境相关包组</p>
<blockquote>
<p>开发包组：Development Tools<br>相关包： pcre-devel openssl-devel expat-devel </p>
</blockquote>
</li>
</ol>
<h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建存放源码目录，便于管理</span><br><span class="line">[root@centos6 ~]# mkdir &#x2F;usr&#x2F;local&#x2F;src&#x2F;httpd2.4</span><br><span class="line">[root@centos6 src]# cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;httpd2.4</span><br><span class="line">[root@centos6 http2.4]# ls</span><br><span class="line">apr-1.6.3.tar.bz2  apr-util-1.6.1.tar.bz2  httpd-2.4.29.tar.bz2</span><br><span class="line"></span><br><span class="line">#安装开发环境包组</span><br><span class="line">[root@centos6 httpd2.4]# yum groupinstall &quot;development tools&quot; -y</span><br><span class="line">[root@centos6 httpd2.4]# yum install openssl-devel pcre-devel expat-devel -y</span><br><span class="line"></span><br><span class="line">#编译安装</span><br><span class="line">[root@centos6 httpdd2.4]#tar xvf apr-1.6.3.tar.bz2</span><br><span class="line">[root@centos6 httpd2.4]#tar xvf apr-utl-1.6.1.tar.bz2</span><br><span class="line">[root@centos6 httpd2.4]#tar xvf httpd-2.4.29.tar.bz2</span><br><span class="line">[root@centos6 httpd2.4]# ls</span><br><span class="line">apr-1.6.3          apr-util-1.6.1          httpd-2.4.29</span><br><span class="line">apr-1.6.3.tar.bz2  apr-util-1.6.1.tar.bz2  httpd-2.4.29.tar.bz2</span><br><span class="line"></span><br><span class="line">#编译安装apr</span><br><span class="line">[root@centos6 httpd2.4]#cd apr-1.6.3</span><br><span class="line">[root@centos6 apr-1.6.3]# .&#x2F;configure -prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;apr</span><br><span class="line">[root@centos6 apr-1.6.3]# make -j 4 &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">#编译安装apr-util</span><br><span class="line">[root@centos6 httpd2.4]# cd apr-util-1.6.1</span><br><span class="line">[root@centos6 apr-util-1.6.1]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;apr-util --with-apr&#x3D;&#x2F;usr&#x2F;local&#x2F;apr</span><br><span class="line">[root@centos6 apr-util-1.6.1]# make -j 4 &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">#编译安装httpd2.4</span><br><span class="line">[root@centos6 httpd-2.4.29]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;http2.4 \</span><br><span class="line">&gt; --enable-so \</span><br><span class="line">&gt; --enable-ssl \</span><br><span class="line">&gt; --enable-cgi \</span><br><span class="line">&gt; --enable-rewrite \</span><br><span class="line">&gt; --with-zlib \</span><br><span class="line">&gt; --with-pcre \</span><br><span class="line">&gt; --with-apr&#x3D;&#x2F;usr&#x2F;local&#x2F;apr \</span><br><span class="line">&gt; --with-apr-util&#x3D;&#x2F;usr&#x2F;local&#x2F;apr-util \</span><br><span class="line">&gt; --enable-modules&#x3D;most \</span><br><span class="line">&gt; --enable-mpms-shared&#x3D;all \</span><br><span class="line">&gt; --with-mpm&#x3D;prefork </span><br><span class="line"></span><br><span class="line">[root@centos6 httpd-2.4.29]# make -j 4 &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">#添加环境变量</span><br><span class="line">[root@centos6 bin]# echo &#39;PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;http2.4&#x2F;bin:$PATH&#39; &gt; &#x2F;etc&#x2F;profile.d&#x2F;env.sh</span><br><span class="line">[root@centos6 bin]# source &#x2F;etc&#x2F;profile.d&#x2F;env.sh</span><br><span class="line"></span><br><span class="line">#创建用于程序运行的用户和组</span><br><span class="line">[root@centos6 bin]# useradd -r -s &#x2F;sbin&#x2F;nologin apache</span><br><span class="line"></span><br><span class="line">#修改配置文件</span><br><span class="line">[root@centos6 httpd-2.4.29]# vim &#x2F;usr&#x2F;local&#x2F;http2.4&#x2F;conf&#x2F;httpd.conf </span><br><span class="line">User daemon 修改为 apache  </span><br><span class="line">Group daemon 修改为 apache</span><br><span class="line"></span><br><span class="line">#启动服务</span><br><span class="line">[root@centos6 bin]#apachectl start</span><br><span class="line"></span><br><span class="line">#查看监听端口和进程</span><br><span class="line">[root@centos6 ~]# ss -ntl|grep 80</span><br><span class="line">LISTEN     0      128                      :::80                      :::* </span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ps -ef|grep httpd</span><br><span class="line">root      37105      1  0 10:45 ?        00:00:00 &#x2F;usr&#x2F;local&#x2F;http2.4&#x2F;bin&#x2F;httpd -k start</span><br><span class="line">apache    37261  37105  0 10:54 ?        00:00:00 &#x2F;usr&#x2F;local&#x2F;http2.4&#x2F;bin&#x2F;httpd -k start</span><br><span class="line">apache    37262  37105  0 10:54 ?        00:00:00 &#x2F;usr&#x2F;local&#x2F;http2.4&#x2F;bin&#x2F;httpd -k start</span><br><span class="line">apache    37263  37105  0 10:54 ?        00:00:00 &#x2F;usr&#x2F;local&#x2F;http2.4&#x2F;bin&#x2F;httpd -k start</span><br><span class="line">apache    37264  37105  0 10:54 ?        00:00:00 &#x2F;usr&#x2F;local&#x2F;http2.4&#x2F;bin&#x2F;httpd -k start</span><br><span class="line">apache    37265  37105  0 10:54 ?        00:00:00 &#x2F;usr&#x2F;local&#x2F;http2.4&#x2F;bin&#x2F;httpd -k start</span><br></pre></td></tr></table></figure>

<h5 id="自定义开机启动脚本"><a href="#自定义开机启动脚本" class="headerlink" title="自定义开机启动脚本"></a>自定义开机启动脚本</h5>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加开机自启动脚本方法一：</span></span><br><span class="line">echo "/usr/local/http2.4/bin/apachectl start" &gt; /etc/rc.d/rc.local</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash">添加开机自启动脚本方法二：</span></span><br><span class="line">vim /etc/rc.d/init.d/http2.4</span><br><span class="line">    #!/bin/bash</span><br><span class="line">    #</span><br><span class="line">    #startup script for the Apache HTTP Server</span><br><span class="line">    #chkconfig: - 85 15</span><br><span class="line">    #config: /etc/httpd/conf/httpd.conf</span><br><span class="line">    #config: /etc/sysconfig/httpd</span><br><span class="line"></span><br><span class="line">    # Source function library.</span><br><span class="line">   . /etc/rc.d/init.d/functions</span><br><span class="line">   </span><br><span class="line">   if [ -f /etc/sysconfig/httpd ]; then</span><br><span class="line">           . /etc/sysconfig/httpd</span><br><span class="line">   fi</span><br><span class="line">   </span><br><span class="line">   HTTPD_LANG=$&#123;HTTPD_LANG-"C"&#125;</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> the httpd script</span></span><br><span class="line">   apachectl=/usr/local/http2.4/apachectl</span><br><span class="line">   httpd=$&#123;HTTPD-/usr/local/http2.4/bin/httpd&#125;</span><br><span class="line">   prog=httpd</span><br><span class="line">   pidfile=$&#123;PIDFILE-/usr/local/http2.4/logs/httpd.pid&#125;</span><br><span class="line">   lockfile=$&#123;LOCKFILE-/var/lock/subsys/http2.4&#125;</span><br><span class="line">   RETVAL=0</span><br><span class="line">   STOP_TIMEOUT=$&#123;STOP_TIMEOUT-10&#125;</span><br><span class="line">   </span><br><span class="line">   start() &#123;</span><br><span class="line">           echo -n $"Starting $prog: "</span><br><span class="line">           LANG=$HTTPD_LANG daemon --pidfile=$&#123;pidfile&#125; $httpd $OPTIONS</span><br><span class="line">           RETVAL=$?</span><br><span class="line">           echo</span><br><span class="line">           [ $RETVAL = 0 ] &amp;&amp; touch $&#123;lockfile&#125;</span><br><span class="line">           return $RETVAL</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   stop() &#123;</span><br><span class="line">   	status -p $&#123;pidfile&#125; $httpd &gt; /dev/null</span><br><span class="line">   	if [[ $? = 0 ]]; then</span><br><span class="line">   		echo -n $"Stopping $prog: "</span><br><span class="line">   		killproc -p $&#123;pidfile&#125; -d $&#123;STOP_TIMEOUT&#125; $httpd</span><br><span class="line">   	else</span><br><span class="line">   		echo -n $"Stopping $prog: "</span><br><span class="line">   		success</span><br><span class="line">   	fi</span><br><span class="line">   	RETVAL=$?</span><br><span class="line">   	echo</span><br><span class="line">   	[ $RETVAL = 0 ] &amp;&amp; rm -f $&#123;lockfile&#125; $&#123;pidfile&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   reload() &#123;</span><br><span class="line">       echo -n $"Reloading $prog: "</span><br><span class="line">       if ! LANG=$HTTPD_LANG $httpd $OPTIONS -t &gt;&amp;/dev/null; then</span><br><span class="line">           RETVAL=6</span><br><span class="line">           echo $"not reloading due to configuration syntax error"</span><br><span class="line">           failure $"not reloading $httpd due to configuration syntax error"</span><br><span class="line">       else</span><br><span class="line">           # Force LSB behaviour from killproc</span><br><span class="line">           LSB=1 killproc -p $&#123;pidfile&#125; $httpd -HUP</span><br><span class="line">           RETVAL=$?</span><br><span class="line">           if [ $RETVAL -eq 7 ]; then</span><br><span class="line">               failure $"httpd shutdown"</span><br><span class="line">           fi</span><br><span class="line">       fi</span><br><span class="line">       echo</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   case "$1" in</span><br><span class="line">     start)</span><br><span class="line">   	start</span><br><span class="line">   	;;</span><br><span class="line">     stop)</span><br><span class="line">   	stop</span><br><span class="line">   	;;</span><br><span class="line">     status)</span><br><span class="line">           status -p $&#123;pidfile&#125; $httpd</span><br><span class="line">   	RETVAL=$?</span><br><span class="line">   	;;</span><br><span class="line">     restart)</span><br><span class="line">   	stop</span><br><span class="line">   	start</span><br><span class="line">   	;;</span><br><span class="line">     condrestart|try-restart)</span><br><span class="line">   	if status -p $&#123;pidfile&#125; $httpd &gt;&amp;/dev/null; then</span><br><span class="line">   		stop</span><br><span class="line">   		start</span><br><span class="line">   	fi</span><br><span class="line">   	;;</span><br><span class="line">     force-reload|reload)</span><br><span class="line">           reload</span><br><span class="line">   	;;</span><br><span class="line">     graceful|help|configtest|fullstatus)</span><br><span class="line">   	$apachectl $@</span><br><span class="line">   	RETVAL=$?</span><br><span class="line">   	;;</span><br><span class="line">     *)</span><br><span class="line">   	echo $"Usage: $prog &#123;start|stop|restart|condrestart|try-restart|force-reload|reload|status|fullstatus|graceful|help|configtest&#125;"</span><br><span class="line">   	RETVAL=2</span><br><span class="line">   esac</span><br><span class="line">   </span><br><span class="line">   exit $RETVAL</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>https</title>
    <url>/2020/06/29/https/</url>
    <content><![CDATA[<h5 id="https"><a href="#https" class="headerlink" title="https"></a>https</h5><blockquote>
<p>http over ssl</p>
<p>SSL会话的简化过程<br>(1) 客户端发送可供选择的加密方式，并向服务器请求证书<br>(2) 服务器端发送证书以及选定的加密方式给客户端<br>(3) 客户端取得证书并进行证书验证</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 如果信任给其发证书的CA<br>(a) 验证证书来源的合法性；用CA的公钥解密证书上数字签名<br>(b) 验证证书的内容的合法性：完整性验证<br>(c) 检查证书的有效期限<br>(d) 检查证书是否被吊销<br>(e) 证书中拥有者的名字，与访问的目标主机要一致</li>
</ul>
<p>(4) 客户端生成临时会话密钥（对称密钥），并使用服务器端的公钥加密此数据发送给服务器，完成密钥交换<br>(5) 服务用此密钥加密用户请求的资源，响应给客户端</p>
<p>注意： SSL是基于IP地址实现,单IP的主机仅可以使用一个https虚拟主机  </p>
</blockquote>
<h5 id="https实现"><a href="#https实现" class="headerlink" title="https实现"></a>https实现</h5><p>(1) 为服务器申请数字证书</p>
<blockquote>
<p>测试：通过私建CA发证书<br>(a) 创建私有CA<br>(b) 在服务器创建证书签署请求<br>(c) CA签证</p>
</blockquote>
<p>(2) 配置httpd支持使用ssl，及使用的证书</p>
<blockquote>
<p>yum -y install mod_ssl<br>配置文件： /etc/httpd/conf.d/ssl.conf<br>DocumentRoot<br>ServerName<br>SSLCertificateFile<br>SSLCertificateKeyFile</p>
</blockquote>
<p>(3) 测试基于https访问相应的主机</p>
<blockquote>
<p>openssl s_client [-connect host:port] [-cert filename] [-CApath directory] [-CAfile filename]  </p>
</blockquote>
<h5 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h5><blockquote>
<p>HTTP Strict Transport Security</p>
<p>服务器端配置支持HSTS后，会在给浏览器返回的HTTP首部中携带HSTS字段。浏览器获取到该信息后，会将所有HTTP访问请求在内部做307跳转到HTTPS。而无需任何网络过程</p>
</blockquote>
<h5 id="HSTS-preload-list"><a href="#HSTS-preload-list" class="headerlink" title="HSTS preload list"></a>HSTS preload list</h5><blockquote>
<p>是Chrome浏览器中的HSTS预载入列表，在该列表中的网站，使用Chrome浏览器访问时，会自动转换成HTTPS。 Firefox、 Safari、Edge浏览器也会采用这个列表</p>
<p>实现HSTS示例<br>vim /etc/httpd/conf/httpd.conf<br>Header always set Strict-Transport-Security “maxage=31536000”<br>RewriteEngine on<br>RewriteRule ^(/.*)$ https://%{HTTP_HOST}$1 [redirect=302]  </p>
</blockquote>
<h5 id="基于httpd实现https应用"><a href="#基于httpd实现https应用" class="headerlink" title="基于httpd实现https应用"></a>基于httpd实现https应用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">准备两台服务器</span><br><span class="line">node1: webserver (centos 6)</span><br><span class="line">node2: caserver	 (centos 7)</span><br><span class="line"></span><br><span class="line">1. ca自签名</span><br><span class="line">[root@ca CA]#cd &#x2F;etc&#x2F;pki&#x2F;CA</span><br><span class="line">[root@ca CA]#touch index.txt</span><br><span class="line">[root@ca CA]#echo 01 &gt; serial </span><br><span class="line">#创建CA私钥</span><br><span class="line">[root@ca CA]#(umask 077;openssl genrsa -out private&#x2F;cakey.pem 2048) </span><br><span class="line">#自颁发证书</span><br><span class="line">[root@ca CA]# openssl req -new -x509 -key private&#x2F;cakey.pem -out cacert.pem -days 3650</span><br><span class="line"></span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#39;.&#39;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN        国家</span><br><span class="line">State or Province Name (full name) []:GD   省名称</span><br><span class="line">Locality Name (eg, city) [Default City]:gz    城市名称</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:example.com 公司</span><br><span class="line">Organizational Unit Name (eg, section) []:ca      部门</span><br><span class="line">Common Name (eg, your name or your server&#39;s hostname) []:ca.example.com 申请者</span><br><span class="line">Email Address []:</span><br><span class="line"></span><br><span class="line">2. web端准备证书申请</span><br><span class="line">#创建存放ssl证书目录</span><br><span class="line">[root@websrvs conf.d]# mkdir &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;ssl</span><br><span class="line">[root@websrvs conf.d]# cd &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;ssl</span><br><span class="line"></span><br><span class="line">#创建私钥和证书申请文件</span><br><span class="line">[root@websrvs ssl]# (umask 077;openssl genrsa -out httpd.key)</span><br><span class="line">[root@websrvs ssl]# openssl req -new -key httpd.key -out httpd.csr</span><br><span class="line"></span><br><span class="line">#将证书申请文件发送给Ca签名</span><br><span class="line">[root@websrvs ssl]# scp httpd.csr caserver_IP:&#x2F;etc&#x2F;pki&#x2F;CA</span><br><span class="line"></span><br><span class="line">3. CA签证并将证书文件发送给web端</span><br><span class="line">#签证</span><br><span class="line">[root@ca CA]# openssl ca -in httpd.csr  -out certs&#x2F;httpd.crt -days 360</span><br><span class="line">#将自签名证书和签署证书传回给web服务器</span><br><span class="line">[root@ca CA]# scp certs&#x2F;httpd.crt webserver_IP:&#x2F;etc&#x2F;http&#x2F;conf.d&#x2F;ssl</span><br><span class="line">[root@ca CA]# scp cacert.pem 192.168.68.138:&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;ssl</span><br><span class="line"></span><br><span class="line">4. 配置httpd服务实现https</span><br><span class="line">#安装支持ssl模块</span><br><span class="line">[root@websrvs ssl]# yum -y install mod_ssl</span><br><span class="line">#修改httpd配置文件的默认证书目录</span><br><span class="line">[root@centos6 ssl]#vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;ssl.conf</span><br><span class="line">Listen 443   https侦听端口</span><br><span class="line">ServerName  www.a.com:443  网站域名</span><br><span class="line">SSLCertificateFile  &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;ssl&#x2F;httpd.crt  证书文件</span><br><span class="line">SSLCertificateKeyFile &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;ssl&#x2F;httpd.key 私钥文件</span><br><span class="line">SSLCACertificatefile &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;ssl&#x2F;cacert.pem CA证书文件</span><br><span class="line"></span><br><span class="line">5.重启httpd服务并查看监听端口 </span><br><span class="line">[root@websrvs ssl]# service httpd restart</span><br><span class="line">[root@websrvs ssl]# ss -ntl|grep 443</span><br><span class="line">LISTEN     0      128                      :::443                     :::*   </span><br><span class="line"></span><br><span class="line">6.客户端进行测试</span><br><span class="line">openssl s_client [-connect host:port] [-cert filename] [-CApath directory] [-CAfile filename]</span><br><span class="line">#示例</span><br><span class="line">[root@centos7 ~]#curl -k https:&#x2F;&#x2F;www.a.com  忽略证书检查</span><br><span class="line">[root@centos7 ~]#openssl s_client -connect www.a.com:443</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（二）</title>
    <url>/2020/06/25/mysql2/</url>
    <content><![CDATA[<h4 id="一、SQL概述"><a href="#一、SQL概述" class="headerlink" title="一、SQL概述"></a>一、SQL概述</h4><h5 id="常见组件"><a href="#常见组件" class="headerlink" title="常见组件"></a><strong>常见组件</strong></h5><p>数据库： database</p>
<p>表： table<br>• 行： row<br>• 列： column</p>
<p>索引： index</p>
<p>视图： view</p>
<p>用户： user</p>
<p>权限： privilege</p>
<p>存储过程： procedure，无返回值</p>
<p>存储函数： function，有返回值</p>
<p>触发器： trigger</p>
<p>事件调度器： event scheduler，任务计划  </p>
<p>命名规则：<br>• 必须以字母开头<br>• 可包括数字和三个特殊字符（ # _ $）<br>• 不要使用MySQL的保留字<br>• 同一database(Schema)下的对象不能同名  </p>
<h5 id="SQL语言的兴起与语法标准"><a href="#SQL语言的兴起与语法标准" class="headerlink" title="SQL语言的兴起与语法标准"></a><strong>SQL语言的兴起与语法标准</strong></h5><blockquote>
<p>20世纪70年代， IBM开发出SQL，用于DB2</p>
<p>1981年， IBM推出SQL/DS数据库</p>
<p>业内标准微软和Sybase的T-SQL， Oracle的PL/SQL</p>
<p>SQL作为关系型数据库所使用的标准语言，最初是基于IBM的实现在1986年被批准的。 1987年，“国际标准化组织(ISO)”把ANSI(美国国家标准化组织) SQL作为国际标准。</p>
<p>SQL： ANSI SQL, SQL-86, SQL-89, SQL-92, SQL-99, SQL-03  </p>
</blockquote>
<h5 id="SQL语言规范"><a href="#SQL语言规范" class="headerlink" title="SQL语言规范"></a><strong>SQL语言规范</strong></h5><blockquote>
<p>在数据库系统中， SQL语句不区分大小写(建议用大写)</p>
<p>字符串常量区分大小写</p>
<p>SQL语句可单行或多行书写，以“;”结尾</p>
<p>关键词不能跨多行或简写</p>
<p>用空格和缩进来提高语句的可读性</p>
<p>子句通常位于独立行，便于编辑，提高可读性</p>
<p>注释：<br>SQL标准：<br>• /<em>注释内容</em>/ 多行注释<br>• – 注释内容 单行注释，注意有空格<br>MySQL注释：#</p>
</blockquote>
<h5 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a><strong>SQL语句分类</strong></h5><p>DDL: Data Defination Language<br>• CREATE, DROP, ALTER</p>
<p>DML: Data Manipulation Language<br>• INSERT, DELETE, UPDATE</p>
<p>DCL： Data Control Language<br>•GRANT, REVOKE</p>
<p>DQL： Data Query Language<br>•SELECT  </p>
<h5 id="SQL语句构成"><a href="#SQL语句构成" class="headerlink" title="SQL语句构成"></a><strong>SQL语句构成</strong></h5><blockquote>
<p>SQL语句构成：keyword组成clause，多条clause组成语句</p>
<p>示例：<br>•SELECT * SELECT子句<br>•FROM products FROM子句<br>•WHERE price&gt;400 WHERE子句</p>
<p>说明：此为一组SQL语句，由三个子句构成，SELECT,FROM和WHERE都是关键字  </p>
</blockquote>
<h5 id="SQL数据类型"><a href="#SQL数据类型" class="headerlink" title="SQL数据类型"></a>SQL数据类型</h5><p>数据长什么样？</p>
<p>数据需要多少空间来存放？</p>
<p>系统内置数据类型和用户定义数据类型</p>
<p>MySql支持多种列类型：</p>
<blockquote>
<p>数值类型</p>
<p>日期/时间类型</p>
<p>字符串(字符)类型</p>
<p>选择正确的数据类型对于获得高性能至关重要，三大原则：<br>1、更小的通常更好，尽量使用可正确存储数据的最小数据类型<br>2、简单就好，简单数据类型的操作通常需要更少的CPU周期<br>3、尽量避免NULL，包含为NULL的列，对MySQL更难优化  </p>
</blockquote>
<p>整型</p>
<blockquote>
<p>tinyint(m) 1个字节 范围(-128—127)<br>smallint(m) 2个字节 范围(-32768—32767)<br>mediumint(m) 3个字节 范围(-8388608—8388607)<br>int(m) 4个字节 范围(-2147483648—2147483647)<br>bigint(m) 8个字节 范围(+-9.22*10的18次方)</p>
<p>取值范围如果加了unsigned，则最大值翻倍，如tinyint unsigned<br>的取值范围为(0~255)</p>
<p>int(m)里的m是表示SELECT查询结果集中的显示宽度，并不影响实际的取值范围，规定了MySQL的一些交互工具（例如MySQL命令行客户端）用来显示字符的个数。对于存储和计算来说， Int(1)和Int(20)是相同的</p>
<p>BOOLEAN：布尔型， 是TINYINT(1)的同义词。zero值被视为假。非zero值视为真 </p>
</blockquote>
<p>浮点型(float和double)，近似值</p>
<blockquote>
<p>float(m,d) 单精度浮点型 8位精度(4字节) m总个数， d小数</p>
<p>double(m,d) 双精度浮点型16位精度(8字节) m总个数， d小数位</p>
<p>设一个字段定义为float(6,3)，如果插入一个数123.45678,实际数据库里存的是123.457，但总个数还以实际为准，即6位  </p>
</blockquote>
<p>定点数</p>
<blockquote>
<p>在数据库中存放的是精确值,存为十进制</p>
<p>decimal(m,d) 参数m&lt;65 是总个数， d&lt;30且 d&lt;m 是小数位</p>
<p>MySQL5.0和更高版本将数字打包保存到一个二进制字符串中（每4个字节存9个数字）。例如， decimal(18,9)小数点两边将各存储9个数字，一共使用9个字节：小数点前的数字用4个字节，小数点后的数字用4个字节，小数点本身占1个字节</p>
<p>浮点类型在存储同样范围的值时，通常比decimal使用更少的空间。 float使用4个字节存储。 double占用8个字节</p>
<p>因为需要额外的空间和计算开销，所以应该尽量只在对小数进行精确计算时才使用decimal——例如存储财务数据。但在数据量比较大的时候，可以考虑使用big  </p>
</blockquote>
<p>字符串(char,varchar,_text)</p>
<blockquote>
<p>char(n) 固定长度，最多255个字符</p>
<p>varchar(n)可变长度，最多65535个字符</p>
<p>tinytext可变长度，最多255个字符</p>
<p>text 可变长度，最多65535个字符</p>
<p>mediumtext 可变长度，最多2的24次方-1个字符</p>
<p>longtext可变长度，最多2的32次方-1个字符</p>
<p>BINARY(M) 固定长度，可存二进制或字符，长度为0-M字节</p>
<p>VARBINARY(M) 可变长度，可存二进制或字符，允许长度为0-M字节</p>
<p>内建类型： ENUM枚举, SET集合  </p>
<p>char和varchar：<br>• char(n) 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以char类型存储的字符串末尾不能有空格， varchar不限于此。<br>• char(n) 固定长度， char(4)不管是存入几个字符，都将占用4个字节<br>• varchar是存入的实际字符数+1个字节（ n&lt; n&gt;255)，所以varchar(4),存入3个字符将占用4个字节。<br>• char类型的字符串检索速度要比varchar类型的快</p>
<p>varchar和text：<br>• varchar可指定n，text不能指定，内部存储varchar是存入的实际字符数+1个字节（ n&lt; n&gt;255)， text是实际字符数+2个字节。<br>• text类型不能有默认值<br>• varchar可直接创建索引，text创建索引要指定前多少个字符。<br>• varchar查询速度快于text  </p>
</blockquote>
<p>二进制数据： BLOB</p>
<blockquote>
<p>BLOB和text存储方式不同， TEXT以文本方式存储，英文存储区分大小写，而Blob是以二进制方式存储，不分大小写</p>
<p>BLOB存储的数据只能整体读出</p>
<p>TEXT可以指定字符集， BLOB不用指定字符集</p>
</blockquote>
<p>日期时间类型</p>
<blockquote>
<p>date 日期 ‘2008-12-2’</p>
<p>time 时间 ‘12:25:36’</p>
<p>datetime 日期时间 ‘2008-12-2 22:06:44’</p>
<p>timestamp 自动存储记录修改时间</p>
<p>YEAR(2), YEAR(4)：年份</p>
<p>timestamp字段里的时间数据会随其他字段修改的时候自动刷新，这个数据类型的字段可以存放这条记录最后被修改的时间  </p>
</blockquote>
<p>所有类型</p>
<blockquote>
<p>NULL 数据列可包含NULL值<br>NOT NULL 数据列不允许包含NULL值<br>DEFAULT 默认值<br>PRIMARY KEY 主键<br>UNIQUE KEY 唯一键<br>CHARACTER SET name 指定一个字符集</p>
</blockquote>
<p>数值型</p>
<blockquote>
<p>AUTO_INCREMENT 自动递增，适用于整数类型</p>
<p>UNSIGNED 无符号  </p>
</blockquote>
<h4 id="二、SQL语句"><a href="#二、SQL语句" class="headerlink" title="二、SQL语句"></a>二、SQL语句</h4><h5 id="1、DDL"><a href="#1、DDL" class="headerlink" title="1、DDL"></a>1、DDL</h5><p><strong>数据库操作</strong></p>
<p>创建数据库<br>CREATE DATABASE|SCHEMA [IF NOT EXISTS] ‘DB_NAME’;<br>• CHARACTER SET ‘character set name’<br>•COLLATE ‘collate name’</p>
<p>删除数据库<br>DROP DATABASE|SCHEMA [IF EXISTS] ‘DB_NAME’;</p>
<p>查看支持所有字符集： SHOW CHARACTER SET;</p>
<p>查看支持所有排序规则： SHOW COLLATION;</p>
<p>获取命令使用帮助：<br>mysql&gt; HELP KEYWORD;</p>
<p>查看数据库列表：<br>mysql&gt; SHOW DATABASES;  </p>
<p><strong>表操作</strong> </p>
<p>表：二维关系</p>
<p>设计表：遵循规范</p>
<p>定义：字段，索引<br>• 字段：字段名，字段数据类型，修改符<br>• 约束，索引：应该创建在经常用作查询条件的字段上  </p>
<p>创建表： CREATE TABLE</p>
<blockquote>
<p>(1) 直接创建</p>
<p>(2) 通过查询现存表创建；新表会被直接插入查询而来的数据<br>CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name [(create_definition,…)]  [table_options] [partition_options] select_statement</p>
</blockquote>
<blockquote>
<p>(3) 通过复制现存的表的表结构创建，但不复制数据<br>CREATE [TEMPORARY] TABLE [IF NOT EXISTS]<br>tbl_name { LIKE old_tbl_name | (LIKE old_tbl_name) }</p>
<p>(4) CREATE TABLE [IF NOT EXISTS] ‘tbl_name’ (col1 type1修饰符,col2 type2 修饰符, …)</p>
<p>字段信息<br>• col type1<br>• PRIMARY KEY(col1,…)<br>• INDEX(col1, …)<br>• UNIQUE KEY(col1, …)</p>
<p>表选项：<br>• ENGINE [=] engine_name<br>• ROW_FORMAT [=]<br>{DEFAULT|DYNAMIC|FIXED|COMPRESSED|REDUNDANT|COMPACT}</p>
<p>注意：<br>• Storage Engine是指表类型，也即在表创建时指明其使用的存储引擎，<br>• 同一库中不同表可以使用不同的存储引擎<br>• 同一个库中表建议要使用同一种存储引擎类</p>
</blockquote>
<p>删除表：DROP TABLE [IF EXISTS] ‘tbl_name’;</p>
<p>修改表：ALTER TABLE ‘tbl_name’</p>
<blockquote>
<p>添加字段： add<br>ADD col1 data_type [FIRST|AFTER col_name]</p>
<p>删除字段： drop</p>
<p>修改字段：<br>alter（默认值） , change（字段名） , modify（字段属性）</p>
<p>添加索引： add index</p>
<p>删除索引: drop index</p>
<p>查看表上的索引： SHOW INDEXES FROM [db_name.]tbl_name;</p>
<p>查看帮助： Help ALTER TABLE  </p>
<p>修改表示例：<br>ALTER TABLE students ADD gender ENUM(‘m’,’f’)</p>
<p>ALETR TABLE students CHANGE id sid int UNSIGNED NOT NULL PRIMARY KEY;</p>
<p>ALTER TABLE students ADD UNIQUE KEY(name);</p>
<p>ALTER TABLE students ADD INDEX(age);</p>
<p>DESC students;</p>
<p>SHOW INDEXES FROM students;</p>
<p>ALTER TABLE students DROP age;  </p>
</blockquote>
<p>查看表</p>
<blockquote>
<p>查看所有的引擎： SHOW ENGINES<br>查看表： SHOW TABLES [FROM db_name]<br>查看表结构： DESC [db_name.]tb_name<br>查看表创建命令： SHOW CREATE TABLE tbl_name<br>查看表状态： SHOW TABLE STATUS LIKE ‘tbl_name’<br>查看库中所有表状态： SHOW TABLE STATUS FROM db_name  </p>
</blockquote>
<p>获取帮助： mysql&gt; HELP CREATE TABLE;  </p>
<h5 id="2、DML"><a href="#2、DML" class="headerlink" title="2、DML"></a>2、DML</h5><p><strong>增、删、改、查</strong></p>
<p><strong>INSERT（增）</strong></p>
<blockquote>
<p>INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]<br>• [[INTO] tbl_name [(col_name,…)]<br>• {VALUES | VALUE} ({expr | DEFAULT},…),(…),…<br>• [ ON DUPLICATE KEY UPDATE 如果重复更新之<br>• col_name=expr [, col_name=expr] … ]</p>
<p>简化写法：<br>INSERT tbl_name [(col1,…)] VALUES (val1,…), (val21,…)  </p>
<p>INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]<br>• [INTO] tbl_name<br>• SET col_name={expr | DEFAULT}, …<br>• [ ON DUPLICATE KEY UPDATE<br>•col_name=expr[, col_name=expr] … ]  </p>
<p>INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]<br>• [INTO] tbl_name [(col_name,…)]<br>• SELECT …<br>• [ ON DUPLICATE KEY UPDATE<br>•col_name=expr[, col_name=expr] … ]  </p>
</blockquote>
<p><strong>DELETE（删）</strong></p>
<blockquote>
<p>DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM<br>• tbl_name<br>• [WHERE where_condition]<br>• [ORDER BY …]<br>• [LIMIT row_count]</p>
<p>可先排序再指定删除的行数</p>
<p>注意：一定要有限制条件，否则将清空表中的所有数据</p>
<p>限制条件：<br>WHERE<br>LIMIT</p>
<p>清空表：TRUNCATE TABLE tbl_name</p>
</blockquote>
<p><strong>UPDATE（改）</strong></p>
<blockquote>
<p>UPDATE [LOW_PRIORITY] [IGNORE] table_reference<br>• SET col_name1={expr1|DEFAULT} [,<br>• col_name2={expr2|DEFAULT}] …<br>• [WHERE where_condition]<br>• [ORDER BY …]<br>• [LIMIT row_count]</p>
<p>注意：一定要有限制条件，否则将修改所有行的指定字段</p>
<p>限制条件：<br>WHERE<br>LIMIT</p>
<p>Mysql 选项： –safe-updates| –i-am-a-dummy|-U  </p>
</blockquote>
<p><strong>SELECT（查）</strong></p>
<blockquote>
<p>SELECT [ALL | DISTINCT | DISTINCTROW ] [SQL_CACHE |SQL_NO_CACHE] select_expr [, select_expr…]<br>• [FROM table_references<br>• [WHERE where_condition]<br>• [GROUP BY {col_name | expr | position} [ASC | DESC], … [WITH ROLLUP]]<br>• [HAVING where_condition]<br>• [ORDER BY {col_name | expr | position} [ASC | DESC], …]<br>• [LIMIT {[offset,] row_count | row_count OFFSET offset}]<br>• [FOR UPDATE | LOCK IN SHARE MODE]  </p>
<p>字段显示可以使用别名：col1 AS alias1, col2 AS alias2, …</p>
<p>WHERE子句：指明过滤条件以实现“选择”的功能<br>• 过滤条件：布尔型表达式<br>• 算术操作符： +, -, *, /, %<br>• 比较操作符： =, !=, &lt;&gt;, &lt;=&gt;, &gt;, &gt;=, &lt;, &lt;=<br>• BETWEEN min_num AND max_num<br>• IN (element1, element2, …)<br>• IS NULL<br>• IS NOT NULL </p>
<p>LIKE:<br>%: 任意长度的任意字符<br>_：任意单个字符</p>
<p>RLIKE：正则表达式，索引失效，不建议使用</p>
<p>REGEXP：匹配字符串可用正则表达式书写模式，同上</p>
<p>逻辑操作符<br>NOT<br>AND<br>OR<br>XOR   </p>
<p>GROUP：根据指定的条件把查询结果进行“分组”以用于做“聚合”运算<br>• avg(), max(), min(), count(), sum()<br>• HAVING: 对分组聚合运算后的结果指定过滤条件</p>
<p>ORDER BY: 根据指定的字段对查询结果进行排序<br>• 升序： ASC<br>• 降序： DESC</p>
<p>LIMIT [[offset,]row_count]：对查询的结果进行输出行数数量限制</p>
<p>对查询结果中的数据请求施加“锁”<br>• FOR UPDATE: 写锁，独占或排它锁，只有一个读和写<br>• LOCK IN SHARE MODE: 读锁，共享锁，同时多个读  </p>
</blockquote>
<p>SQL增删改查示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DESC students;</span><br><span class="line"></span><br><span class="line">INSERT INTO students VALUES(1,&#39;tom&#39;， &#39;m&#39;),(2,&#39;alice&#39;,&#39;f&#39;);</span><br><span class="line">INSERT INTO students(id,name) VALUES(3,&#39;jack&#39;),(4,&#39;allen&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM students WHERE id &lt; 3;</span><br><span class="line">SELECT * FROM students WHERE gender&#x3D;&#39;m&#39;;</span><br><span class="line">SELECT * FROM students WHERE gender IS NULL;</span><br><span class="line">SELECT * FROM students WHERE gender IS NOT NULL;</span><br><span class="line">SELECT * FROM students ORDER BY name DESC LIMIT 2;</span><br><span class="line">SELECT * FROM students ORDER BY name DESC LIMIT 1,2;</span><br><span class="line">SELECT * FROM students WHERE id &gt;&#x3D;2 and id &lt;&#x3D;4</span><br><span class="line">SELECT * FROM students WHERE BETWEEN 2 AND 4</span><br><span class="line">SELECT * FROM students WHERE name LIKE ‘t%’</span><br><span class="line">SELECT * FROM students WHERE name RLIKE &#39;.*[lo].*&#39;;</span><br><span class="line">SELECT id stuid,name as stuname FROM students</span><br></pre></td></tr></table></figure>

<p><strong>多表查询</strong></p>
<p><img src="/images/mysql2/mysql5.jpg" alt=""></p>
<p>交叉连接：笛卡尔乘积</p>
<p>内连接：</p>
<blockquote>
<p>等值连接：让表之间的字段以“等值”建立连接关系；</p>
<p>不等值连接</p>
<p>自然连接:去掉重复列的等值连接</p>
<p>自连接</p>
</blockquote>
<p>外连接：</p>
<blockquote>
<p>左外连接：FROM tb1 LEFT JOIN tb2 ON tb1.col=tb2.col<br>右外连接：FROM tb1 RIGHT JOIN tb2 ON tb1.col=tb2.col</p>
</blockquote>
<p>子查询</p>
<blockquote>
<p>在查询语句嵌套着查询语句，性能较差，基于某语句的查询结果再次进行的查询</p>
<p>WHERE子句中的子查询</p>
<ul>
<li>用于比较表达式中的子查询；仅能返回单个值<br>SELECT Name,Age FROM students WHERE Age&gt;(SELECT avg(Age) FROM students);</li>
<li>用于IN中的子查询：子查询应该单键查询并返回一个或多个值从构成列表<br>SELECT Name,Age FROM students WHERE Age IN (SELECT Age FROM teachers);</li>
<li>用于EXISTS  </li>
</ul>
<p>用于FROM子句中的子查询</p>
<ul>
<li>SELECT tb_alias.col1,… FROM (SELECT clause) AS tb_alias WHERE Clause;</li>
<li>示例：<br>SELECT s.age, s.ClassID FROM ( SELECT avg(Age) AS aage,ClassID FROM students WHERE ClassID IS NOT NULL GROUP BY ClassID ) AS s WHERE s.age&gt;30;</li>
</ul>
<p>联合查询</p>
<ul>
<li>SELECT Name,Age FROM students UNION SELECT Name,Age FROM teachers;  </li>
</ul>
</blockquote>
<h5 id="3、DCL"><a href="#3、DCL" class="headerlink" title="3、DCL"></a>3、DCL</h5><p><strong>MySQL用户和权限管理</strong></p>
<blockquote>
<p>元数据数据库： mysql<br>系统授权表：db, host, user，columns_priv, tables_priv, procs_priv, proxies_priv</p>
</blockquote>
<p><strong>用户账号：‘USERNAME’@’HOST’</strong></p>
<blockquote>
<p>@’HOST’：主机<br>• IP地址或网段;<br>• 通配符：%, _: 172.16.%.%  </p>
</blockquote>
<p><strong>用户管理</strong>  </p>
<blockquote>
<p>创建用户： CREATE USER ‘USERNAME’@’HOST’ [IDENTIFIED BY ‘password’]；<br>默认权限： USAGE</p>
<p>用户重命名：RENAME USER old_user_name TO new_user_name</p>
<p>删除用户：DROP USER ‘USERNAME’@’HOST‘</p>
<p>修改密码：<br>① SET PASSWORD FOR ‘user’@’host’ =PASSWORD(‘password’);<br>② UPDATE mysql.user SET password=PASSWORD(‘your_password’) WHERE clause;<br>此方法需要执行下面指令同步到内存中：FLUSH PRIVILEGES;<br>③ mysqladmin -u root –poldpass password ‘newpass‘</p>
<p>忘记管理员密码的解决办法：<br>①启动mysqld进程时，为其使用如下选项：–skip-grant-tables –skip-networking<br>•使用UPDATE命令修改管理员密码<br>•关闭mysqld进程，移除上述两个选项，重启mysqld   </p>
<p>②修改mysql配置文件my.cnf,在[mysqld]添加内容：skip-grant-tables<br>•重启mysqld服务<br>•免密码登录后使用UPDATE命令修改管理员密码<br>•FLUSH PRIVILEGES;<br>•移除skip-grant-tables，重启mysqld服务</p>
</blockquote>
<p><strong>MySQL权限管理</strong></p>
<p>权限类别</p>
<blockquote>
<p>数据库级别<br>表级别<br>字段级别<br>管理类<br>程序类  </p>
</blockquote>
<p>库和表级别（DATABASE、TABLE）</p>
<blockquote>
<p>ALTER<br>CREATE<br>CREATE VIEW<br>DROP<br>INDEX<br>SHOW VIEW<br>GRANT OPTION：能将自己获得的权限转赠给其他用户 </p>
</blockquote>
<p>程序类（FUNCTION、 PROCEDURE、 TRIGGER）</p>
<blockquote>
<p>CREATE<br>ALTER<br>DROP<br>EXCUTE   </p>
</blockquote>
<p>管理类</p>
<blockquote>
<p>CREATE TEMPORARY TABLES<br>CREATE USER<br>FILE<br>SUPER<br>SHOW DATABASES<br>RELOAD<br>SHUTDOWN<br>REPLICATION SLAVE<br>REPLICATION CLIENT<br>LOCK TABLES<br>PROCESS  </p>
</blockquote>
<p>字段级别</p>
<blockquote>
<p>SELECT(col1,col2,…)<br>UPDATE(col1,col2,…)<br>INSERT(col1,col2,…)<br>DELETE(col1,col2,…)</p>
</blockquote>
<p>所有权限： ALL PRIVILEGES 或 ALL  </p>
<p>授权：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考： https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;grant.html</span><br><span class="line"></span><br><span class="line">GRANT priv_type [(column_list)],... ON [object_type] priv_level</span><br><span class="line">TO &#39;user&#39;@&#39;host&#39; [IDENTIFIED BY &#39;password&#39;] [WITH GRANT OPTION];</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">priv_type：ALL [PRIVILEGES]</span><br><span class="line">object_type：TABLE | FUNCTION | PROCEDURE</span><br><span class="line">priv_level: *(所有库) | *.* | db_name.* | db_name.tbl_name| tbl_name(当前库的表) | db_name.routine_name(指定库的函数,存储过程,触发器)</span><br><span class="line">with_option: GRANT OPTION</span><br><span class="line">| MAX_QUERIES_PER_HOUR count</span><br><span class="line">| MAX_UPDATES_PER_HOUR count</span><br><span class="line">| MAX_CONNECTIONS_PER_HOUR count</span><br><span class="line">| MAX_USER_CONNECTIONS count</span><br><span class="line"></span><br><span class="line">示例：GRANT SELECT (col1), INSERT (col1,col2) ON mydb.mytbl TO &#39;someuser&#39;@&#39;somehost&#39;;</span><br></pre></td></tr></table></figure>

<p>回收授权：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REVOKE priv_type [(column_list)] [, priv_type [(column_list)]] ... </span><br><span class="line">ON [object_type] priv_level </span><br><span class="line">FROM user [, user] ...</span><br><span class="line"></span><br><span class="line">示例： REVOKE DELETE ON testdb.* FROM &#39;testuser&#39;@&#39;%‘</span><br><span class="line"></span><br><span class="line">查看指定用户获得的授权：</span><br><span class="line">Help SHOW GRANTS</span><br><span class="line">SHOW GRANTS FOR &#39;user&#39;@&#39;host&#39;;</span><br><span class="line">SHOW GRANTS FOR CURRENT_USER[()];</span><br><span class="line"></span><br><span class="line">注意：MariaDB服务进程启动时会读取mysql库中所有授权表至内存</span><br><span class="line">(1) GRANT或REVOKE等执行权限操作会保存于系统表中， MariaDB的服</span><br><span class="line">务进程通常会自动重读授权表，使之生效</span><br><span class="line">(2) 对于不能够或不能及时重读授权表的命令，可手动让MariaDB的服务进</span><br><span class="line">程重读授权表：FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>



<h4 id="三、SQL组件"><a href="#三、SQL组件" class="headerlink" title="三、SQL组件"></a><strong>三、SQL组件</strong></h4><h5 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h5><p>视图： VIEW,虚表，保存有实表的查询结果</p>
<p>创建视图：</p>
<blockquote>
<p>CREATE VIEW view_name [(column_list)]<br>AS select_statement [WITH [CASCADED | LOCAL] CHECK OPTION]</p>
</blockquote>
<p>查看视图定义： SHOW CREATE VIEW view_name</p>
<p>删除视图：</p>
<blockquote>
<p>DROP VIEW [IF EXISTS] view_name [, view_name] …<br>[RESTRICT | CASCADE]</p>
</blockquote>
<p>视图中的数据事实上存储于“基表”中，因此，其修改操作也会针对基表实现；其修改操作受基表限制  </p>
<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p>函数：系统函数和自定义函数</p>
<p>系统函数：<a href="https://dev.mysql.com/doc/refman/5.7/en/func-opsummary-ref.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/func-opsummary-ref.html</a></p>
<p>自定义函数 (user-defined function UDF)</p>
<blockquote>
<p>保存在mysql.proc表中</p>
<p>创建UDF:<br>CREATE [AGGREGATE] FUNCTION<br>• function_name (parameter_name type,[parameter_name type,…])<br>• RETURNS {STRING|INTEGER|REAL}<br>• runtime_body</p>
<p>说明：<br>参数可以有多个,也可以没有参数<br>必须有且只有一个返回值</p>
<p>删除UDF：DROP FUNCTION function_name</p>
<p>调用自定义函数语法：SELECT function_name(parameter_value,…)    </p>
<p>查看函数列表：SHOW FUNCTIOIN STATUS;</p>
<p>查看函数定义：SHOW CREATE FUNCTION function_name</p>
<p>示例：无参UDF<br>CREATE FUNCTION simpleFun()<br>RETURNS VARCHAR(20) RETURN “Hello World!” ;</p>
<p>示例：有参数UDF<br>DELIMITER //</p>
<p>CREATE FUNCTION deleteById(uid SMALLINT UNSIGNED) RETURNS VARCHAR(20)</p>
<p>BEGIN<br>DELETE FROM students WHERE stuid = uid;<br>RETURN (SELECT COUNT(uid) FROM students);<br>END //</p>
<p>DELIMITER ;  </p>
</blockquote>
<p>自定义函数中定义局部变量语法:</p>
<blockquote>
<p>DECLARE 变量1[,变量2,… ]变量类型 [DEFAULT 默认值]</p>
<p>说明：局部变量的作用范围是在BEGIN…END程序中,而且定义局部变量语句必须在BEGIN…END的第一行定义</p>
<p>示例:<br>DELIMITER //</p>
<p>CREATE FUNCTION add(x SMALLINT UNSIGNED, Y SMALLINT UNSIGNED)</p>
<p>RETURNS SMALLINT</p>
<p>BEGIN</p>
<p>DECLARE a, b SMALLINT UNSIGNED DEFAULT 10;<br>SET a = x, b = y;<br>RETURN a+b;</p>
<p>END//  </p>
<p>为变量赋值语法<br>SET parameter_name = value[,parameter_name = value…]<br>SELECT INTO parameter_name</p>
<p>示例:<br>DECLARE x int;<br>SELECT COUNT(id) FROM tdb_name INTO x;<br>RETURN x; </p>
</blockquote>
<h5 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h5><p>存储过程：存储过程保存在mysql.proc表中</p>
<p>创建存储过程</p>
<blockquote>
<p>CREATE PROCEDURE sp_name ([ proc_parameter [,proc_parameter …]])<br>routime_body</p>
<p>说明：<br>proc_parameter : [IN|OUT|INOUT]<br>parameter_name type</p>
<p>其中IN表示输入参数，OUT表示输出参数，INOUT表示既可以输入也可以输出； param_name表示参数名称； type表示参数的类型</p>
<p>查看存储过程列表<br>SHOW PROCEDURE STATUS  </p>
</blockquote>
<p>查看存储过程定义</p>
<blockquote>
<p>SHOW CREATE PROCEDURE sp_name</p>
</blockquote>
<p>调用存储过程</p>
<blockquote>
<p>CALL sp_name ([ proc_parameter [,proc_parameter…]])</p>
<p>说明:当无参时,可以省略”()”,当有参数时,不可省略”()”</p>
<p>存储过程修改：删除重建<br>ALTER语句修改存储过程只能修改存储过程的注释等无关紧要的东西,不能修改存储过程体</p>
</blockquote>
<p>删除存储过程</p>
<blockquote>
<p>DROP PROCEDURE [IF EXISTS] sp_name  </p>
</blockquote>
<p>存储过程示例</p>
<blockquote>
<p>创建无参存储过程:<br>delimiter //</p>
<p>CREATE PROCEDURE showTime()BEGIN<br>SELECT now();<br>END//</p>
<p>delimiter ;</p>
<p>CALL showTime;  </p>
<p>创建含参存储过程：只有一个IN参数<br>delimiter //</p>
<p>CREATE PROCEDURE seleById(IN id SMALLINT UNSIGNED)<br>BEGIN<br>SELECT * FROM students WHERE stuid = id;<br>END//</p>
<p>delimiter ;</p>
<p>call seleById(2);  </p>
<p>创建含参存储过程:包含IN参数和OUT参数<br>delimiter //</p>
<p>CREATE PROCEDURE deleteById(IN id SMALLINT UNSIGNED, OUT num SMALLINT UNSIGNED)<br>BEGIN<br>DELETE FROM students WHERE stuid = id;<br>SELETE row_count() into num;<br>END//</p>
<p>delimiter ;</p>
<p>call seleById(2,@Line);</p>
<p>SELETE @Line;</p>
<p>说明:<br>创建存储过程deleteById,包含一个IN参数和一个OUT参数。调用时,传入删除的ID和保存被修改的行数值的用户变量@Line<br>select @Line 输出被影响行数.  </p>
</blockquote>
<p>存储过程优势</p>
<blockquote>
<p>存储过程把经常使用的SQL语句或业务逻辑封装起来,预编译保存在数据库中,当需要时从数据库中直接调用,省去了编译的过程</p>
<p>提高了运行速度，同时降低网络数据传输量</p>
<p>存储过程与自定义函数的区别:<br>• 存储过程实现的过程要复杂一些,而函数的针对性较强<br>• 存储过程可以有多个返回值,而自定义函数只有一个返回值<br>• 存储过程一般独立的来执行,而函数往往是作为其他SQL语句的一部分来使用  </p>
</blockquote>
<h5 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h5><p>存储过程和函数中可以使用流程控制来控制语句的执行</p>
<p>流程控制</p>
<blockquote>
<p>IF：用来进行条件判断。根据是否满足条件，执行不同语句<br>CASE：用来进行条件判断，可实现比IF语句更复杂的条件判断<br>LOOP：重复执行特定的语句，实现一个简单的循环<br>LEAVE：用于跳出循环控制<br>ITERATE：跳出本次循环，然后直接进入下一次循环<br>REPEAT：有条件控制的循环语句。当满足特定条件时，就会跳出循环语句<br>WHILE：有条件控制的循环语句  </p>
</blockquote>
<h5 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h5><p>触发器的执行不是由程序调用，也不是由手工启动，而是由事件来触发、激活从而实现执行</p>
<p>创建触发器</p>
<blockquote>
<p>CREATE [DEFINER = { user | CURRENT_USER }] TRIGGER<br>• trigger_name<br>• trigger_time trigger_event<br>• ON tbl_name FOR EACH ROW<br>• trigger_body</p>
<p>说明：<br>trigger_name：触发器的名称<br>trigger_time： { BEFORE | AFTER }，表示在事件之前或之后触发<br>trigger_event:： { INSERT |UPDATE | DELETE }，触发的具体事件<br>tbl_name：该触发器作用的表名  </p>
<p>示例：创建触发器，在向学生表INSERT数据时，学生数增加，DELETE学生时，学生数减少</p>
<p>CREATE TRIGGER trigger_student_count_insert<br>• AFTER<br>• INSERT ON student_info FOR EACH ROW<br>• UPDATE student_count SET student_count=student_count+1;</p>
<p>CREATE TRIGGER trigger_student_count_delete<br>• AFTER<br>• DELETE ON student_info FOR EACH ROW<br>• UPDATE student_count SET student_count=student_count-1;  </p>
</blockquote>
<p>查看触发器</p>
<blockquote>
<p>SHOW TRIGGERS</p>
<p>查询系统表information_schema.triggers的方式指定查询条件，查看指定的触发器信息。<br>mysql&gt; USE information_schema ;<br>mysql&gt; SELECT * FROM triggers WHERE<br>trigger_name=’trigger_student_count_insert’;</p>
</blockquote>
<p>删除触发器</p>
<blockquote>
<p>DROP TRIGGER trigger_name;  </p>
</blockquote>
<h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><p>索引是特殊数据结构：定义在查找时作为查找条件的字段</p>
<p>优点：提高查询速度，缺点：占用额外空间，影响插入速度</p>
<p>索引实现在存储引擎</p>
<p>索引类型：</p>
<blockquote>
<p>聚簇（集）索引、非聚簇索引：数据是否与索引存储在一起</p>
<p>主键索引、辅助索引</p>
<p>稠密索引、稀疏索引：是否索引了每一个数据项</p>
<p>B+ TREE、 HASH、 R TREE</p>
<p>简单索引、组合索引</p>
<p>左前缀索引：取前面的字符做索引</p>
<p>覆盖索引：从索引中即可取出要查询的数据，性能高  </p>
</blockquote>
<p>聚簇和非聚簇索引，主键和二级索引  </p>
<img src="/images/mysql2/mysql10.jpg" style="zoom: 33%;" />

<p><strong>B+TREE索引</strong>  </p>
<p>1、B+ Tree索引：顺序存储，每一个叶子节点到根结点的距离是相同的；左前缀索引，适合查询范围类的数据</p>
<p>2、可以使用B-Tree索引的查询类型：</p>
<blockquote>
<p>全值匹配：精确所有索引列，如：姓wang，名xiaochun，年龄30</p>
<p>匹配最左前缀：即只使用索引的第一列，如：姓wang</p>
<p>匹配列前缀：只匹配一列值开头部分，如：姓以w开头的</p>
<p>匹配范围值：如：姓ma和姓wang之间</p>
<p>精确匹配某一列并范围匹配另一列：如：姓wang,名以x开头的</p>
<p>只访问索引的查询  </p>
</blockquote>
<img src="/images/mysql2/mysql9.jpg" style="zoom:33%;" />

<img src="/images/mysql2/mysql11.jpg" style="zoom: 33%;" />

<p>3、B-Tree索引的限制：</p>
<blockquote>
<p>如果不从最左列开始，则无法使用索引：如：查找名为xiaochun，或姓为g结尾</p>
<p>不能跳过索引中的列：如：查找姓wang,年龄30的，只能使用索引第一列</p>
<p>如果查询中某个列是为范围查询，那么其右侧的列都无法再使用索引：如：姓wang,名x%,年龄30，只能利用姓和名上面的索引</p>
<p>特别提示：<br>a. 索引列的顺序和查询语句的写法应相匹配，才能更好的利用索引</p>
<p>b. 为优化性能，可能需要针对相同的列但顺序不同创建不同<br>的索引来满足不同类型的查询需求  </p>
</blockquote>
<p><strong>Hash索引</strong></p>
<p>Hash索引：基于哈希表实现，只有精确匹配索引中的所有列的查询才有效，索引自身只存储索引列对应的哈希值和数据指针，索引结构紧凑，查询性能好</p>
<p>只有Memory存储引擎支持显式hash索引</p>
<p>适用场景：只支持等值比较查询，包括=, IN(), &lt;=&gt;</p>
<p>不适合使用hash索引的场景：</p>
<blockquote>
<p>不适用于顺序查询：索引存储顺序的不是值的顺序</p>
<p>不支持模糊匹配</p>
<p>不支持范围查询</p>
<p>不支持部分索引列匹配查找：如A， B列索引，只查询A列索引<br>无效  </p>
</blockquote>
<p><strong>空间索引（ R-Tree）：</strong></p>
<p>MyISAM支持空间索引，可以使用任意维度组合查询，使用特有的函数访问，常用于做地理数据存储，使用不多</p>
<p><strong>全文索引(FULLTEXT)：</strong>在文本中查找关键词，而不是直接比较索引中的值，类似搜索引擎</p>
<p><strong>索引优点：</strong></p>
<blockquote>
<p>索引可以降低服务需要扫描的数据量，减少了IO次数<br>索引可以帮助服务器避免排序和使用临时表<br>索引可以帮助将随机I/O转为顺序I/O  </p>
</blockquote>
<p><strong>优化索引策略</strong>：</p>
<blockquote>
<p>独立地使用列：尽量避免其参与运算，独立的列指索引列不能是表达式的一部分，也不能是函数的参数，在where条件中，始终将索引列单独放在比较符号的一侧</p>
<p>左前缀索引：构建指定索引字段的左侧的字符数，要通过索引选择性来评估</p>
<p>索引选择性：不重复的索引值和数据表的记录总数的比值</p>
<p>多列索引： AND操作时更适合使用多列索引，而非为每个列创建单独的索引</p>
<p>选择合适的索引列顺序：无排序和分组时，将选择性最高放左侧</p>
<p>冗余和重复索引：（ A），（ A， B）即为冗余索引，不好的索引使用策略，建议扩展索引，而非冗余  </p>
<p>只要列中含有NULL值，就最好不要在此例设置索引，复合索引如果有NULL值，此列在使用时也不会使用索引</p>
<p>尽量使用短索引，如果可以，应该制定一个前缀长度</p>
<p>对于经常在where子句使用的列，最好设置索引</p>
<p>对于有多个列where或者order by子句，应该建立复合索引</p>
<p>对于like语句，以%或者‘-’开头的不会使用索引，以%结尾会使用索引</p>
<p>尽量不要在列上进行运算（函数操作和表达式操作）</p>
<p>尽量不要使用not in和&lt;&gt;操作  </p>
</blockquote>
<p><strong>通过EXPLAIN来分析索引的有效性：</strong></p>
<blockquote>
<p>EXPLAIN SELECT clause<br>获取查询执行计划信息，用来查看查询优化器如何执行查询</p>
<p>输出信息说明：参考 <a href="https://dev.mysql.com/doc/refman/5.7/en/explainoutput.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/explainoutput.html</a></p>
<p>id: 当前查询语句中，每个SELECT语句的编号</p>
<p>复杂类型的查询有三种：<br>1、简单子查询<br>2、用于FROM中的子查询<br>3、联合查询： UNION</p>
<p>注意： UNION查询的分析结果会出现一个额外匿名临时表  </p>
<p>select_type：简单查询为SIMPLE</p>
<p>复杂查询：<br>SUBQUERY: 简单子查询<br>PRIMARY:最外面的SELECT<br>DERIVED: 用于FROM中的子查询<br>UNION： UNION语句的第一个之后的SELECT语句<br>UNION RESULT: 匿名临时表</p>
<p>table： SELECT语句关联到的  </p>
<p>type：关联类型或访问类型，即MySQL决定的如何去查询表中的行的方式，以下顺序，性能从低到高<br>1、ALL: 全表扫描<br>2、index：根据索引的次序进行全表扫描；如果在Extra列出现<br>“Using index”表示了使用覆盖索引，而非全表扫描<br>3、range：有范围限制的根据索引实现范围扫描；扫描位置始于索引中的某一点，结束于另一点<br>4、ref: 根据索引返回表中匹配某单个值的所有行<br>5、eq_ref：仅返回一个行，但与需要额外与某个参考值做比较<br>6、const, system: 直接返回单个行</p>
<p>possible_keys：查询可能会用到的索引</p>
<p>key: 查询中使用到的索引</p>
<p>key_len: 在索引使用的字节数  </p>
<p>ref: 在利用key字段所表示的索引完成查询时所用的列或某常<br>量值</p>
<p>rows： MySQL估计为找所有的目标行而需要读取的行数</p>
<p>Extra：额外信息<br>Using index： MySQL将会使用覆盖索引，以避免访问表<br>Using where： MySQL服务器将在存储引擎检索后，再进行一次过滤<br>Using temporary： MySQL对结果排序时会使用临时表<br>Using filesort：对结果使用一个外部索引排  </p>
</blockquote>
<p><strong>管理索引</strong></p>
<blockquote>
<p>创建索引：<br>CREATE INDEX index_name ON tbl_name (index_col_name,…);<br>help CREATE INDEX</p>
<p>删除索引：<br>DROP INDEX index_name ON tbl_name;</p>
<p>查看索引：<br>SHOW INDEXES FROM [db_name.]tbl_name;</p>
<p>优化表空间：<br>OPTIMIZE TABLE tb_name  </p>
</blockquote>
<p><strong>SQL语句性能优化</strong></p>
<blockquote>
<p>查询时，能不要就✬不用✬，尽量写全字段名</p>
<p>大部分情况连接效率远大于子查询</p>
<p>多表连接时，尽量小表驱动大表，即小表 join 大表</p>
<p>在千万级分页时使用limit</p>
<p>对于经常使用的查询，可以开启缓存</p>
<p>多使用explain和profile分析查询语句</p>
<p>查看慢查询日志，找出执行时间长的sql语句优化  </p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（三）</title>
    <url>/2020/06/26/mysql3/</url>
    <content><![CDATA[<h5 id="设置系统变量"><a href="#设置系统变量" class="headerlink" title="设置系统变量"></a><strong>设置系统变量</strong></h5><p>✱ 三种方式<br>① 在命令行中设置:<br>shell&gt; ./mysqld_safe –aria_group_commit=”hard“</p>
<p>② 在配置文件my.cnf中设置：aria_group_commit = “hard”</p>
<p>③ 在mysql客户端使用SET命令：SET GLOBAL aria_group_commit=”hard”;  </p>
<p>✱ 修改服务器变量的值：mysql&gt; help SET</p>
<p>✱ 修改全局变量：仅对修改后新创建的会话有效；对已经建立的会话无效<br>mysql&gt; SET GLOBAL system_var_name=value;<br>mysql&gt; SET @@global.system_var_name=value;</p>
<p>✱ 修改会话变量：<br>mysql&gt; SET [SESSION] system_var_name=value;<br>mysql&gt; SET @@[session.]system_var_name=value;</p>
<p>✱状态变量（只读）：用于保存mysqld运行中的统计数据的变量，不可更改<br>mysql&gt; SHOW GLOBAL STATUS;<br>mysql&gt; SHOW [SESSION] STATUS;  </p>
<h5 id="SQL-MODE"><a href="#SQL-MODE" class="headerlink" title="SQL_MODE"></a><strong>SQL_MODE</strong></h5><p>对其设置可以完成一些约束检查的工作,可分别进行全局的设置或当前会话的设置</p>
<p>常见MODE:</p>
<blockquote>
<p>NO_AUTO_CREATE_USER<br>禁止GRANT创建密码为空的用户</p>
<p>NO_AUTO_VALUE_ON_ZERO<br>在自增长的列中插入0或NULL将不会是下一个自增长值</p>
<p>NO_BACKSLASH_ESCAPES<br>反斜杠“\”作为普通字符而非转义字符</p>
<p>PAD_CHAR_TO_FULL_LENGTH<br>启用后，对于CHAR类型将不会截断空洞数据</p>
<p>PAD_CHAR_TO_FULL_LENGTH<br>启用后，对于CHAR类型将不会截断空洞数据</p>
<p>PIPES_AS_CONCAT<br>将”||”视为连接操作符而非“或运算符  </p>
</blockquote>
<h5 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a><strong>MySQL架构</strong></h5><p><img src="/images/mysql/mysql6.jpg" alt=""></p>
<h5 id="查询缓存（-Query-Cache-）"><a href="#查询缓存（-Query-Cache-）" class="headerlink" title="查询缓存（ Query Cache ）"></a><strong>查询缓存（ Query Cache ）</strong></h5><p><strong>原理</strong></p>
<blockquote>
<p>缓存SELECT操作或预处理查询的结果集和SQL语句，当有新的SELECT语句或预处理查询语句请求，先去查询缓存，判断是否存在可用的记录集，判断标准：与缓存的SQL语句，是否完全一样，区分大小写</p>
<p>优缺点<br>① 不需要对SQL语句做任何解析和执行，当然语法解析必须通过在先，直接从Query Cache中获得查询结果，提高查询性能<br>② 查询缓存的判断规则，不够智能，也即提高了查询缓存的使用门槛，降低其效率；<br>③ 查询缓存的使用，会增加检查和清理Query Cache中记录集的开销  </p>
</blockquote>
<p><strong>哪些查询可能不会被缓存</strong></p>
<blockquote>
<p>查询语句中加了SQL_NO_CACHE参数</p>
<p>查询语句中含有获得值的函数，包含自定义函数，如： NOW() CURDATE()、 GET_LOCK()、 RAND()、 CONVERT_TZ()等</p>
<p>对系统数据库的查询： mysql、 information_schema 查询语句中使用SESSION级别变量或存储过程中的局部变量</p>
<p>查询语句中使用了LOCK IN SHARE MODE、 FOR UPDATE的语句 查询语句中类似SELECT …INTO 导出数据的语句</p>
<p>对临时表的查询操作；存在警告信息的查询语句；不涉及任何表或视图的查询语句；某用户只有列级别权限的查询语句</p>
<p>事务隔离级别为Serializable时，所有查询语句都不能缓存  </p>
</blockquote>
<p><strong>查询缓存相关的服务器变量</strong></p>
<blockquote>
<p>query_cache_min_res_unit: 查询缓存中内存块的最小分配单位，默认4k，较小值会减少浪费，但会导致更频繁的内存分配操作，较大值会带来浪费，会导致碎片过多，内存不足</p>
<p>query_cache_limit：单个查询结果能缓存的最大值，默认为1M，<br>对于查询结果过大而无法缓存的语句，建议使用SQL_NO_CACHE</p>
<p>query_cache_size：查询缓存总共可用的内存空间；单位字节，必须是1024的整数倍，最小值40KB，低于此值有警报</p>
<p>query_cache_wlock_invalidate：如果某表被其它的会话锁定，是否仍然可以从查询缓存中返回结果， 默认值为OFF，表示可以在表被其它会话锁定的场景中继续从缓存返回数据； ON则表示不允许</p>
<p>query_cache_type: 取值为ON, OFF, DEMAND</p>
<p>参考： <a href="https://dev.mysql.com/doc/refman/5.7/en/query-cacheconfiguration.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/query-cacheconfiguration.html</a>  </p>
</blockquote>
<p><strong>SELECT语句的缓存控制</strong></p>
<blockquote>
<p>SQL_CACHE: 显式指定存储查询结果于缓存之中</p>
<p>SQL_NO_CACHE: 显式查询结果不予缓存</p>
</blockquote>
<p><strong>query_cache_type参数变量</strong></p>
<blockquote>
<p>query_cache_type的值为OFF或0时，查询缓存功能关闭</p>
<p>query_cache_type的值为ON或1时，查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定SQL_NO_CACHE，不予缓存，此为默认值</p>
<p>query_cache_type的值为DEMAND或2时，查询缓存功能按需进行，显式指定SQL_CACHE的SELECT语句才会缓存；其它均不予缓存  </p>
</blockquote>
<p><strong>查询缓存相关的状态变量</strong></p>
<blockquote>
<p>SHOW GLOBAL STATUS LIKE ‘Qcache%’;</p>
<p>Qcache_free_blocks：处于空闲状态 Query Cache中内存 Block 数</p>
<p>Qcache_free_memory：处于空闲状态的 Query Cache 内存总量</p>
<p>Qcache_hits： Query Cache 命中次数</p>
<p>Qcache_inserts：向 Query Cache 中插入新的 Query Cache 的次数，即没有命中的次数</p>
<p>Qcache_lowmem_prunes：当 Query Cache 内存容量不够，需要删除老的 Query Cache 以给新的 Cache 对象使用的次数</p>
<p>Qcache_not_cached：没有被 Cache 的 SQL 数，包括无法被Cache 的 SQL 以及由query_cache_type 设置的不会被 Cache的 SQL语句</p>
<p>Qcache_queries_in_cache：在 Query Cache 中的 SQL 数量</p>
<p>Qcache_total_blocks： Query Cache 中总的 Block  </p>
</blockquote>
<p><strong>命中率</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命中率和内存使用率估算</span><br><span class="line">query_cache_min_res_unit ≈ (query_cache_size -Qcache_free_memory) &#x2F;Qcache_queries_in_cache</span><br><span class="line"></span><br><span class="line">查询缓存命中率 ≈ (Qcache_hits – Qcache_inserts) &#x2F; Qcache_hits * 100%</span><br><span class="line"></span><br><span class="line">查询缓存内存使用率 ≈ (query_cache_size – qcache_free_memory) &#x2F; query_cache_size * 100%</span><br></pre></td></tr></table></figure>

<h5 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h5><p>InnoDB存储引擎的缓冲池: 通常InnoDB存储引擎缓冲池的命中不应该小于99%</p>
<blockquote>
<p>查看相关状态变量：show global status like ‘innodb%read%’\G<br>Innodb_buffer_pool_reads: 表示从物理磁盘读取页的次数<br>Innodb_buffer_pool_read_ahead: 预读的次数<br>Innodb_buffer_pool_read_ahead_evicted: 预读页，但是没有读取就从缓冲池中被替换的页数量，一般用来判断预读的效率<br>Innodb_buffer_pool_read_requests: 从缓冲池中读取页次数<br>Innodb_data_read: 总共读入的字节数<br>Innodb_data_reads: 发起读取请求的次数，每次读取可能需要读取多个页  </p>
</blockquote>
<h5 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h5><p>锁粒度：</p>
<blockquote>
<p>表级锁<br>行级锁</p>
</blockquote>
<p>锁：</p>
<blockquote>
<p>读锁：共享锁，只读不可写，多个读互不阻塞，<br>写锁：独占锁,排它锁，一个写锁会阻塞其它读和它锁</p>
</blockquote>
<p>实现：</p>
<blockquote>
<p>存储引擎：自行实现其锁策略和锁粒度<br>服务器级：实现了锁，表级锁；用户可显式请求</p>
</blockquote>
<p>分类：</p>
<blockquote>
<p>隐式锁：由存储引擎自动施加锁<br>显式锁：用户手动请求  </p>
</blockquote>
<p>锁策略：在锁粒度及数据安全性寻求的平衡机制</p>
<p>显示使用锁</p>
<blockquote>
<p>LOCK TABLES tbl_name [[AS] alias] lock_type [, tbl_name [[AS] alias] lock_type] …</p>
<p>✱lock_type: READ ， WRITE</p>
<p>UNLOCK TABLES 解锁</p>
<p>FLUSH TABLES tb_name[,…] [WITH READ LOCK]<br>关闭正在打开的表（清除查询缓存），通常在备份前加全局读锁</p>
<p>SELECT clause [FOR UPDATE | LOCK IN SHARE MODE]<br>查询时加写或读锁  </p>
</blockquote>
<h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><p>事务Transactions：一组原子性的SQL语句，或一个独立工作单元</p>
<p>事务日志：记录事务信息，实现undo,redo等故障恢复功能</p>
<p>ACID特性：</p>
<blockquote>
<p>A： atomicity原子性；整个事务中的所有操作要么全部成功执行，要么全部失败后回滚</p>
<p>C： consistency一致性；数据库总是从一个一致性状态转换为另一个一致性状态</p>
<p>I： Isolation隔离性；一个事务所做出的操作在提交之前，是不能为其它事务所见；隔离有多种隔离级别，实现并发</p>
<p>D： durability持久性；一旦事务提交，其所做的修改会永<br>久保存于数据库中  </p>
</blockquote>
<p>启动事务： START TRANSACTION</p>
<p>结束事务：<br>(1) COMMIT：提交<br>(2) ROLLBACK: 回滚</p>
<p>注意：只有事务型存储引擎方能支持此类操作</p>
<p>建议：显式请求和提交事务，而不要使用“自动提交”功能<br>set autocommit={1|0}</p>
<p>事务支持保存点： savepoint</p>
<blockquote>
<p>SAVEPOINT identifier<br>ROLLBACK [WORK] TO [SAVEPOINT] identifier<br>RELEASE SAVEPOINT identifier  </p>
</blockquote>
<p>事务隔离级别：从上至下更加严格</p>
<blockquote>
<p>READ UNCOMMITTED 可读取到未提交数据，产生脏读</p>
<p>READ COMMITTED 可读提交数据，但未提交数据不可读，产生不可重复读，即可读取到多个提交数据，导致每次读取数据不一致</p>
<p>REPEATABLE READ 可重复读，多次读取数据都一致，产生幻读，即读取过程中，即使有其它提交的事务修改数据，仍只能读取到未修改前的旧数据。此为MySQL默认设置</p>
<p>SERIALIZABILE 可串行化，未提交的读事务阻塞修改事务，或者未提交的修改事务阻塞读事务。导致并发性能差</p>
<p>MVCC: 多版本并发控制，和事务级别相关  </p>
</blockquote>
<p>指定事务隔离级别：</p>
<blockquote>
<p>服务器变量tx_isolation指定，默认为REPEATABLE READ，可在GLOBAL和SESSION级进行设置</p>
<p>SET tx_isolation=’’<br>1、READ-UNCOMMITTED<br>2、READ-COMMITTED<br>3、REPEATABLE-READ<br>4、SERIALIZABLE</p>
<p>服务器选项中指定<br>vim /etc/my.cnf<br>[mysqld]<br>transaction-isolation=SERIALIZABLE  </p>
</blockquote>
<p>死锁：</p>
<blockquote>
<p>两个或多个事务在同一资源相互占用，并请求锁定对方占用的资源的状态</p>
</blockquote>
<h5 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h5><p>事务日志： transaction log<br>错误日志： error log<br>查询日志： query log<br>慢查询日志： slow query log<br>二进制日志： binary log<br>中继日志： reley log  </p>
<p>1、事务日志： transaction log</p>
<blockquote>
<p>事务日志的写入类型为“追加”，因此其操作为“顺序IO”；通常也被称为：预写式日志 write ahead logging</p>
<p>日志文件： ib_logfile0， ib_logfile1  </p>
<p>事务型存储引擎自行管理和使用<br>redo log<br>undo log</p>
<p>Innodb事务日志相关配置<br>show variables like ‘%innodb_log%’;<br>• innodb_log_file_size 5242880 每个日志文件大小<br>• innodb_log_files_in_group 2 日志组成员个数<br>• innodb_log_group_home_dir ./ 事务文件路径</p>
</blockquote>
<p>2、中继日志： relay log</p>
<blockquote>
<p>主从复制架构中，从服务器用于保存从主服务器的二进制日志中读取到的事件  </p>
</blockquote>
<p>3、错误日志</p>
<blockquote>
<p>mysqld启动和关闭过程中输出的事件信息</p>
<p>mysqld运行中产生的错误信息</p>
<p>event scheduler运行一个event时产生的日志信息</p>
<p>在主从复制架构中的从服务器上启动从服务器线程时产生的信息</p>
<p>错误日志相关配置<br>SHOW GLOBAL VARIABLES LIKE ‘log_error’</p>
<p>错误文件路径：log_error=/PATH/TO/LOG_ERROR_FILE</p>
<p>是否记录警告信息至错误日志文件<br>log_warnings=1|0 默认值1  </p>
</blockquote>
<p>4、查询日志：记录查询操作</p>
<blockquote>
<p>文件： file，默认值<br>表： table</p>
<p>查询日志相关设置<br>general_log=ON|OFF<br>general_log_file=HOSTNAME.log<br>log_output=TABLE|FILE|NONE  </p>
</blockquote>
<p>5、慢查询日志</p>
<blockquote>
<p>记录执行查询时长超出指定时长的操作</p>
<p>slow_query_log=ON|OFF 开启或关闭慢查询</p>
<p>long_query_time=N 慢查询的阀值，单位秒</p>
<p>slow_query_log_file=HOSTNAME-slow.log 慢查询日志文件</p>
<p>log_slow_filter = admin,filesort,filesort_on_disk,full_join,</p>
<p>full_scan,query_cache,query_cache_miss,tmp_table,tmp_tabl<br>e_on_disk</p>
<p>log_queries_not_using_indexes=ON 不使用索引也没有达到慢查询阀值的语句是否记录日志，默认OFF，即不记录</p>
<p>log_slow_rate_limit = 1 多少次查询才记录， mariadb特有</p>
</blockquote>
<p>6、二进制日志</p>
<p><strong>注意：建议二进制日志和数据文件分开存放</strong></p>
<p>a. 记录导致数据改变或潜在导致数据改变的SQL语句<br>b. 功能：通过“重放”日志文件中的事件来生成数据副本</p>
<p>二进制日志相关配置</p>
<blockquote>
<p>查看mariadb自行管理使用中的二进制日志文件列表<br>SHOW {BINARY | MASTER} LOGS</p>
<p>查看使用中的二进制日志文件<br>SHOW MASTER STATUS</p>
<p>查看二进制文件中的指定内容<br>SHOW BINLOG EVENTS [IN ‘log_name’] [FROM pos] [LIMIT [offset,] row_count]</p>
<p>show binlog events in ‘mariadb-bin.000001’ from 6516 limit 2,3  </p>
</blockquote>
<p>二进制日志记录格式</p>
<blockquote>
<p>基于“语句”记录： statement，记录语句，默认模式</p>
<p>基于“行”记录： row，记录数据，日志量较大</p>
<p>混合模式： mixed, 让系统自行判定该基于哪种方式进行</p>
<p>格式配置<br>show variables like ‘%binlog_format%’;</p>
</blockquote>
<p>二进制日志文件的构成</p>
<blockquote>
<p>日志文件： mysql|mariadb-bin.文件名后缀，二进制格式 如： mysql-bin.000001<br>索引文件： mysql|mariadb-bin.index，文本格式  </p>
</blockquote>
<p>二进制日志相关的服务器变量：</p>
<blockquote>
<p>sql_log_bin=ON|OFF：是否记录二进制日志，默认ON</p>
<p>log_bin=/PATH/BIN_LOG_FILE：指定文件位置； 默认OFF，表示不启用二进制日志功能，上述两项都开启才可</p>
<p>binlog_format=STATEMENT|ROW|MIXED：二进制日志记录的格式，默认STATEMENT</p>
<p>max_binlog_size=1073741824：单个二进制日志文件的最大体积， 到达最大值会自动滚动，默认为1G<br>说明：文件达到上限时的大小未必为指定的精确值</p>
<p>sync_binlog=1|0：设定是否启动二进制日志即时同步磁盘功能，默认0，由操作系统负责同步日志到磁盘</p>
<p>expire_logs_days=N：二进制日志可以自动删除的天数。默认为0，即不自动删除  </p>
</blockquote>
<p>mysqlbinlog：二进制日志的客户端命令工具</p>
<blockquote>
<p>命令格式：<br>mysqlbinlog [OPTIONS] log_file…<br>–start-position=# 指定开始位置<br>–stop-position=#<br>–start-datetime=<br>–stop-datetime=</p>
<p>时间格式： YYYY-MM-DD hh:mm:ss –base64-output[=name]</p>
<p>示例：<br>mysqlbinlog –start-position=6787 –stop-position=7527 /var/lib/mysql/mariadb-bin.000003<br>mysqlbinlog –start-datetime=”2018-01-30 20:30:10” – stop-datetime=”2018-01-30 20:35:22” mariadb-bin.000003;  </p>
</blockquote>
<p>二进制日志事件的格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># at 328</span><br><span class="line"># 151105 16:31:40 server id 1 end_log_pos 431 Query thread_id&#x3D;1 exec_time&#x3D;0 error_code&#x3D;0</span><br><span class="line">use &#96;mydb&#96;&#x2F;*!*&#x2F;;</span><br><span class="line">SET TIMESTAMP&#x3D;1446712300&#x2F;*!*&#x2F;;</span><br><span class="line">CREATE TABLE tb1 (id int, name char(30))</span><br><span class="line">&#x2F;*!*&#x2F;;</span><br><span class="line"></span><br><span class="line">事件发生的日期和时间： 151105 16:31:40</span><br><span class="line">事件发生的服务器标识： server id 1</span><br><span class="line">事件的结束位置： end_log_pos 431</span><br><span class="line">事件的类型： Query</span><br><span class="line">事件发生时所在服务器执行此事件的线程的ID： thread_id&#x3D;1</span><br><span class="line">语句的时间戳与将其写入二进制文件中的时间差： exec_time&#x3D;0</span><br><span class="line">错误代码： error_code&#x3D;0</span><br><span class="line">事件内容：GTID： Global Transaction ID， mysql5.6以mariadb10以上版本专属属性</span><br></pre></td></tr></table></figure>

<p>清除指定二进制日志：</p>
<blockquote>
<p>PURGE { BINARY | MASTER } LOGS { TO ‘log_name’ | BEFORE datetime_expr }</p>
<p>示例：<br>PURGE BINARY LOGS TO ‘mariadb-bin.000003’;删除此文件前日志<br>PURGE BINARY LOGS BEFORE ‘2017-01-23’;<br>PURGE BINARY LOGS BEFORE ‘2017-03-22 09:25:30’;</p>
<p>删除所有二进制日志， index文件重新记数<br>RESET MASTER [TO #]; 日志文件从#开始记数，默认从1开始，一般是master第一次启动时执行， MariaDB10.1.6开始支持TO #</p>
<p>切换日志文件<br>FLUSH LOGS;  </p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（一）</title>
    <url>/2020/06/24/mysql1/</url>
    <content><![CDATA[<h4 id="一、数据库的发展史"><a href="#一、数据库的发展史" class="headerlink" title="一、数据库的发展史"></a>一、数据库的发展史</h4><ol>
<li><p>萌芽阶段—–文件系统</p>
<blockquote>
<p>使用磁盘文件来存储数据</p>
</blockquote>
</li>
<li><p>初级阶段—–第一代数据库</p>
<blockquote>
<p>出现了网状模型、层次模型的数据库</p>
</blockquote>
</li>
<li><p>中级阶段—–第二代数据库</p>
<blockquote>
<p>关系型数据库和结构化查询语言</p>
</blockquote>
</li>
<li><p>高级阶段——新一代数据库</p>
<blockquote>
<p>“关系-对象”型数据库  </p>
</blockquote>
</li>
</ol>
<p><strong>文件管理系统的缺点</strong></p>
<blockquote>
<p>编写应用程序不方便<br>数据冗余不可避免<br>应用程序依赖性<br>不支持对文件的并发访问<br>数据间联系弱<br>难以按用户视图表示数据<br>无安全控制功能  </p>
</blockquote>
<p><strong>数据库管理系统的优点</strong>  </p>
<blockquote>
<p>相互关联的数据的集合<br>较少的数据冗余<br>程序与数据相互独立<br>保证数据的安全、可靠<br>最大限度地保证数据的正确性<br>数据可以并发使用并能同时保证一致性  </p>
</blockquote>
<p><strong>数据库管理系统</strong> </p>
<blockquote>
<p>数据库是数据的汇集，它以一定的组织形式存于存储介质上</p>
<p>DBMS是管理数据库的系统软件，它实现数据库系统的各种功能。是数据库系统的核心</p>
<p>DBA：负责数据库的规划、设计、协调、维护和管理等工作</p>
<p>应用程序指以数据库为基础的应用程序  </p>
</blockquote>
<p><strong>数据库管理系统的基本功能</strong></p>
<blockquote>
<p>数据定义<br>数据处理<br>数据安全<br>数据备份  </p>
</blockquote>
<p><strong>数据库系统的架构</strong></p>
<blockquote>
<p>单机架构<br>大型主机/终端架构<br>主从式架构（ C/S）<br>分布式架构  </p>
</blockquote>
<h4 id="二、关系型数据库"><a href="#二、关系型数据库" class="headerlink" title="二、关系型数据库"></a>二、关系型数据库</h4><p>关系 ：关系就是二维表。并满足如下性质：表中的行、列次序并不重要</p>
<p>行row：表中的每一行，又称为一条记录</p>
<p>列column：表中的每一列，称为属性，字段</p>
<p>主键（ Primary key）：用于惟一确定一个记录的字段</p>
<p>域domain：属性的取值范围，如，性别只能是‘男’和‘女’<br>两个值  </p>
<p><strong>RDBMS：</strong></p>
<p>1、MySQL: MySQL, MariaDB, Percona Server</p>
<p>2、PostgreSQL: 简称为pgsql， EnterpriseDB</p>
<p>3、Oracle：</p>
<p>3、MSSQL：</p>
<p>4、DB2:</p>
<p><strong>事务transaction：多个操作被当作一个整体对待(ACID)</strong></p>
<p>A: 原子性<br>C：一致性<br>I: 隔离性<br>D：持久性  </p>
<p><strong>实体-联系模型E-R</strong></p>
<p>1、实体Entity</p>
<blockquote>
<p>客观存在并可以相互区分的客观事物或抽象事件称为实体。<br>在E-R图中用矩形框表示实体，把实体名写在框内</p>
</blockquote>
<p>2、属性</p>
<blockquote>
<p>实体所具有的特征或性质</p>
</blockquote>
<p>3、联系</p>
<blockquote>
<p>联系是数据之间的关联集合，是客观存在的应用语义链</p>
</blockquote>
<p>4、实体内部的联系</p>
<blockquote>
<p>指组成实体的各属性之间的联系。如职工实体中，职工号和部门经理号之间有一种关联关系</p>
</blockquote>
<p>5、实体之间的联系</p>
<blockquote>
<p>指不同实体之间联系。例学生选课实体和学生基本信息实体之间</p>
</blockquote>
<p>6、实体之间的联系用菱形框表示  </p>
<p><strong>联系类型</strong></p>
<blockquote>
<p>一对一联系(1:1)<br>一对多联系(1:n)<br>多对多联系(m:n)  </p>
</blockquote>
<p><strong>数据三要素</strong></p>
<p>1、数据结构：</p>
<blockquote>
<p>包括两类，一类是与数据类型、内容、性质有关的对象，比如关系模型中的域、属性和关系等；另一类是与数据之间联系有关的对象，它从数据组织层表达数据记录与字段的结构</p>
</blockquote>
<p>2、数据的操作：</p>
<blockquote>
<p>数据提取：在数据集合中提取感兴趣的内容。(SELECT）<br>数据更新：变更数据库中的数据。(INSERT、 DELETE、UPDATE)</p>
</blockquote>
<p>3、数据的约束条件 ：是一组完整性规则的集合</p>
<blockquote>
<p>实体（行）完整性 Entity integrity<br>域（列）完整性 Domain Integrity<br>参考完整性 Referential Integrity  </p>
</blockquote>
<p><strong>简易数据规划流程</strong></p>
<p>1、第一阶段：收集数据，得到字段</p>
<blockquote>
<p>• 收集必要且完整的数据项<br>• 转换成数据表的字段</p>
</blockquote>
<p>2、第二阶段：把字段分类，归入表，建立表的关联</p>
<blockquote>
<p>• 关联：表和表间的关系<br>• 分割数据表并建立关联的优点<br>• 节省空间<br>• 减少输入错误<br>• 方便数据修改</p>
</blockquote>
<p>3、第三阶段：</p>
<blockquote>
<p>• 规范化数据库  </p>
</blockquote>
<p><strong>范式</strong>  </p>
<blockquote>
<p>1NF： 无重复的列， 每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。除去同类型的字段，就是无重复的列。说明：第一范式（ 1NF）是对关系模式的基本要求，不满足第一范式（ 1NF）的数据库就不是关系数据库</p>
<p>2NF：属性完全依赖于主键，第二范式必须先满足第一范式，要求表中的每个行必须可以被唯一地区分。通常为表加上一个列，以存储各个实例的唯一标识PK，非PK的字段需要与整个PK有直接相关性</p>
<p>3NF：属性不依赖于其它非主属性，满足第三范式必须先满足<br>第二范式。第三范式要求一个数据库表中不包含已在其它表中<br>已包含的非主关键字信息，非PK的字段间不能有从属关系  </p>
</blockquote>
<h4 id="三、SQL概念"><a href="#三、SQL概念" class="headerlink" title="三、SQL概念"></a><strong>三、SQL概念</strong></h4><p>1、SQL: Structure Query Language </p>
<blockquote>
<p>结构化查询语言<br>SQL解释器：<br>数据存储协议：应用层协议， C/S</p>
</blockquote>
<p>2、S： server, 监听于套接字，接收并处理客户端的应用请求</p>
<p>3、C： Client</p>
<p>• 程序接口</p>
<blockquote>
<p>CLI<br>GUI</p>
</blockquote>
<p>• 应用编程接口</p>
<blockquote>
<p>ODBC： Open Database Connectivity<br>JDBC： Java Data Base Connectivity  </p>
</blockquote>
<p>4、约束： constraint，表中的数据要遵守的限制</p>
<blockquote>
<p>主键：一个或多个字段的组合，填入的数据必须能在本表中唯一标识本行；必须提供数据，即NOT NULL，一个表只能有一个</p>
<p>惟一键：一个或多个字段的组合，填入的数据必须能在本表中唯一标识本行；允许为NULL，一个表可以存在多个</p>
<p>外键：一个表中的某字段可填入的数据取决于另一个表的主键或唯一键已有的数据</p>
<p>检查：字段值在一定范围内  </p>
</blockquote>
<p>5、索引：将表中的一个或多个字段中的数据复制一份另存，并且些需要按特定次序排序存储<br>• 关系运算：</p>
<blockquote>
<p>选择：挑选出符合条件的行<br>投影：挑选出需要的字段<br>连接：表间字段的关联  </p>
</blockquote>
<p>6、数据模型<br>•  数据抽象：</p>
<blockquote>
<p>物理层：数据存储格式，即RDBMS在磁盘上如何组织文件<br>逻辑层： DBA角度，描述存储什么数据，以及数据间存在什么样的关系<br>视图层：用户角度，描述DB中的部分数据</p>
</blockquote>
<p>• 关系模型的分类：</p>
<blockquote>
<p>基于对象的关系模型<br>半结构化的关系模型： XML数据  </p>
</blockquote>
<h4 id="四、MySQL历史"><a href="#四、MySQL历史" class="headerlink" title="四、MySQL历史"></a>四、MySQL历史</h4><p>• 1979年： TcX公司 Monty Widenius， Unireg<br>• 1996年： 发布MySQL1.0， Solaris版本， Linux版本<br>• 1999年： MySQL AB公司，瑞典<br>• 2003年： MySQL 5.0版本，提供视图、存储过程等功能<br>• 2008年： sun 收购<br>• 2009年： oracle收购sun<br>• 2009年： Monty成立MariaDB  </p>
<img src="/images/mysql/mysql2.jpg"/>



<h4 id="五、MySQL和MariaDB"><a href="#五、MySQL和MariaDB" class="headerlink" title="五、MySQL和MariaDB"></a><strong>五、MySQL和MariaDB</strong></h4><p><strong>官方网址</strong><br><a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a><br><a href="http://mariadb.org/" target="_blank" rel="noopener">http://mariadb.org/</a></p>
<p><strong>官方文档</strong><br><a href="https://dev.mysql.com/doc/" target="_blank" rel="noopener">https://dev.mysql.com/doc/</a><br><a href="https://mariadb.com/kb/en/" target="_blank" rel="noopener">https://mariadb.com/kb/en/</a></p>
<p><strong>版本演变</strong><br>MySQL：  5.1 –&gt; 5.5 –&gt; 5.6 –&gt; 5.7<br>MariaDB：5.5 –&gt;10.0–&gt; 10.1 –&gt; 10.2 –&gt; 10.3  </p>
<p><strong>MySQL体系结构</strong>  </p>
<img src="/images/mysql/mysql3.jpg" style="zoom: 33%;" />



<p><strong>MariaDB的特性</strong></p>
<p>• 插件式存储引擎：也称为“表类型”，存储管理器有多种实现版本，功能和特性可能均略有差别；用户可根据需要灵活选择,Mysql5.5.5开始innoDB引擎是MYSQL默认引擎</p>
<blockquote>
<p>MyISAM ==&gt; Aria<br>InnoDB ==&gt; XtraDB</p>
</blockquote>
<p>• 存储引擎比较：<a href="https://docs.oracle.com/cd/E17952_01/mysql-5.5-en/storage-engines.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E17952_01/mysql-5.5-en/storage-engines.html</a></p>
<p>• 单进程，多线程</p>
<p>• 诸多扩展和新特性</p>
<p>• 提供了较多测试组件</p>
<p>• 开源  </p>
<p><strong>存储引擎</strong>  </p>
<p><img src="/images/mysql/mysql4.jpg" alt=""></p>
<p>• MyISAM引擎特点：</p>
<blockquote>
<p>读取数据较快，占用资源较少<br>表级锁定<br>读写相互阻塞，写入不能读，读时不能写<br>只缓存索引<br>不支持事务<br>不支持外键约束<br>不支持聚簇索引<br>不支持MVCC（多版本并发控制机制）高并发<br>崩溃恢复性较差<br>MySQL5.5.5前默认的数据库引擎  </p>
<p>适用场景：只读（或者写较少）、表较小（可以接受长时间进行修复操作）</p>
<p>MyISAM引擎文件：<br>tbl_name.frm: 表格式定义<br>tbl_name.MYD: 数据文件<br>tbl_name.MYI: 索引文件  </p>
</blockquote>
<p>• InnoDB引擎特点：</p>
<blockquote>
<p>支持事务，适合处理大量短期事务<br>行级锁<br>读写阻塞与事务隔离级别相关<br>可缓存数据和索引<br>支持聚簇索引<br>支持MVCC高并发<br>崩溃恢复性更好<br>从MySQL5.5后支持全文索引<br>从MySQL5.5.5开始为默认的数据库引擎  </p>
<p>InnoDB数据库文件<br>a. 所有InnoDB表的数据和索引放置于同一个表空间中</p>
<ul>
<li>表空间文件： datadir定义的目录下</li>
<li>数据文件： ibddata1, ibddata2, …</li>
</ul>
<p>b. 每个表单独使用一个表空间存储表的数据和索引</p>
<ul>
<li>启用： innodb_file_per_table=ON</li>
<li>两类文件放在数据库独立目录中<br>数据文件(存储数据和索引)： tb_name.ibd<br>表格式定义： tb_name.frm  </li>
</ul>
</blockquote>
<p>• 其它存储引擎</p>
<blockquote>
<p>Performance_Schema:Performance_Schema数据库</p>
<p>Memory ：将所有数据存储在RAM中，以便在需要快速查找参考和其他类似数据的环境中进行快速访问。适用存放临时数据。引擎以前被称为HEAP引擎</p>
<p>MRG_MyISAM：使MySQL DBA或开发人员能够对一系列相同的MyISAM表进行逻辑分组，并将它们作为一个对象引用。适用于VLDB(Very Large Data Base)环境，如数据仓库</p>
<p>Archive ：为存储和检索大量很少参考的存档或安全审核信息，只支持SELECT和INSERT操作；支持行级锁和专用缓存区</p>
<p>Federated联合：用于访问其它远程MySQL服务器一个代理，它通过创建一个到远程MySQL服务器的客户端连接，并将查询传输到远程服务器执行，而后完成数据存取，提供链接单独MySQL服务器的能力，以便从多个物理服务器创建一个逻辑数据库。非常适合分布式或数据集市环境  </p>
<p>BDB：可替代InnoDB的事务引擎，支持COMMIT、ROLLBACK和其他事务特性</p>
<p>Cluster/NDB： MySQL的簇式数据库引擎，尤其适合于具有高性能查找要求的应用程序，这类查找需求还要求具有最高的正常工作时间和可用性</p>
<p>CSV： CSV存储引擎使用逗号分隔值格式将数据存储在文本文件中。可以使用CSV引擎以CSV格式导入和导出其他软件和应用程序之间的数据交换</p>
<p>BLACKHOLE ：黑洞存储引擎接受但不存储数据，检索总是返回一个空集。该功能可用于分布式数据库设计，数据自动复制，但不是本地存储</p>
<p>example：“stub”引擎，它什么都不做。可以使用此引擎创建表，但不能将数据存储在其中或从中检索。目的是作为例子来说明如何开始编写新的存储引擎  </p>
</blockquote>
<p><strong>MariaDB支持的其它存储引擎</strong></p>
<blockquote>
<p>OQGraph<br>SphinxSE<br>TokuDB<br>Cassandra<br>CONNECT<br>SQUENCE  </p>
</blockquote>
<p><strong>管理存储引擎</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看mysql支持的存储引擎:</span><br><span class="line">show engines;</span><br><span class="line"></span><br><span class="line">#查看当前默认的存储引擎:</span><br><span class="line">show variables like &#39;%storage_engine%&#39;</span><br><span class="line"></span><br><span class="line">#设置默认的存储引擎：</span><br><span class="line">vim &#x2F;etc&#x2F;my.conf</span><br><span class="line">[mysqld]</span><br><span class="line">default_storage_engine&#x3D; InnoDB;</span><br><span class="line"></span><br><span class="line">#查看库中所有表使用的存储引擎</span><br><span class="line">Show table status from db_name;</span><br><span class="line"></span><br><span class="line">#查看库中指定表的存储引擎</span><br><span class="line">show table status like ‘tb_name‘;</span><br><span class="line">show create table tb_name;</span><br><span class="line"></span><br><span class="line">#设置表的存储引擎：</span><br><span class="line">CREATE TABLE tb_name(... ) ENGINE&#x3D;InnoDB;</span><br><span class="line">ALTER TABLE tb_name ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>

<p><strong>MySQL中的系统数据库</strong></p>
<blockquote>
<p><strong>mysql数据库：</strong>是mysql的核心数据库，类似于sql server中的master库，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息</p>
<p><strong>PERFORMANCE_SCHEMA：</strong>MySQL 5.5开始新增的数据库，主要用于收集数据库服务器性能参数,库里表的存储引擎均为PERFORMANCE_SCHEMA，用户不能创建存储引擎为PERFORMANCE_SCHEMA的表</p>
<p><strong>information_schema数据库:</strong>MySQL 5.0之后产生的，一个虚拟数据库，物理上并不存在。 information_schema数据库类似与“数据字典”，提供了访问数据库元数据的方式，即数据的数据。比如数据库名或表名，列类型，访问权限（更加细化的访问方式）  </p>
</blockquote>
<h4 id="六、Mariadb介绍"><a href="#六、Mariadb介绍" class="headerlink" title="六、Mariadb介绍"></a>六、Mariadb介绍</h4><p><strong>Mariadb安装</strong></p>
<p>1、源代码：编译安装<br>2、二进制格式的程序包：展开至特定路径，并经过简单配置后即可使用<br>3、程序包管理器管理的程序包<br>• CentOS安装光盘<br>• 项目官方：<a href="https://downloads.mariadb.org/mariadb/repositories/" target="_blank" rel="noopener">https://downloads.mariadb.org/mariadb/repositories/</a>  </p>
<p><strong>安装和使用MariaDB:</strong></p>
<p>1、Rpm包安装</p>
<blockquote>
<p>mariadb-server 服务器包<br>mariadb 客户端工具包</p>
</blockquote>
<p>2、提高安全性：mysql_secure_installation</p>
<blockquote>
<p>设置数据库管理员root口令<br>禁止root远程登录<br>删除anonymous用户帐号<br>删除test数据库  </p>
</blockquote>
<p>3、MariaDB程序  </p>
<p>客户端程序：</p>
<blockquote>
<p>mysql: 交互式的CLI工具</p>
<p>mysqldump: 备份工具，基于mysql协议向mysqld发起查询请求，并将查得的所有数据转换成insert等写操作语句保存文本文件中</p>
<p>mysqladmin：基于mysql协议管理mysqld</p>
<p>mysqlimport: 数据导入工具</p>
<p>MyISAM存储引擎的管理工具<br>1、myisamchk：检查MyISAM库<br>2、myisampack：打包MyISAM表，只读</p>
</blockquote>
<p>服务器端程序</p>
<blockquote>
<p>mysqld_safe<br>mysqld 获取默认设置： mysqld –print-defaults<br>mysqld_multi：多实例 ，示例： mysqld_multi –example  </p>
</blockquote>
<p>4、用户账号  </p>
<blockquote>
<p>mysql用户账号由两部分组成：USERNAME’@’HOST‘</p>
<p>说明：HOST限制此用户可通过哪些远程主机连接mysql服务器</p>
<p>支持使用通配符：<br>% 匹配任意长度的任意字符<br>_   匹配任意单个字符  </p>
</blockquote>
<p><strong>Mysql客户端</strong>  </p>
<p>mysql使用模式：</p>
<blockquote>
<p>交互式客户端命令：<br>\h, help<br>\u， use<br>\s， status<br>!， system</p>
<p>交互式服务器端命令：SQL语句，需要结束符；</p>
<p>脚本模式：<br>mysql –uUSERNAME -pPASSWORD &lt; /path/somefile.sql<br>mysql&gt; source /path/from/somefile.sql  </p>
</blockquote>
<p>mysql客户端可用选项 ：</p>
<blockquote>
<p>-A, –no-auto-rehash 禁止补全<br>-u, –user= 用户名,默认为root<br>-h, –host= 服务器主机,默认为localhost<br>-p, –passowrd= 用户密码,建议使用-p,默认为空密码<br>-P, –port= 服务器端口<br>-S, –socket= 指定连接socket文件路径<br>-D, –database= 指定默认数据库<br>-C, –compress 启用压缩<br>-e “SQL“ 执行SQL命令<br>-V, –version 显示版本<br>-v –verbose 显示详细信息<br>–print-defaults 获取程序默认使用的配置</p>
</blockquote>
<p><strong>socket地址</strong></p>
<p>服务器监听的两种socket地址：</p>
<blockquote>
<p>ip socket: 监听在tcp的3306端口，支持远程通信</p>
<p>unix sock: 监听在sock文件上， 仅支持本机通信<br>如： /var/lib/mysql/mysql.sock)</p>
<p>说明： host为localhost,127.0.0.1时自动使用unix sock  </p>
</blockquote>
<p><strong>服务器端配置</strong></p>
<p>服务器端(mysqld)：工作特性有多种配置方式</p>
<blockquote>
<p>1、命令行选项：</p>
<p>2、配置文件： 类ini格式<br>集中式的配置，能够为mysql的各应用程序提供配置信息<br>[mysqld]<br>[mysqld_safe]<br>[mysqld_multi]<br>[mysql]<br>[mysqldump]<br>[server]<br>[client]</p>
<p>格式： parameter = value<br>说明： _和- 相同<br>0， OFF， FALSE意义相同， 1， ON， TRUE意义相同  </p>
<p>3、配置文件：后面覆盖前面的配置文件，顺序如下：<br>• /etc/my.cnf  Global选项<br>• /etc/mysql/my.cnf Global选项<br>• SYSCONFDIR/my.cnf Global选项<br>• $MYSQL_HOME/my.cnf Server-specific 选项<br>• –defaults-extra-file=path<br>• ~/.my.cnf User-specific 选项</p>
<p>4、获取可用参数列表：<br>mysqld –help –verbose  </p>
<p>5、侦听3306/tcp端口可以在绑定有一个或全部接口IP上</p>
<p>6、vim /etc/my.cnf<br>[mysqld]<br>skip-networking=1 关闭网络连接，只侦听本地客户端，<br>所有和服务器的交互都通过一个socket实现， socket的配置存放<br>在/var/lib/mysql/mysql.sock） 可在/etc/my.cnf修改  </p>
</blockquote>
<p><strong>执行命令</strong>  </p>
<p>运行mysql命令：默认空密码登录</p>
<blockquote>
<p>mysql&gt;use mysql<br>mysql&gt;select user();查看当前用户<br>mysql&gt;SELECT User,Host,Password FROM user;</p>
</blockquote>
<p>登录系统： mysql –uroot –p</p>
<p>客户端命令：本地执行，每个命令都完整形式和简写格式<br>mysql&gt; help<br>mysql&gt; status 或 \s</p>
<p>服务端命令：通过mysql协议发往服务器执行并取回结果，每个命令都必须命令结束符号；默认为分号。SELECT VERSION();  </p>
<h4 id="七、三种安装方式实现"><a href="#七、三种安装方式实现" class="headerlink" title="七、三种安装方式实现"></a>七、三种安装方式实现</h4><p>一、yum或rpm安装（最简单）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#yum方式</span><br><span class="line">yum install mariadb-server -y</span><br><span class="line"></span><br><span class="line">#包含客户端安装</span><br><span class="line">yum install mariadb mariadb-devel mariadb-server MariaDB-shared -y</span><br><span class="line"></span><br><span class="line">---------------------------------------------------</span><br><span class="line">#rpm方式</span><br><span class="line">1、卸载系统自带的 mariadb-lib</span><br><span class="line">rpm -qa|grep mariadb</span><br><span class="line">rpm -e mariadb-libs-5.5.44-2.el7.centos.x86_64 --nodeps</span><br><span class="line"></span><br><span class="line">2、下载 rpm 安装包并解压</span><br><span class="line">wget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;Downloads&#x2F;MySQL-5.7&#x2F;mysql-5.7.13-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line">tar xvf mysql-5.7.13-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">3、安装（几个包有依赖关系，注意执行顺序）</span><br><span class="line">rpm -ivh mysql-community-common-5.7.13-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.13-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.13-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.13-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">4、数据库初始化</span><br><span class="line">mysqld --initialize --user&#x3D;mysql</span><br><span class="line"></span><br><span class="line">5、数据库密码</span><br><span class="line">cat &#x2F;var&#x2F;log&#x2F;mysqld.log|grep &quot;temporary password&quot; </span><br><span class="line"></span><br><span class="line">6、启动服务</span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line">---------------------------------------------------</span><br><span class="line">#客户端单独安装</span><br><span class="line">1、官网下载地址 https:&#x2F;&#x2F;dev.mysql.com&#x2F;downloads&#x2F;mysql&#x2F;</span><br><span class="line"></span><br><span class="line">2、下载三个rpm包</span><br><span class="line">mysql-community-client-5.7.27-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-common-5.7.27-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-5.7.27-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">3、卸载系统自带的开发库</span><br><span class="line">~]#yum remove  mariadb-libs -y</span><br><span class="line"></span><br><span class="line">4、安装顺序</span><br><span class="line">~]#rpm -ivh mysql-community-common-5.7.27-1.el7.x86_64.rpm</span><br><span class="line">~]#rpm -ivh mysql-community-libs-5.7.27-1.el7.x86_64.rpm</span><br><span class="line">~]#rpm -ivh mysql-community-client-5.7.27-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>二、通用二进制安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#以CentOS系统为例</span><br><span class="line"></span><br><span class="line">#确保本机没有安装mysql服务器端程序</span><br><span class="line">[root@centos7 ~]# rpm -qa &quot;mysql*&quot;</span><br><span class="line">[root@centos7 ~]# rpm -qa &quot;mariadb*&quot;</span><br><span class="line"></span><br><span class="line">#获取安装包</span><br><span class="line">mmariadb-10.2.12-Linux-x86_64.tar.gz(二进制)</span><br><span class="line"></span><br><span class="line">#创建账号</span><br><span class="line">getent passwd mysql</span><br><span class="line">useradd -r -s &#x2F;sbin&#x2F;nologin mysql</span><br><span class="line"></span><br><span class="line">#解压安装包（&#x2F;usr&#x2F;local&#x2F;mysql）</span><br><span class="line">tar xvf mariadb-10.2.12-linux-x86_64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line"></span><br><span class="line">#创建目录软连接，方便管理</span><br><span class="line">cd &#x2F;usr&#x2F;local</span><br><span class="line">mv mariadb-10.2.12-linux-x86_64 mariadb-10.2.12</span><br><span class="line">ln -sv mariadb-10.2.12 mysql </span><br><span class="line"></span><br><span class="line">#更改所有者，所属组</span><br><span class="line">chown -R mysql.mysql mysql&#x2F;</span><br><span class="line"></span><br><span class="line">#创建环境变量</span><br><span class="line">echo &#39;PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin:$PATH&#39; &gt; &#x2F;etc&#x2F;profile.d&#x2F;mysql.sh</span><br><span class="line">source &#x2F;etc&#x2F;profile.d&#x2F;mysql.sh</span><br><span class="line"></span><br><span class="line">#准备存放数据库的目录  </span><br><span class="line">#注意：存放数据库和存放操作系统的空间不在同一块，可使用逻辑卷</span><br><span class="line">#创建用于数据库的lVM空间</span><br><span class="line"></span><br><span class="line">#分区</span><br><span class="line">fdisk &#x2F;dev&#x2F;sda</span><br><span class="line">    n</span><br><span class="line">    Using default value</span><br><span class="line">    +50G</span><br><span class="line">    t</span><br><span class="line">    L</span><br><span class="line">    8e</span><br><span class="line">    w</span><br><span class="line">lsblk</span><br><span class="line"></span><br><span class="line">#同步磁盘和内存信息</span><br><span class="line">partprobe</span><br><span class="line"></span><br><span class="line">#创建逻辑卷</span><br><span class="line">pvcreate &#x2F;dev&#x2F;sda6</span><br><span class="line">vgcreate vg0 &#x2F;dev&#x2F;sda6 -s 16M</span><br><span class="line">lvcreate -n lv_mysqldata -l 100%FREE vg0</span><br><span class="line"></span><br><span class="line">#创建文件系统</span><br><span class="line">mkfs.xfs &#x2F;dev&#x2F;vg0&#x2F;lv_mysqldata  </span><br><span class="line"></span><br><span class="line">#创建挂载目录</span><br><span class="line">mkdir &#x2F;data&#x2F;mysqldb -pv </span><br><span class="line"></span><br><span class="line">#将挂载信息保存到文件中，开机自动挂载</span><br><span class="line">blkid </span><br><span class="line">vim &#x2F;etc&#x2F;fstab  </span><br><span class="line">UUID&#x3D;611fbf6d-d210-4ebc-a18b-8d8d5ea59ec9 &#x2F;data&#x2F;mysqldb xfs defaults 0 0</span><br><span class="line"></span><br><span class="line">#更新挂载信息</span><br><span class="line">mount -a</span><br><span class="line"></span><br><span class="line">#修改权限</span><br><span class="line">chowm -R mysql.mysql &#x2F;data&#x2F;mysqldb&#x2F;</span><br><span class="line">chmod 770 &#x2F;data&#x2F;mysqldb&#x2F;</span><br><span class="line"></span><br><span class="line">#创建系统数据库</span><br><span class="line">yum install  libaio-devel.x86_64 -y </span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">scripts&#x2F;mysql_install_db --datadir&#x3D;&#x2F;data&#x2F;mysqldb --user&#x3D;mysql</span><br><span class="line"></span><br><span class="line">#创建配置文件</span><br><span class="line">cp my-innodb-heavy-4G.cnf &#x2F;etc&#x2F;my.cnf</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">port            &#x3D; 3306</span><br><span class="line">datadir         &#x3D; &#x2F;data&#x2F;mysqldb</span><br><span class="line">socket          &#x3D; &#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">#innodb_additional_mem_pool_size &#x3D; 16M</span><br><span class="line"></span><br><span class="line">#创建服务脚本，并启动服务</span><br><span class="line">chkconfig --list</span><br><span class="line">cp &#x2F;urs&#x2F;local&#x2F;mysql&#x2F;supportfile&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysqld</span><br><span class="line">chkconfig --add mysqld </span><br><span class="line">chkconfig --list</span><br><span class="line">service mysql start </span><br><span class="line"></span><br><span class="line">#安全初始化</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysql_secure_installation</span><br><span class="line"></span><br><span class="line">#手动修改mysql数据库用户密码</span><br><span class="line">.&#x2F;bin&#x2F;mysqladmin -u root password &#39;new-password&#39;</span><br><span class="line">.&#x2F;bin&#x2F;mysqladmin -u root -h localhost password &#39;new-password&#39;</span><br></pre></td></tr></table></figure>

<p>三、源码编译安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建mysql用户账号</span><br><span class="line">[root@centos7 ~]# getent passwd mysql</span><br><span class="line">[root@centos7 ~]# useradd -r -s &#x2F;sbin&#x2F;nologin mysql</span><br><span class="line">[root@centos7 ~]# id mysql</span><br><span class="line">uid&#x3D;998(mysql) gid&#x3D;996(mysql) groups&#x3D;996(mysql)</span><br><span class="line"></span><br><span class="line">#创建数据库存放的目录</span><br><span class="line">[root@centos7 ~]#mkdir -pv &#x2F;data&#x2F;mysqldb</span><br><span class="line"></span><br><span class="line">#准备开发工具包</span><br><span class="line">yum groupinstall &quot;development tools&quot; </span><br><span class="line">yum install libaio-devel bison bison-devel zlib-devel</span><br><span class="line">openssl-devel ncurses-devel libcurl-devel libarchive-devel</span><br><span class="line">boost-devel gcc gcc-c++ cmake libevent-devel</span><br><span class="line"></span><br><span class="line">#准备mariadb源码并解压包</span><br><span class="line">[root@centos7 ~]#tar xvf mariadb-10.2.12.tar.gz </span><br><span class="line"></span><br><span class="line">#编译选项参考:</span><br><span class="line">https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;sourceconfiguration-options.html</span><br><span class="line"></span><br><span class="line">#生成make文件</span><br><span class="line">[root@centos7 mariadb-10.2.12]# cmakecmake . \</span><br><span class="line">&gt; -DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql \</span><br><span class="line">&gt; -DMYSQL_DATADIR&#x3D;&#x2F;data&#x2F;mysqldb \</span><br><span class="line">&gt; -DSYSCONFDIR&#x3D;&#x2F;etc \</span><br><span class="line">&gt; -DMYSQL_USER&#x3D;mysql \</span><br><span class="line">&gt; -DWITH_INNOBASE_STORAFE_ENGINE&#x3D;1 \</span><br><span class="line">&gt; -DWITH_ARCHIVE_STORAGE_ENGINE&#x3D;1 \</span><br><span class="line">&gt; -DWITH_BLACKHOLE_STORAGE_ENGINE&#x3D;1 \</span><br><span class="line">&gt; -DWITH_PARTITION_STORAGE_ENGINE&#x3D;1 \</span><br><span class="line">&gt; -DWITHOUT_MROONGA_STORAGE_ENGINE&#x3D;1 \</span><br><span class="line">&gt; -DWITH_DEBUG&#x3D;0 \</span><br><span class="line">&gt; -DWITH_READLINE&#x3D;1 \</span><br><span class="line">&gt; -DWITH_SSL&#x3D;system \</span><br><span class="line">&gt; -DWITH_ZLIB&#x3D;system \</span><br><span class="line">&gt; -DWITH_LIBWRAP&#x3D;0 \</span><br><span class="line">&gt; -DENABLED_LOCAL_INFILE&#x3D;1 \</span><br><span class="line">&gt; -DMYSQL_UNIX_ADDR&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql.sock \</span><br><span class="line">&gt; -DDEFAULT_CHARSET&#x3D;utf8 \</span><br><span class="line">&gt; -DDEFAULT_COLLATION&#x3D;utf8_general_ci</span><br><span class="line"></span><br><span class="line">#编译安装mariadb</span><br><span class="line">[root@centos7 mariadb-10.2.12]# make -j 4 &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">-DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;path&#x2F;to&#x2F;mysql  主程序（二进制可执行程序）</span><br><span class="line">-DMYSQL_DATADIR&#x3D;&#x2F;data&#x2F;mysqldb&#x2F;         数据库文件</span><br><span class="line">-DSYSCONFDIR&#x3D;&#x2F;etc                      配置文件路径</span><br><span class="line">-DMYSQL_UNIX_ADDR&#x3D;&#x2F;path&#x2F;to&#x2F;mysql.sock  socket文件 </span><br><span class="line">-DDEFAULT_CHARSET&#x3D;utf8                 服务器端字符集设置</span><br><span class="line"></span><br><span class="line">#添加环境变量</span><br><span class="line">echo &#39;PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin:$PATH&#39; &gt; &#x2F;etc&#x2F;profile.d&#x2F;mysql.sh</span><br><span class="line">source &#x2F;etc&#x2F;profile.d&#x2F;mysql.sh</span><br><span class="line"></span><br><span class="line">#创建数据库</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;scripts&#x2F;mysql_install_db --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql --datadir&#x3D;&#x2F;data&#x2F;mysqldb --user&#x3D;mysql</span><br><span class="line"></span><br><span class="line">#创建配置文件</span><br><span class="line">cp &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;my-innodb-heavy-4G.cnf &#x2F;etc&#x2F;my.cnf</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqldb]</span><br><span class="line">port            &#x3D; 3306</span><br><span class="line">socket          &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line">datadir         &#x3D; &#x2F;data&#x2F;mysqldata</span><br><span class="line">#innodb_additional_mem_pool_size &#x3D; 16M</span><br><span class="line"></span><br><span class="line">#创建启动脚本</span><br><span class="line">cp &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;mysqld</span><br><span class="line">chkconfig --add mysqld</span><br><span class="line">chkconfig --list</span><br><span class="line"></span><br><span class="line">#修改实例目录权限</span><br><span class="line">chown -R mysql.mysql &#x2F;data&#x2F;mysqldb&#x2F;</span><br><span class="line"></span><br><span class="line">#修改主程序目录权限</span><br><span class="line">chgrp -R mysql &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">chmod 775 &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line"></span><br><span class="line">#启动服务</span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line">#安全初始化</span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（四）</title>
    <url>/2020/06/26/mysql4/</url>
    <content><![CDATA[<h4 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h4><h5 id="1、为什么要备份-？"><a href="#1、为什么要备份-？" class="headerlink" title="1、为什么要备份 ？"></a><strong>1、为什么要备份 ？</strong></h5><p>灾难恢复：硬件故障、软件故障、自然灾害、黑客攻击、误操作测试等数据丢失场景</p>
<p>备份要点</p>
<blockquote>
<p>能容忍最多丢失多少数据<br>恢复数据需要在多长时间内完成<br>需要恢复哪些数据</p>
</blockquote>
<p>还原要点</p>
<blockquote>
<p>做还原测试，用于测试备份的可用性<br>还原演练  </p>
</blockquote>
<p>备份类型：</p>
<blockquote>
<p>完全备份：整个数据集</p>
<p>部分备份：只备份数据子集，如部分库或表</p>
</blockquote>
<p>完全备份、增量备份、差异备份</p>
<blockquote>
<p>增量备份：仅备份最近一次完全备份或增量备份（如果存在增量）以来变化的数据，备份较快，还原复杂<br>差异备份：仅备份最近一次完全备份以来变化的数据，备份较慢，还原简单</p>
</blockquote>
<p><strong>注意：二进制日志文件不应该与数据文件放在同一磁盘</strong>  </p>
<p>冷、温、热备份</p>
<blockquote>
<p>冷备：读写操作均不可进行<br>温备：读操作可执行；但写操作不可执行<br>热备：读写操作均可执行</p>
<p>MyISAM：温备，不支持热备<br>InnoDB: 都支持</p>
</blockquote>
<p>物理和逻辑备份</p>
<blockquote>
<p>物理备份：直接复制数据文件进行备份，与存储引擎有关，占用较多的空间，速度快</p>
<p>逻辑备份：从数据库中“导出”数据另存而进行的备份，与存储引擎无关，占用空间少，速度慢，可能丢失精度  </p>
</blockquote>
<p>备份时需要考虑的因素</p>
<blockquote>
<p>温备的持锁多久<br>备份产生的负载<br>备份过程的时长<br>恢复过程的时长</p>
</blockquote>
<p><strong>备份什么</strong></p>
<blockquote>
<p>数据<br>二进制日志、 InnoDB的事务日志<br>程序代码（存储过程、存储函数、触发器、事件调度器）<br>服务器的配置文件</p>
</blockquote>
<p>设计备份方案</p>
<blockquote>
<p>数据集：完全+增量<br>备份手段：物理，逻辑 </p>
</blockquote>
<h5 id="2、备份工具"><a href="#2、备份工具" class="headerlink" title="2、备份工具"></a><strong>2、备份工具</strong></h5><p>mysqldump：逻辑备份工具，适用所有存储引擎，温备；支持完全或部分备份；对InnoDB存储引擎支持热备</p>
<p>cp, tar等复制归档工具：物理备份工具，适用所有存储引擎；只支持冷备；完全和部分备份</p>
<p>LVM的快照：先加锁，做快照后解锁，几乎热备；借助文件系统管理工具进行备份</p>
<p>mysqlhotcopy：几乎冷备；仅适用于MyISAM存储引擎   </p>
<p><strong>备份工具的选择</strong></p>
<ol>
<li><p>mysqldump+复制binlog：</p>
<blockquote>
<p>mysqldump：完全备份<br>复制binlog中指定时间范围的event：增量备份</p>
</blockquote>
</li>
<li><p>LVM快照+复制binlog：</p>
<blockquote>
<p>LVM快照：使用cp或tar等做物理备份；完全备份</p>
<p>复制binlog中指定时间范围的event：增量备份</p>
</blockquote>
</li>
<li><p>xtrabackup：</p>
<blockquote>
<p>由Percona提供支持对InnoDB做热备(物理备份)的工具，支持完全备份、增量备份</p>
</blockquote>
</li>
<li><p>MariaDB Backup： 从MariaDB 10.1.26开始集成，基于Percona XtraBackup 2.3.8实现</p>
</li>
<li><p>mysqlbackup：热备份， MySQL Enterprise Edition组件  </p>
</li>
</ol>
<p>逻辑备份工具： mysqldump, mydumper, phpMyAdmin</p>
<p>Schema和数据存储在一起、巨大的SQL语句、单个巨大的备份文件</p>
<h5 id="3、mysqldump工具："><a href="#3、mysqldump工具：" class="headerlink" title="3、mysqldump工具："></a><strong>3、mysqldump工具：</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">客户端命令，通过mysql协议连接至mysqld服务器进行备份</span><br><span class="line"></span><br><span class="line">mysqldump [OPTIONS] database [tables]</span><br><span class="line">mysqldump [OPTIONS] –B DB1 [DB2 DB3...]</span><br><span class="line">mysqldump [OPTIONS] –A [OPTIONS]</span><br><span class="line"></span><br><span class="line">mysqldump参考：https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;mysqldump.html  </span><br><span class="line"></span><br><span class="line">mysqldump常见选项：</span><br><span class="line">-A， --all-databases 备份所有数据库，含create database</span><br><span class="line"></span><br><span class="line">-B , --databases db_name… 指定备份的数据库，包括create database语句</span><br><span class="line"></span><br><span class="line">-E, --events：备份相关的所有event scheduler</span><br><span class="line"></span><br><span class="line">-R, --routines：备份所有存储过程和存储函数</span><br><span class="line"></span><br><span class="line">--triggers：备份表相关的触发器，默认启用,用--skiptriggers，不备份触发器</span><br><span class="line"></span><br><span class="line">--master-data[&#x3D;#]： 此选项须启用二进制日志</span><br><span class="line">    1：所备份的数据之前加一条记录为CHANGE MASTER TO语句，非注释，不指定#，默认为1</span><br><span class="line">    2：记录为注释的CHANGE MASTER TO语句，此选项会自动关闭--lock-tables功能，自动打开--lock-		all-tables功能（ 除非开启--single-transaction）  </span><br><span class="line"></span><br><span class="line">-F, --flush-logs ：备份前滚动日志，锁定表完成后，执行flush logs命令,生成新的二进制日志文件，配合-A时，会导致刷新多次数据库，在同一时刻执行转储和日志刷新，则应同时使用--flush-logs和-x， --master-data或-single-transaction,此时只刷新一次，建议：和-x， --master-data或 --single-transaction一起使用</span><br><span class="line"></span><br><span class="line">--compact 去掉注释，适合调试，生产不使用</span><br><span class="line"></span><br><span class="line">-d, --no-data 只备份表结构</span><br><span class="line"></span><br><span class="line">-t, --no-create-info 只备份数据,不备份create table</span><br><span class="line"></span><br><span class="line">-n,--no-create-db 不备份create database，可被-A或-B覆盖</span><br><span class="line"></span><br><span class="line">--flush-privileges 备份mysql或相关时需要使用</span><br><span class="line"></span><br><span class="line">-f, --force 忽略SQL错误，继续执行</span><br><span class="line"></span><br><span class="line">--hex-blob 使用十六进制符号转储二进制列（例如，“abc”变为0x616263），受影响的数据类型包括BINARY， VARBINARY，BLOB， BIT</span><br><span class="line"></span><br><span class="line">-q, --quick 不缓存查询，直接输出，加快备份速度 </span><br><span class="line"></span><br><span class="line">MyISAM备份选项：</span><br><span class="line">	支持温备；不支持热备，所以必须先锁定要备份的库，而后启动备份操作</span><br><span class="line"></span><br><span class="line">    锁定方法如下：</span><br><span class="line">    -x,--lock-all-tables：加全局读锁，锁定所有库的所有表，同时加--single-transaction或--lock-	tables选项会关闭此选项功能</span><br><span class="line"></span><br><span class="line">    注意：数据量大时，可能会导致长时间无法并发访问数据库</span><br><span class="line"></span><br><span class="line">    -l,--lock-tables：对于需要备份的每个数据库，在启动备份之前分别锁定其所有表，默认为on,--skip-		lock-tables选项可禁用,对备份MyISAM的多个库,可能会造成数据不一致</span><br><span class="line"></span><br><span class="line">    注意：以上选项对InnoDB表一样生效，实现温备，但不推荐使用</span><br><span class="line">    </span><br><span class="line">InnoDB备份选项：</span><br><span class="line">    支持热备，可用温备但不建议用</span><br><span class="line">    </span><br><span class="line">    --single-transaction</span><br><span class="line">    1、此选项Innodb中推荐使用，不适用MyISAM，此选项会开始备份前，先执行START TRANSACTION指令，并</span><br><span class="line">    且在备份期间，不允许对数据进行修改操作</span><br><span class="line">    </span><br><span class="line">    2、此选项和--lock-tables（此选项隐含提交挂起的事务）选项是相互排斥</span><br><span class="line">    </span><br><span class="line">    3、备份大型表时，建议将--single-transaction选项和--quick结合一起使用</span><br></pre></td></tr></table></figure>

<h5 id="4、生产备份策略"><a href="#4、生产备份策略" class="headerlink" title="4、生产备份策略"></a><strong>4、生产备份策略</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#InnoDB建议备份策略</span><br><span class="line">mysqldump –uroot –A –F –E –R --single-transaction --master-data&#x3D;1 --flush-privileges --triggers --hexblob &gt;$BACKUP_DIR&#x2F;fullbak_$BACKUP_TIME.sql</span><br><span class="line"></span><br><span class="line">#MyISAM建议备份策略</span><br><span class="line">mysqldump –uroot –A –F –E –R –x --master-data&#x3D;1 --flush-privileges --triggers --hex-blob &gt;$BACKUP_DIR&#x2F;fullbak_$BACKUP_TIME.sql</span><br></pre></td></tr></table></figure>

<h5 id="5、基于LVM的备份"><a href="#5、基于LVM的备份" class="headerlink" title="5、基于LVM的备份"></a><strong>5、基于LVM的备份</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) 请求锁定所有表</span><br><span class="line">mysql&gt; FLUSH TABLES WITH READ LOCK;</span><br><span class="line"></span><br><span class="line">(2) 记录二进制日志文件及事件位置</span><br><span class="line">mysql&gt; FLUSH LOGS;</span><br><span class="line">mysql&gt; SHOW MASTER STATUS;</span><br><span class="line">mysql -e &#39;SHOW MASTER STATUS&#39; &gt; &#x2F;PATH&#x2F;TO&#x2F;SOMEFILE</span><br><span class="line"></span><br><span class="line">(3) 创建快照</span><br><span class="line">lvcreate -L # -s -p r -n NAME &#x2F;DEV&#x2F;VG_NAME&#x2F;LV_NAME</span><br><span class="line"></span><br><span class="line">(4) 释放锁</span><br><span class="line">mysql&gt; UNLOCK TABLES;</span><br><span class="line"></span><br><span class="line">(5) 挂载快照卷，执行数据备份</span><br><span class="line"></span><br><span class="line">(6) 备份完成后，删除快照卷</span><br><span class="line"></span><br><span class="line">(7) 制定好策略，通过原卷备份二进制日志</span><br></pre></td></tr></table></figure>

<h4 id="xtrabackup"><a href="#xtrabackup" class="headerlink" title="xtrabackup"></a>xtrabackup</h4><p><strong>1、Percona</strong></p>
<p>官网： <a href="http://www.percona.com" target="_blank" rel="noopener">www.percona.com</a></p>
<p>percona-server</p>
<p>InnoDB –&gt; XtraDB</p>
<p><strong>2、Xtrabackup</strong><br>percona提供的mysql数据库备份工具，惟一开源的能够对innodb和xtradb数据库进行热备的工具</p>
<p>特点：<br>(1)备份还原过程快速、可靠<br>(2)备份过程不会打断正在执行的事务<br>(3)能够基于压缩等功能节约磁盘空间和流量<br>(4)自动实现备份检验<br>(5)开源，免费  </p>
<p><strong>3、Xtrabackup2.2版之前包括4个可执行文件：</strong></p>
<blockquote>
<p>Innobackupex: perl 脚本<br>Xtrabackup: C/C++ 编译的二进制<br>Xbcrypt:加解密<br>Xbstream:支持并发写的流文件格式</p>
</blockquote>
<p>xtrabackup是用来备份 InnoDB 表的，不能备份非 InnoDB 表，和 mysqld server 没有交互；</p>
<p> innobackupex 脚本用来备份非InnoDB 表，同时会调用 xtrabackup 命令来备份 InnoDB 表，还<br>会和 mysqld server 发送命令进行交互，如加读锁（ FTWRL）、获取位点（ SHOW SLAVE STATUS）等。即innobackupex是在xtrabackup 之上做了一层封装实现的。</p>
<p>虽然目前一般不用 MyISAM 表，只是mysql 库下的系统表是MyISAM 的，因此备份基本都通innobackupex 命令进行  </p>
<p><strong>4、Xtrabackup备份过程</strong>  </p>
<img src="/images/mysql4/mysql13.jpg" style="zoom:50%;" />

<p><strong>5、Xtrabackup的新版变化</strong>  </p>
<p>xtrabackup版本升级到2.4后， 相比之前的2.1有了比较大的变化： innobackupex 功能全部集成到 xtrabackup 里面，只有一个 binary程序， 另外为了兼容考虑， innobackupex作为xtrabackup 的软链接， 即xtrabackup现在支持非Innodb表备份，并且Innobackupex在下一版本中移除，建议通过xtrabackup替换innobackupex</p>
<p><strong>6、xtrabackup安装</strong></p>
<p>yum install percona-xtrabackup 在EPEL源中<br>最新版本下载安装：<a href="https://www.percona.com/downloads/XtraBackup/LATEST/" target="_blank" rel="noopener">https://www.percona.com/downloads/XtraBackup/LATEST/</a>  </p>
<h4 id="innobakupex备份"><a href="#innobakupex备份" class="headerlink" title="innobakupex备份"></a>innobakupex备份</h4><p>1、使用innobakupex备份时，其会调用xtrabackup备份所有的InnoDB表，复制所有关于表结构定义的相关文件(.frm)、以及MyISAM、 MERGE、 CSV和ARCHIVE表的相关文件，同时还会备份触发器和数据库配置信息相关的文件。</p>
<p>2、这些文件会被保存至一个以时间命名的目录中,在备份时，innobackupex还会在备份目录中创建如下文件：</p>
<blockquote>
<p>(1)xtrabackup_checkpoints：备份类型（如完全或增量）、备份状态（如是否已经为prepared状态）和LSN(日志序列号)范围信息，每个InnoDB页(通常为16k大小)都会包含一个日志序列号，即LSN。 LSN是整个数据库系统的系统版本号，每个页面相关的LSN能够表明此页面最近是如何发生改变的</p>
<p>(2)xtrabackup_binlog_info： mysql服务器当前正在使用的二进制日志文件及至备份这一刻为止二进制日志事件的位置  </p>
<p>(3)xtrabackup_binlog_pos_innodb：二进制日志文件及用于InnoDB或XtraDB表的二进制日志文件的当前position</p>
<p>(4)xtrabackup_binary：备份中用到的xtrabackup的可执行文件</p>
<p>(5)backup-my.cnf：备份命令用到的配置选项信息在使用innobackupex进行备份时，还可以使用–notimestamp选项来阻止命令自动创建一个以时间命名的目录；innobackupex命令将会创建一个BACKUP-DIR目录来存储备份数据  </p>
</blockquote>
<p>3、Xtrabackup用法</p>
<p>备份： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">innobackupex [option] BACKUP-ROOT-DIR</span><br><span class="line"></span><br><span class="line">选项说明：</span><br><span class="line">--user：该选项表示备份账号</span><br><span class="line"></span><br><span class="line">--password：该选项表示备份的密码</span><br><span class="line"></span><br><span class="line">--host：该选项表示备份数据库的地址</span><br><span class="line"></span><br><span class="line">--databases：该选项接受的参数为数据名，如果要指定多个数据库，彼此间需要以空格隔开；如： &quot;xtra_test dba_test&quot;，同时，在指定某数据库时，也可以只指定其中的某张表。如： &quot;mydatabase.mytable&quot;。该选项对innodb引擎表无效，还是会备份所有innodb表</span><br><span class="line"></span><br><span class="line">--defaults-file：该选项指定了从哪个文件读取MySQL配置，必须放在命令行第一个选项的位置</span><br><span class="line"></span><br><span class="line">--incremental：该选项表示创建一个增量备份，需要指定--incrementalbasedir</span><br><span class="line"></span><br><span class="line">--incremental-basedir：该选项表示接受了一个字符串参数指定含有full backup的目录为增量备份的base目录，与--incremental同时使用--incremental-dir：该选项表示增量备份的目录</span><br><span class="line"></span><br><span class="line">--include&#x3D;name：指定表名，格式： databasename.tablename</span><br></pre></td></tr></table></figure>

<p>还原前准备： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">innobackupex --apply-log [option] BACKUP-DIR</span><br><span class="line"></span><br><span class="line">选项说明：</span><br><span class="line"></span><br><span class="line">--apply-log：一般情况下,在备份完成后，数据尚且不能用于恢复操作，因为备份的数据中可能会包含尚未提交的事务或已经提交但尚未同步至数据文件中的事务。因此，此时数据文件仍处理不一致状态。此选项作用是通过回滚未提交的事务及同步已经提交的事务至数据文件使数据文件处于一致性状态</span><br><span class="line"></span><br><span class="line">--use-memory：该选项表示和--apply-log选项一起使用，prepare备份的时候， xtrabackup做crash recovery分配的内存大小，单位字节。也可(1MB,1M,1G,1GB)，推荐1G</span><br><span class="line"></span><br><span class="line">--defaults-file：该选项指定了从哪个文件读取MySQL配置，必须放在命令行第一个选项的位置</span><br><span class="line"></span><br><span class="line">--export：表示开启可导出单独的表之后再导入其他Mysql中</span><br><span class="line"></span><br><span class="line">--redo-only：这个选项在prepare base full backup，往其中merge增量备份时候使用</span><br></pre></td></tr></table></figure>

<p>还原： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">innobackupex --copy-back [选项] BACKUP-DIR</span><br><span class="line">innobackupex --move-back [选项] [--defaultsgroup&#x3D;GROUP-NAME] BACKUP-DIR</span><br><span class="line"></span><br><span class="line">选项说明：</span><br><span class="line"></span><br><span class="line">--copy-back：做数据恢复时将备份数据文件拷贝到MySQL服务器的datadir</span><br><span class="line"></span><br><span class="line">--move-back：这个选项与--copy-back相似，唯一的区别是它不拷贝文件，而是移动文件到目的地。这个选项移除backup文件，用时候必须小心。使用场景：没有足够的磁盘空间同事保留数据文件和Backup副本</span><br></pre></td></tr></table></figure>

<p>还原注意事项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.datadir目录必须为空。除非指定innobackupex --forcenon-empty-directorires选项指定，否则--copy-backup选项不会覆盖</span><br><span class="line"></span><br><span class="line">2.在restore之前,必须shutdown MySQL实例，你不能将一个运行中的实例restore到datadir目录中</span><br><span class="line"></span><br><span class="line">3.由于文件属性会被保留，大部分情况下你需要在启动实例之前将文件的属主改为mysql，这些文件将属于创建备份的用户chown -R mysql:mysql &#x2F;data&#x2F;mysql，以上需要在用户调用innobackupex之前完成</span><br><span class="line"></span><br><span class="line">4.--force-non-empty-directories：指定该参数时候，使得innobackupex --copy-back或--move-back选项转移文件到非空目录，已存在的文件不会被覆盖。如果--copy-back和--move-back文件需要从备份目录拷贝一个在datadir已经存在的文件，会报错失败</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（五）</title>
    <url>/2020/06/26/mysql5/</url>
    <content><![CDATA[<h4 id="一、MySQL复制"><a href="#一、MySQL复制" class="headerlink" title="一、MySQL复制"></a>一、MySQL复制</h4><p>扩展方式： Scale Up ， Scale Out</p>
<p><strong>MySQL的扩展</strong></p>
<p>复制：每个节点都有相同的数据集</p>
<blockquote>
<p>向外扩展<br>二进制日志<br>单向</p>
</blockquote>
<p>复制的功用：</p>
<blockquote>
<p>数据分布<br>负载均衡读<br>备份<br>高可用和故障切换<br>MySQL升级测试  </p>
</blockquote>
<p><img src="/images/mysql5/mysql1.jpg" alt=""></p>
<p><img src="/images/mysql5/mysql2.jpg" alt=""></p>
<p><strong>MySQL垂直分区</strong>  </p>
<p><img src="/images/mysql5/mysql3.jpg" alt=""></p>
<p><strong>MySQL水平分片（ Sharding）</strong>  </p>
<p><img src="/images/mysql5/mysql4.jpg" alt=""></p>
<p>对应shard中查询相关数据  </p>
<p><img src="/images/mysql5/mysql5.jpg" alt=""></p>
<h4 id="二、主从"><a href="#二、主从" class="headerlink" title="二、主从"></a>二、主从</h4><p><strong>主从复制线程：</strong></p>
<blockquote>
<p>主节点：<br>dump Thread：为每个Slave的I/O Thread启动一个dump线程，用于向其发送binary log events</p>
<p>从节点：<br>I/O Thread：向Master请求二进制日志事件，并保存于中继日志中<br>SQL Thread：从中继日志中读取日志事件，在本地完成重放</p>
</blockquote>
<p><strong>跟复制功能相关的文件：</strong></p>
<blockquote>
<p>master.info：用于保存slave连接至master时的相关信息，例如账号、密码、服务器地址等</p>
<p>relay-log.info：保存在当前slave节点上已经复制的当前二进制日志和本地replay log日志的对应关系  </p>
</blockquote>
<p><strong>主从复制特点：</strong></p>
<blockquote>
<p>异步复制</p>
<p>主从数据不一致比较常见</p>
<p>复制架构：<br>1、Master/Slave, Master/Master, 环状复制<br>2、一主多从<br>3、从服务器还可以再有从服务器<br>4、一从多主:适用于多个不同数据库</p>
</blockquote>
<p><strong>复制需要考虑二进制日志事件记录格式</strong></p>
<blockquote>
<p>STATEMENT（ 5.0之前）、 ROW（ 5.1之后，推荐）、 MIXED</p>
</blockquote>
<p><strong>各种复制模型实战：</strong></p>
<blockquote>
<p>主从、主主、半同步复制、复制过滤器  </p>
</blockquote>
<p><strong>MySQL复制模型</strong>  </p>
<p><img src="/images/mysql5/mysql6.jpg" alt=""></p>
<p><strong>主从配置过程：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考文档： </span><br><span class="line">https:&#x2F;&#x2F;mariadb.com&#x2F;kb&#x2F;en&#x2F;library&#x2F;setting-upreplication&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.5&#x2F;en&#x2F;replicationconfiguration.html</span><br><span class="line"></span><br><span class="line">主节点：</span><br><span class="line">(1) 启动二进制日志</span><br><span class="line">[mysqld]</span><br><span class="line">log_bin&#x3D;mysql-bin</span><br><span class="line"></span><br><span class="line">(2) 为当前节点设置一个全局惟的ID号</span><br><span class="line">[mysqld]</span><br><span class="line">server_id&#x3D;#</span><br><span class="line"></span><br><span class="line">(3) 创建有复制权限的用户账号</span><br><span class="line">GRANT REPLCATION SLAVE ON *.* TO &#39;repluser&#39;@&#39;HOST&#39; IDENTIFIED BY &#39;replpass&#39;; </span><br><span class="line"></span><br><span class="line">从节点配置：</span><br><span class="line">(1) 启动中继日志</span><br><span class="line">[mysqld]</span><br><span class="line">server_id&#x3D;# 为当前节点设置一个全局惟的ID号</span><br><span class="line">relay_log&#x3D;relay-log relay log的文件路径，默认值hostname-relay-bin</span><br><span class="line">relay_log_index&#x3D;relay-log.index 默认值hostname-relay-bin.index</span><br><span class="line"></span><br><span class="line">(2) 使用有复制权限的用户账号连接至主服务器，并启动复制线程</span><br><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST&#x3D;&#39;host&#39;,</span><br><span class="line">MASTER_USER&#x3D;&#39;repluser&#39;, MASTER_PASSWORD&#x3D;&#39;replpass&#39;,</span><br><span class="line">MASTER_LOG_FILE&#x3D;&#39;mysql-bin.xxxxx&#39;, MASTER_LOG_POS&#x3D;#;</span><br><span class="line">mysql&gt; START SLAVE [IO_THREAD|SQL_THREAD];</span><br><span class="line"></span><br><span class="line">如果主节点已经运行了一段时间，且有大量数据时，如何配置并启动slave节点</span><br><span class="line">(1) 通过备份恢复数据至从服务器</span><br><span class="line">(2) 复制起始位置为备份时，二进制日志文件及其POS</span><br><span class="line">(3) 如果要启用级联复制,需要在从服务器启用以下配置</span><br><span class="line">[mysqld]</span><br><span class="line">log_bin</span><br><span class="line">log_slave_updates</span><br></pre></td></tr></table></figure>

<p><strong>复制架构中应该注意的问题：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、限制从服务器为只读</span><br><span class="line">	在从服务器上设置read_only&#x3D;ON 注意：此限制对拥有SUPER权限的用户均无效</span><br><span class="line">	阻止所有用户, 包括主服务器复制的更新 mysql&gt; FLUSH TABLES WITH READ LOCK;  </span><br><span class="line">	</span><br><span class="line">2、如何保证主从复制的事务安全</span><br><span class="line">参考文档 https:&#x2F;&#x2F;mariadb.com&#x2F;kb&#x2F;en&#x2F;library&#x2F;server-system-variables&#x2F;</span><br><span class="line"></span><br><span class="line">在master节点启用参数：</span><br><span class="line">sync_binlog&#x3D;1 每次写后立即同步二进制日志到磁盘，性能差</span><br><span class="line"></span><br><span class="line">如果用到的为InnoDB存储引擎： </span><br><span class="line">innodb_flush_logs_at_trx_commit&#x3D;1 #每次事务提交立即同步日志写磁盘</span><br><span class="line">innodb_support_xa&#x3D;ON 默认值，分布式事务MariaDB10.3.0废除</span><br><span class="line">sync_master_info&#x3D;# 多少次事件后master.info同步到磁盘</span><br><span class="line"></span><br><span class="line">在slave节点启用服务器选项：</span><br><span class="line">--skip_slave_start&#x3D;ON 不自动启动slave</span><br><span class="line"></span><br><span class="line">在slave节点启用参数：</span><br><span class="line">sync_relay_log&#x3D;#   #次写后同步relay log到磁盘</span><br><span class="line">sync_relay_log_info&#x3D;# 多个次事务后同步relay-log.info到磁盘</span><br></pre></td></tr></table></figure>

<h4 id="三、主主"><a href="#三、主主" class="headerlink" title="三、主主"></a>三、主主</h4><p><strong>主主复制：互为主从</strong></p>
<blockquote>
<p>容易产生的问题：数据不一致；因此慎用</p>
<p>考虑要点：自动增长id<br>1、配置一个节点使用奇数id<br>auto_increment_offset=1 开始点<br>auto_increment_increment=2 增长幅度</p>
<p>2、另一个节点使用偶数id<br>auto_increment_offset=2<br>auto_increment_increment=2  </p>
</blockquote>
<p><strong>主主复制的配置步骤：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) 各节点使用一个惟一server_id</span><br><span class="line">(2) 都启动binary log和relay log</span><br><span class="line">(3) 创建拥有复制权限的用户账号</span><br><span class="line">(4) 定义自动增长id字段的数值范围各为奇偶</span><br><span class="line">(5) 均把对方指定为主节点，并启动复制线程</span><br></pre></td></tr></table></figure>

<h4 id="四、半同步"><a href="#四、半同步" class="headerlink" title="四、半同步"></a><strong>四、半同步</strong></h4><blockquote>
<p>默认情况下， MySQL的复制功能是异步的，异步复制可以提供最佳的性能，主库把binlog日志发送给从库即结束，并不验证从库是否接收完毕。这意味着当主服务器或从服务器端发生故障时，有可能从服务器没有接收到主服务器发送过来的binlog日志，这就会造成主服务器和从服务器的数据不一致，甚至在恢复时造成数据的丢失  </p>
</blockquote>
<p><img src="/images/mysql5/mysql8.jpg" alt=""></p>
<p><strong>半同步复制实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主服务器配置:</span><br><span class="line">mysql&gt; INSTALL PLUGIN rpl_semi_sync_master SONAME &#39;semisync_master.so&#39;;</span><br><span class="line">mysql&gt; SET GLOBAL VARIABLES rpl_semi_sync_master_enabled&#x3D;1;</span><br><span class="line">mysql&gt; SHOW GLOBAL VARIABLES LIKE &#39;%semi%&#39;;</span><br><span class="line">mysql&gt; SHOW GLOBAL STATUS LIKE &#39;%semi%‘;</span><br><span class="line"></span><br><span class="line">从服务器配置:</span><br><span class="line">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME &#39;semisync_slave.so&#39;;</span><br><span class="line">mysql&gt; SET GLOBAL VARIABLES rpl_semi_sync_slave_enabled&#x3D;1;</span><br></pre></td></tr></table></figure>

<h4 id="五、复制过滤器"><a href="#五、复制过滤器" class="headerlink" title="五、复制过滤器"></a>五、复制过滤器</h4><p>让从节点仅复制指定的数据库，或指定数据库的指定表</p>
<p><strong>两种实现方式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) 主服务器仅向二进制日志中记录与特定数据库(特定表)相关的事件</span><br><span class="line"></span><br><span class="line">问题：时间还原无法实现；不建议使用</span><br><span class="line">binlog_do_db&#x3D; 数据库白名单列表，用逗号分隔</span><br><span class="line">binlog_ignore_db&#x3D; 数据库黑名单列表，和前项不要同时使用</span><br><span class="line"></span><br><span class="line">(2) 从服务器SQL_THREAD在replay中继日志中的事件时，仅读取与特定数据库(特定表)相关的事件并应用于本地问题：会造成网络及磁盘IO浪费</span><br></pre></td></tr></table></figure>

<p><strong>复制过滤器从服务器上的相关设置</strong></p>
<blockquote>
<p>replicate_do_db= 指定复制库的白名单</p>
<p>replicate_ignore_db= 指定复制库黑名单</p>
<p>replicate_do_table= 指定复制表的白名单</p>
<p>replicate_ignore_table= 指定复制表的黑名单</p>
<p>replicate_wild_do_table= foo%.bar% 支持通配符</p>
<p>replicate_wild_ignore_table=  </p>
</blockquote>
<h4 id="六、复制加密"><a href="#六、复制加密" class="headerlink" title="六、复制加密"></a>六、复制加密</h4><p><strong>基于SSL复制：</strong><br>在默认的主从复制过程或远程连接到MySQL/MariaDB所有<br>的链接通信中的数据都是明文的，外网里访问数据或则复制，<br>存在安全隐患。通过SSL/TLS加密的方式进行复制的方法，<br>来进一步提高数据的安全性</p>
<p><strong>配置实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考文档： https:&#x2F;&#x2F;mariadb.com&#x2F;kb&#x2F;en&#x2F;library&#x2F;replication-withsecure-connections&#x2F;</span><br><span class="line"></span><br><span class="line">1、主服务器开启SSL： [mysqld] 加一行ssl</span><br><span class="line">2、master配置证书和私钥；并且创建一个要求必须使用SSL连接的复制账号</span><br><span class="line">3、slave端使用CHANGER MASTER TO 命令时指明ssl相关选项  </span><br><span class="line"></span><br><span class="line">Master配置</span><br><span class="line">[mysqld]</span><br><span class="line">log-bin</span><br><span class="line">server_id&#x3D;1</span><br><span class="line">ssl</span><br><span class="line">ssl-ca&#x3D;&#x2F;etc&#x2F;my.cnf.d&#x2F;ssl&#x2F;cacert.pem</span><br><span class="line">ssl-cert&#x3D;&#x2F;etc&#x2F;my.cnf.d&#x2F;ssl&#x2F;master.crt</span><br><span class="line">ssl-key&#x3D;&#x2F;etc&#x2F;my.cnf.d&#x2F;ssl&#x2F;master.key </span><br><span class="line"></span><br><span class="line">Slave配置</span><br><span class="line">mysql&gt;CHANGE MASTER TO</span><br><span class="line">MASTER_HOST&#x3D;&#39;MASTERIP&#39;,</span><br><span class="line">MASTER_USER&#x3D;&#39;rep&#39;,</span><br><span class="line">MASTER_PASSWORD&#x3D;&#39;centos&#39;,</span><br><span class="line">MASTER_LOG_FILE&#x3D;&#39;mariadb-bin.000001&#39;,</span><br><span class="line">MASTER_LOG_POS&#x3D;245,</span><br><span class="line">MASTER_SSL&#x3D;1,</span><br><span class="line">MASTER_SSL_CA &#x3D; &#39;&#x2F;etc&#x2F;my.cnf.d&#x2F;ssl&#x2F;cacert.pem&#39;,</span><br><span class="line">MASTER_SSL_CERT &#x3D; &#39;&#x2F;etc&#x2F;my.cnf.d&#x2F;ssl&#x2F;slave.crt&#39;;</span><br><span class="line">MASTER_SSL_KEY &#x3D; &#39;&#x2F;etc&#x2F;my.cnf.d&#x2F;ssl&#x2F;slave.key&#39;;</span><br></pre></td></tr></table></figure>

<p><strong>复制的监控和维护：</strong><br>(1) 清理日志 PURGE</p>
<p>(2) 复制监控<br>SHOW MASTER STATUS<br>SHOW BINLOG EVENTS<br>SHOW BINARY LOGS<br>SHOW SLAVE STATUS<br>SHOW PROCESSLIST</p>
<p>(3) 从服务器是否落后于主服务<br>Seconds_Behind_Master: 0</p>
<p>(4) 如何确定主从节点数据是否一致<br>percona-tools</p>
<p>(5) 数据不一致如何修复<br>删除从数据库，重新复制  </p>
<h4 id="七、MySQL高可用"><a href="#七、MySQL高可用" class="headerlink" title="七、MySQL高可用"></a>七、MySQL高可用</h4><p>一、Master HA或多主模型</p>
<p>二、MMM: Multi Master MySQL，基于主从复制实现</p>
<p>三、MHA： Master HA，对主节点进行监控，可实现自动故障转移至其它从节点；通过提升某一从节点为新的主节点，基于主从复制实现，还需要客户端配合实现，目前MHA主要支持一主多从的架构，要搭建MHA,要求一个复制集群中必须最少有三台数据库服务器，一主二从，即一台充当master，一台充当备用master，另外一台充当从库，出于机器成本的考虑，淘宝进行了改造，目前淘宝TMHA已经支持一主一从<br><a href="https://code.google.com/archive/p/mysql-master-ha/" target="_blank" rel="noopener">https://code.google.com/archive/p/mysql-master-ha/</a></p>
<p>四、Galera Cluster： wresp<br>通过wresp协议在全局实现复制；任何一节点都可读写，不需要主从复制，实现多主可读可写  </p>
<p><strong>a. MHA</strong></p>
<img src="/images/mysql5/mysql9.jpg" style="zoom: 67%;" />

<img src="/images/mysql5/mysql11.jpg" style="zoom: 67%;" />

<p><strong>MHA工作原理</strong></p>
<blockquote>
<p>1 从宕机崩溃的master保存二进制日志事件（ binlog events）<br>2 识别含有最新更新的slave<br>3 应用差异的中继日志（ relay log）到其他的slave<br>4 应用从master保存的二进制日志事件（ binlog events）<br>5 提升一个slave为新的master<br>6 使其他的slave连接新的master进行复制  </p>
</blockquote>
<p><strong>MHA软件由两部分组成， Manager工具包和Node工具包</strong></p>
<blockquote>
<p>Manager工具包主要包括以下几个工具：<br>• masterha_check_ssh 检查MHA的SSH配置状况<br>• masterha_check_repl 检查MySQL复制状况<br>• masterha_manger 启动MHA<br>• masterha_check_status 检测当前MHA运行状态<br>• masterha_master_monitor 检测master是否宕机<br>• masterha_master_switch 制故障转移（自动或手动）<br>• masterha_conf_host 添加或删除配置的server信息  </p>
<p>Node工具包：这些工具通常由MHA Manager的脚本触发，无需人为操作，主要包括以下几个工具：<br>• save_binary_logs 保存和复制master的二进制日志<br>• apply_diff_relay_logs 识别差异的中继日志事件并将其差异的事件应用于其他的slave<br>• filter_mysqlbinlog 去除不必要的ROLLBACK事件（MHA已不再使用这个工具）<br>• purge_relay_logs 清除中继日志（不会阻塞SQL线程）</p>
<p>注意：为了尽可能的减少主库硬件损坏宕机造成的数据丢失，因此在配置MHA的同时建议配置成MySQL 5.5的半同步复制  </p>
</blockquote>
<p><strong>b. MMA</strong>  </p>
<p>自定义扩展：</p>
<blockquote>
<p>secondary_check_script：通过多条网络路由检测master的可用性</p>
<p>master_ip_ailover_script：更新Application使用的masterip</p>
<p>shutdown_script：强制关闭master节点</p>
<p>report_script：发送报告</p>
<p>init_conf_load_script：加载初始配置参数</p>
<p>master_ip_online_change_script：更新master节点ip地址</p>
</blockquote>
<p>配置文件：</p>
<blockquote>
<p>global配置，为各application提供默认配置</p>
<p>application配置：为每个主从复制集群  </p>
</blockquote>
<p><strong>c. Galera Cluster</strong></p>
<p>Galera Cluster：集成了Galera插件的MySQL集群，是一种新型的，数据不共享的，高度冗余的高可用方案，目前Galera Cluster有两个版本，分别是Percona Xtradb Cluster及MariaDB Cluster， Galera本身是具有多主特性的，即采用multi-master的集群架构，是一个既稳健，又在数据一致性、完整性及高性能方面有出色表现的高可用解决方案</p>
<p>三个节点组成了一个集群，与普通的主从架构不同，它们都可以作为主节点，三个节点是对等的，称为multimaster架构，当有客户端要写入或者读取数据时，连接哪个实例都是一样的，读到的数据是相同的，写入某一个节点之后，集群自己会将新数据同步到其它节点上面，这种架构不共享任何数据，是一种高冗余架构  </p>
<img src="/images/mysql5/mysql12.jpg" style="zoom:50%;" />

<p><strong>Galera Cluster特点：</strong>  </p>
<blockquote>
<p><strong>多主架构：</strong> 真正的多点读写的集群，在任何时候读写数据，都是最新的。</p>
<p><strong>同步复制：</strong> 集群不同节点之间数据同步，没有延迟，在数据库挂掉之后，数据不会丢失。</p>
<p><strong>并发复制：</strong> 从节点APPLY数据时，支持并行执行，更好的性能</p>
<p><strong>故障切换：</strong> 在出现数据库故障时，因支持多点写入，切换容易</p>
<p><strong>热插拔：</strong> 在服务期间，如果数据库挂了，只要监控程序发现的够快，不可服务时间就会非常少。在节点故障期间，节点本身对集群的影响非常小</p>
<p><strong>自动节点克隆：</strong> 在新增节点，或者停机维护时，增量数据或者基础数据不需要人工手动备份提供， Galera Cluster会自动拉取在线节点数据，最终集群会变为一致</p>
<p><strong>对应用透明：</strong> 集群的维护，对应用程序是透明的  </p>
</blockquote>
<p><strong>Galera Cluster工作过程：</strong>  </p>
<p><img src="/images/mysql5/mysql13.jpg" alt=""></p>
<p><strong>Galera Cluster官方文档：</strong><br><a href="https://galeracluster.com" target="_blank" rel="noopener">https://galeracluster.com</a><br><a href="https://mariadb.com/kb/en/getting-started-with-mariadb-galera-cluster/" target="_blank" rel="noopener">https://mariadb.com/kb/en/getting-started-with-mariadb-galera-cluster/</a></p>
<p>Galera Cluster包括两个组件</p>
<blockquote>
<p>Galera replication library (galera-3)<br>WSREP： MySQL扩展Write Set Replication API</p>
</blockquote>
<p>wresp复制实现：</p>
<blockquote>
<p>percona-cluster<br>MariaDB-Cluster<br>至少需要三个节点，不能安装mariadb-server  </p>
</blockquote>
<p>Galera Cluster配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install MariaDB-Galera-server</span><br><span class="line"></span><br><span class="line">Vim &#x2F;etc&#x2F;my.cnf.d&#x2F;server.cnf</span><br><span class="line">wsrep_provider &#x3D; &#x2F;usr&#x2F;lib64&#x2F;galera&#x2F;libgalera_smm.so</span><br><span class="line">wsrep_cluster_address&#x3D;&quot;gcomm:&#x2F;&#x2F;172.16.0.7,172.16.0.17,172.16.0.27&quot;</span><br><span class="line">binlog_format&#x3D;row</span><br><span class="line">default_storage_engine&#x3D;InnoDB</span><br><span class="line">innodb_autoinc_lock_mode&#x3D;2</span><br><span class="line">bind-address&#x3D;0.0.0.0</span><br><span class="line"></span><br><span class="line">下面配置可选项</span><br><span class="line">wsrep_cluster_name &#x3D; ‘mycluster‘默认my_wsrep_cluster</span><br><span class="line">wsrep_node_name &#x3D; &#39;node1&#39;</span><br><span class="line">wsrep_node_address &#x3D; ‘172.16.0.7&#39;</span><br><span class="line"></span><br><span class="line">首次启动时，需要初始化集群，在其中一个节点上执行命令：</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysql start --wsrep-new-cluster</span><br><span class="line"></span><br><span class="line">而后正常启动其它节点</span><br><span class="line">service mysql start</span><br><span class="line"></span><br><span class="line">查看集群中相关系统变量和状态变量：</span><br><span class="line">SHOW VARIABLES LIKE &#39;wsrep_%‘;</span><br><span class="line">SHOW STATUS LIKE &#39;wsrep_%‘;</span><br><span class="line">SHOW STATUS LIKE &#39;wsrep_cluster_size‘;</span><br></pre></td></tr></table></figure>

<p><strong>读写分离</strong>：</p>
<blockquote>
<p>mysql-proxy –&gt; Atlas (Qihoo)</p>
<p>Amoeba： <a href="https://sourceforge.net/projects/amoeba/" target="_blank" rel="noopener">https://sourceforge.net/projects/amoeba/</a></p>
<p>dbproxy： <a href="https://github.com/Meituan-Dianping/DBProxy" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/DBProxy</a>  </p>
</blockquote>
<p><strong>复制的问题和解决方案：</strong></p>
<blockquote>
<p>(1) 数据损坏或丢失<br>Master： MHA + semi repl<br>Slave： 重新复制</p>
<p>(2) 混合使用存储引擎<br>MyISAM：不支持事务<br>InnoDB：支持事务</p>
<p>(3) 不惟一的server id<br>重新复制</p>
<p>(4) 复制延迟<br>需要额外的监控工具的辅助<br>一从多主<br>多线程复制：对多个数据库复制  </p>
</blockquote>
<h4 id="八、性能衡量指标和压力测试"><a href="#八、性能衡量指标和压力测试" class="headerlink" title="八、性能衡量指标和压力测试"></a>八、性能衡量指标和压力测试</h4><p><strong>数据库服务衡量指标：</strong><br>qps: query per second<br>tps: transaction per second</p>
<p><strong>压力测试工具：</strong></p>
<blockquote>
<p>mysqlslap</p>
<p>Sysbench：功能强大 <a href="https://github.com/akopytov/sysbench" target="_blank" rel="noopener">https://github.com/akopytov/sysbench</a></p>
<p>tpcc-mysql</p>
<p>MySQL Benchmark Suite</p>
<p>MySQL super-smack</p>
<p>MyBench  </p>
</blockquote>
<p><strong>mysqlslap：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mysqlslap：来自于mariadb包，测试的过程默认生成一个mysqlslap的schema,生成测试表t1，查询和插入测试数据，mysqlslap库自动生成，如果已经存在则先删除。用--onlyprint来打印实际的测试过程，整个测试完成后不会在数据库中留下痕迹</span><br><span class="line"></span><br><span class="line">使用格式： mysqlslap [options]</span><br><span class="line"></span><br><span class="line">常用参数 [options] 说明：</span><br><span class="line">--auto-generate-sql, -a 自动生成测试表和数据，表示用mysqlslap工具自己生成的SQL脚本来测试并发压力</span><br><span class="line"></span><br><span class="line">--auto-generate-sql-load-type&#x3D;type 测试语句的类型。代表要测试的环境是读操作还是写操作还是两者混合的。取值包括：read， key， write， update和mixed(默认)</span><br><span class="line"></span><br><span class="line">--auto-generate-sql-add-auto-increment 代表对生成的表自动添加auto_increment列，从5.1.18版本开始支持</span><br><span class="line"></span><br><span class="line">--number-char-cols&#x3D;N, -x N 自动生成的测试表中包含多少个字符类型的列，默认1</span><br><span class="line"></span><br><span class="line">--number-int-cols&#x3D;N, -y N 自动生成的测试表中包含多少个数字类型的列，默认1</span><br><span class="line"></span><br><span class="line">--number-of-queries&#x3D;N 总的测试查询次数(并发客户数×每客户查询数)</span><br><span class="line"></span><br><span class="line">--query&#x3D;name,-q 使用自定义脚本执行测试，例如可以调用自定义的存储过程或者sql语句来执行测试</span><br><span class="line"></span><br><span class="line">--create-schema 代表自定义的测试库名称，测试的schema， MySQL中schema也就是database</span><br><span class="line"></span><br><span class="line">--commint&#x3D;N 多少条DML后提交一次</span><br><span class="line"></span><br><span class="line"> --compress, -C 如服务器和客户端都支持压缩，则压缩信息</span><br><span class="line"> </span><br><span class="line"> --concurrency&#x3D;N, -c N 表示并发量，即模拟多少个客户端同时执行select。可指定多个值，以逗号或者--delimiter参数</span><br><span class="line">指定值做为分隔符。如： --concurrency&#x3D;100,200,500</span><br><span class="line"></span><br><span class="line">--engine&#x3D;engine_name, -e engine_name 代表要测试的引擎，可以有多个，用分隔符隔开。例如： --engines&#x3D;myisam,innodb</span><br><span class="line"></span><br><span class="line">--iterations&#x3D;N, -i N 测试执行的迭代次数，代表要在不同并发环境下，各自运行测试多少次。</span><br><span class="line"></span><br><span class="line">--only-print 只打印测试语句而不实际执行。</span><br><span class="line"></span><br><span class="line">--detach&#x3D;N 执行N条语句后断开重连</span><br><span class="line"></span><br><span class="line">--debug-info, -T 打印内存和CPU的相关信息</span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单线程测试</span><br><span class="line">mysqlslap -a -uroot -p</span><br><span class="line"></span><br><span class="line">多线程测试。使用–concurrency来模拟并发连接</span><br><span class="line">mysqlslap -a -c 100 -uroot -p</span><br><span class="line"></span><br><span class="line">迭代测试。用于需要多次执行测试得到平均值</span><br><span class="line">mysqlslap -a -i 10 -uroot -p</span><br><span class="line">mysqlslap ---auto-generate-sql-add-autoincrement -a</span><br><span class="line">mysqlslap -a --auto-generate-sql-load-type&#x3D;read</span><br><span class="line">mysqlslap -a --auto-generate-secondary-indexes&#x3D;3</span><br><span class="line">mysqlslap -a --auto-generate-sql-write-number&#x3D;1000</span><br><span class="line">mysqlslap --create-schema world -q &quot;select count(*) from City”</span><br><span class="line">mysqlslap -a -e innodb -uroot -p</span><br><span class="line">mysqlslap -a --number-of-queries&#x3D;10 -uroot -p</span><br><span class="line"></span><br><span class="line">测试同时不同的存储引擎的性能进行对比：</span><br><span class="line">mysqlslap -a --concurrency&#x3D;50,100 --number-ofqueries 1000 --iterations&#x3D;5 --engine&#x3D;myisam,innodb -</span><br><span class="line">-debug-info -uroot -p</span><br><span class="line"></span><br><span class="line">执行一次测试，分别50和100个并发，执行1000次总查询：mysqlslap -a --concurrency&#x3D;50,100 --number-ofqueries 1000 --debug-info -uroot -p</span><br><span class="line"></span><br><span class="line">50和100个并发分别得到一次测试结果(Benchmark)，并发数越多，执行完所有查询的时间越长。为了准确起见，可以多迭代测试几次:</span><br><span class="line">mysqlslap -a --concurrency&#x3D;50,100 --number-ofqueries 1000 --iterations&#x3D;5 --debug-info -uroot -p</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>python（一）</title>
    <url>/2020/07/02/python1/</url>
    <content><![CDATA[<p>Python之禅</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Beautiful is better than ugly. 优美胜于丑陋</p>
<p>Explicit is better than implicit. 明了胜于隐晦</p>
<p>Simple is better than complex. 简洁胜于复杂</p>
<p>Complex is better than complicated. 复杂胜于混乱</p>
<p>Flat is better than nested. 扁平胜于嵌套</p>
<p>Sparse is better than dense. 间隔胜于紧凑</p>
<p>Readability counts. 可读性很重要</p>
<p>Special cases aren’t special enough to break the rules. 即便是特例，也不可违背这些规则</p>
<p>Although practicality beats purity. 虽然现实往往不那么完美</p>
<p>Errors should never pass silently. 有错必究</p>
<p>Unless explicitly silenced. 除非你确定需要这样做</p>
<p>In the face of ambiguity, refuse the temptation to guess.当存在多种可能，不要尝试去猜测</p>
<p>There should be one– and preferably only one –obvious way to do it. 肯定有一种——通常也是唯一一种——最佳的解决方案</p>
<p>Although that way may not be obvious at first unless you’re Dutch. 虽然这并不容易，除非你是荷兰人</p>
<p>Now is better than never. 做也许好过不做</p>
<p>Although never is often better than <em>right</em> now. 但不假思索就动手还不如不做</p>
<p>If the implementation is hard to explain, it’s a bad idea.如果你无法向人描述你的方案，那肯定不是一个好方案</p>
<p>If the implementation is easy to explain, it may be a good idea.反之亦然</p>
<p>Namespaces are one honking great idea – let’s do more of those!名称空间是一种绝妙的理念，我们应当多加利用</p>
</blockquote>
<p>版本</p>
<blockquote>
<p>2.x—2.7</p>
<p>3.x – 3.7</p>
</blockquote>
<p>程序</p>
<blockquote>
<p>算法 + 数据结构</p>
<p>数据是一切程序的核心</p>
<p>数据结构是数据在计算机中的类型和组织方式</p>
<p>算法是处理数据的方式，算法有优劣之分</p>
</blockquote>
<p>. 表示家目录</p>
<p>数值型<br>int、float、complex、bool –&gt; class (类)<br>1、3.14、2+3j  –&gt; instance (对象)</p>
<p>内建函数（built-in）</p>
<blockquote>
<p>类型转换<br>int(), float(), complex(x), bool(x)</p>
<p>数字的处理函数<br>min(), max(), pow(x,y), math.sqrt()</p>
<p>进制函数，返回值是字符串<br>bin(), oct(), hex()</p>
<p>math.pi</p>
<p>math.e 自然常数</p>
<p>类型判断<br>type(), isinstance()</p>
</blockquote>
<p>内置数据结构<br>1、列表list</p>
<blockquote>
<p>列表是可变的</p>
<p>列表内的个体称作元素</p>
<p>元素可以是任意对象</p>
<p>线性数据结构</p>
<p>列表内元素有顺序，可使用索引</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>编程语言、python</tag>
      </tags>
  </entry>
</search>
